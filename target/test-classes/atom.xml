<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>Planet Scala</title>
	<link rel="self" href="http://www.drmaciver.com/planetscala/atom.xml"/>
	<link href="http://www.drmaciver.com/planetscala/"/>
	<id>http://www.drmaciver.com/planetscala/atom.xml</id>
	<updated>2008-11-01T21:00:55+00:00</updated>
	<generator uri="http://www.planetplanet.org/">Planet/2.0 +http://www.planetplanet.org</generator>

	<entry>
		<title type="html">RPC Server for Erlang, In Scala</title>
		<link href="http://blogtrader.net/page/dcaoyuan/entry/rpc_server_for_erlang_in1"/>
		<id>http://blogtrader.net/page/dcaoyuan/entry/rpc_server_for_erlang_in1</id>
		<updated>2008-11-01T01:57:18+00:00</updated>
		<content type="html">&lt;p&gt;
There has been Java code in my previous blog: &lt;a href=&quot;http://blogtrader.org/page/dcaoyuan/entry/rpc_server_for_erlang_in&quot;&gt;RPC Server for Erlang, In Java&lt;/a&gt;, I'm now try to rewrite it in Scala. With the pattern match that I've been familiar with in Erlang, write the Scala version is really a pleasure. You can compare it with the &lt;a href=&quot;http://blogtrader.org/page/dcaoyuan/entry/rpc_server_for_erlang_in&quot;&gt;Java version&lt;/a&gt;.
&lt;p&gt;
I do not try Scala's actor lib yet, maybe late.
&lt;p&gt;
And also, I should port Erlang's &lt;b&gt;jinterface&lt;/b&gt; to Scala, since OtpErlangTuple, OtpErlangList should be written in Scala's Tuple and List.
&lt;p&gt;
The code is auto-formatted by NetBeans' Scala plugin, and the syntax highlighting is the same as in NetBeans, oh, not exactly.
&lt;pre class=&quot;sh_scala&quot;&gt;
/*
 * RpcMsg.scala
 *
 */
package net.lightpole.rpcnode

import com.ericsson.otp.erlang.{OtpErlangAtom, OtpErlangList, OtpErlangObject, OtpErlangPid, OtpErlangRef, OtpErlangTuple}

class RpcMsg(val call:OtpErlangAtom,
             val mod :OtpErlangAtom,
             val fun :OtpErlangAtom,
             val args:OtpErlangList,
             val user:OtpErlangPid,
             val to  :OtpErlangPid,
             val tag :OtpErlangRef) {
}

object RpcMsg {
   
   def apply(msg:OtpErlangObject) : Option[RpcMsg] = msg match {
      case tMsg:OtpErlangTuple =&gt;
         tMsg.elements() match {
            /* {'$gen_call', {To, Tag}, {call, Mod, Fun, Args, User}} */
            case Array(head:OtpErlangAtom, from:OtpErlangTuple, request:OtpErlangTuple) =&gt;
               if (head.atomValue.equals(&quot;$gen_call&quot;)) {
                  (from.elements, request.elements) match {
                     case (Array(to :OtpErlangPid,
                                 tag:OtpErlangRef), Array(call:OtpErlangAtom,
                                                          mod :OtpErlangAtom,
                                                          fun :OtpErlangAtom,
                                                          args:OtpErlangList,
                                                          user:OtpErlangPid)) =&gt;
                        if (call.atomValue.equals(&quot;call&quot;)) {
                           Some(new RpcMsg(call, mod, fun, args, user, to, tag))
                        } else None
                     case _ =&gt; None
                  }
               } else None
            case _ =&gt; None
         }
      case _ =&gt; None
   }
}
&lt;/pre&gt;
&lt;p&gt;
&lt;pre class=&quot;sh_scala&quot;&gt;
/*
 * RpcNode.scala
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */
package net.lightpole.rpcnode

import com.ericsson.otp.erlang.{OtpAuthException, OtpConnection, OtpErlangAtom, OtpErlangExit, OtpErlangObject, OtpErlangString, OtpErlangTuple, OtpSelf}
import java.io.IOException
import java.net.InetAddress
import java.net.UnknownHostException
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.logging.Level
import java.util.logging.Logger


trait Cons {
   val OK     = new OtpErlangAtom(&quot;ok&quot;)
   val ERROR  = new OtpErlangAtom(&quot;error&quot;)
   val STOPED = new OtpErlangAtom(&quot;stoped&quot;)
   val THREAD_POOL_SIZE = 100
}

/**
 *
 * Usage:
 *   $ erl -sname clientnode -setcookie mycookie
 *   (clientnode@cmac)&gt; rpc:call(xnodename@cmac, xnode, parse, []).
 *
 * @author Caoyuan Deng
 */
abstract class RpcNode(xnodeName:String, cookie:String, threadPoolSize:Int) extends Cons {
   
   def this(xnodeName:String, cookie:String) = this(xnodeName, cookie, 100)
   
   private var xSelf:OtpSelf = _
   private var sConnection:OtpConnection = _
   private var execService:ExecutorService = Executors.newFixedThreadPool(threadPoolSize)
   private val flags = Array(0)

   startServerConnection(xnodeName, cookie)
   loop
    
   def startServerConnection(xnodeName:String, cookie:String ) = {
      try {
         xSelf = new OtpSelf(xnodeName, cookie);
         // The node then publishes its port to the Erlang Port Mapper Daemon.
         // This registers the node name and port, making it available to a remote client process.
         // When the port is published it is important to immediately invoke the accept method.
         // Forgetting to accept a connection after publishing the port would be the programmatic
         // equivalent of false advertising
         val registered = xSelf.publishPort();
         if (registered) {
            System.out.println(xSelf.node() + &quot; is ready.&quot;);
            /**
             * Accept an incoming connection from a remote node. A call to this
             * method will block until an incoming connection is at least
             * attempted.
             */
            sConnection = xSelf.accept();
         } else {
            System.out.println(&quot;There should be an epmd running, start an epmd by running 'erl'.&quot;);
         }
      } catch {
         case ex:IOException =&gt;
         case ex:OtpAuthException =&gt;
      }
   }

   def loop : Unit = {
      try {
         val msg = sConnection.receive
            
         val task = new Runnable() {
            override
            def run = RpcMsg(msg) match {
               case None =&gt;
                  try {
                     sConnection.send(sConnection.peer.node, new OtpErlangString(&quot;unknown request&quot;));
                  } catch {
                     case ex:IOException =&gt;
                  }
               case Some(call) =&gt;
                  val t0 = System.currentTimeMillis

                  flag(0) = processRpcCall(call)

                  System.out.println(&quot;Rpc time: &quot; + (System.currentTimeMillis() - t0) / 1000.0)
            }
         }

         execService.execute(task)

         if (flag(0) == -1) {
            System.out.println(&quot;Exited&quot;)
         } else loop
         
      } catch {
         case ex:IOException =&gt; loop
         case ex:OtpErlangExit =&gt;
         case ex:OtpAuthException =&gt;
      }
   }

   /** @throws IOException */
   def sendRpcResult(call:RpcMsg, head:OtpErlangAtom, result:OtpErlangObject) = {
      val tResult = new OtpErlangTuple(Array(head, result))

      // Should specify call.tag here
      val msg = new OtpErlangTuple(Array(call.tag, tResult))
      // Should specify call.to here
      sConnection.send(call.to, msg, 1024 * 1024 * 10)
   }

   /** @abstact */
   def processRpcCall(call:RpcMsg) : Int
}

object RpcCall {   
   def getShortLocalHost : String = getLocalHost(false)

   def getLongLocalHost : String = getLocalHost(true)

   def getLocalHost(longName:Boolean) : String = {
      var localHost = &quot;localhost&quot;
      try {
         localHost = InetAddress.getLocalHost.getHostName;
         if (!longName) {
            /* Make sure it's a short name, i.e. strip of everything after first '.' */
            val dot = localHost.indexOf(&quot;.&quot;)
            if (dot != -1) localHost = localHost.substring(0, dot)
         }
      } catch {
         case ex:UnknownHostException =&gt;
      }

      localHost
   }
}
&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content>
		<author>
			<name>dcaoyuan</name>
			<uri>http://blogtrader.net/page</uri>
		</author>
		<source>
			<title type="html">BlogTrader</title>
			<subtitle type="html">A space for traders</subtitle>
			<link rel="self" href="http://blogtrader.net/page/dcaoyuan/feed/entries/atom"/>
			<id>http://blogtrader.net/page</id>
			<updated>2008-11-01T21:00:17+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">One of your best Pat</title>
		<link href="http://blog.tmorris.net/one-of-your-best-pat/"/>
		<id>http://blog.tmorris.net/?p=393</id>
		<updated>2008-10-31T21:41:12+00:00</updated>
		<content type="html">&lt;p&gt;Well done. Keep it up.&lt;br /&gt;
&lt;/p&gt;</content>
		<author>
			<name>Tony Morris</name>
			<uri>http://blog.tmorris.net</uri>
		</author>
		<source>
			<title type="html">λ Tony’s blog λ</title>
			<subtitle type="html">The weblog of Tony Morris</subtitle>
			<link rel="self" href="http://blog.tmorris.net/feed/"/>
			<id>http://blog.tmorris.net/feed/</id>
			<updated>2008-10-31T22:20:34+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Maven For Beginners</title>
		<link href="http://suereth.blogspot.com/2008/10/maven-for-beginners.html"/>
		<id>tag:blogger.com,1999:blog-1673113361032868171.post-2449857706733384647</id>
		<updated>2008-10-31T16:40:35+00:00</updated>
		<content type="html">&lt;span&gt;Not this content is also being submitted to the scala-lang.org site.  It is duplicated here mostly for peer review and for those of my readers who are *not* scala-centric.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This article is a more in-depth look at what maven is and how a new user can make use of it.  If you'd like a getting-started-quickly guide, please check out: &lt;a href=&quot;http://scala-blogs.org/2008/01/maven-for-scala.html&quot;&gt;maven for scala&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;What is Maven?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Maven is modern build/project management tool.  According to its &lt;a href=&quot;http://maven.apache.org/what-is-maven.html&quot;&gt;website&lt;/a&gt;, the core purposes are:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Make the build process easy&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;Provide a uniform build system&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;Provide quality project information&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;Provide guidelines for &quot;best practices&quot; in development&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;Allows transparent migration to new features&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;In practice, maven can greatly simplify builds for &quot;standard&quot; projects, and makes it easier to add new libraries/modules to existing projects.  Maven builds tend to consist mostly of &quot;declarations&quot; and configuration, with very little scripting.  Maven also promotes the &quot;convention over configuration&quot; idea to reduce the length of build files.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Downloading Maven&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The first thing you need to get started with maven, is maven itself.  It can be downloaded from &lt;a href=&quot;http://maven.apache.org/download.html&quot;&gt;http://maven.apache.org/download.html&lt;/a&gt;.  Unzip/untar it into a directory of your choice and make sure ${MAVEN_HOME}/bin is in your PATH (even on windows).  For some operating systems their are maven-packages you can download using your package manager.  There are also IDE integrations for most Java IDEs.  Some of these integration come with a version of maven &quot;bundled&quot; with the plugin (e.g. Eclipse IAM + Eclipse M2E).&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Creating your first project&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;After downloading maven, you should create a simple project to ensure that everything is working correctly.  This easiest way to do this is by using the Maven Archetype Plugin.  In maven an &quot;archetype&quot; is the general skeleton structure (or template) of a project.  You can run the archetype plugin as follows:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre&gt;mvn archetype:generate&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;You may notice that maven has started downloading jar files onto your computer at this point.  Maven uses a dependency resolution mechanism that will download dependencies as needed (and only once).  If you're using a fresh install of maven, it may need to resolve the archetype plugin.&lt;br /&gt;&lt;br /&gt;Maven should give you a list of available project templates (scala was #30 on my list).  Select one that may interest you most (and if it's not scala... well....).&lt;br /&gt;&lt;br /&gt;Next maven will begin asking you for a groupId, artifactId, versionId and packaging.  We'll cover these later, but for now just use an inverted domain name for groupId (e.g. org.scala-lang) a project name for artifactId (e.g. test-project) and the default for veresionId/package.  Next cd test-project and run mvn package.  Once again you should see maven automatically downloading dependencies (such as scala-library, scala-compiler, junit, etc.)  Congratulations, you've built your first maven project!&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Build File Structure&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Maven projects are defined by their &quot;Project Object Model&quot; or pom.  This file is located in the base directory of a maven project and is called pom.xml.   The Project Object Model includes a lot of different information:&lt;br /&gt;&lt;ul&gt;&lt;br /&gt;&lt;li&gt;The name/description of the project&lt;/li&gt;&lt;br /&gt;&lt;li&gt;The style/packaging of the project&lt;/li&gt;&lt;br /&gt;&lt;li&gt;The version of the project&lt;/li&gt;&lt;br /&gt;&lt;li&gt;The dependencies (libraries or otherwise) of the project&lt;/li&gt;&lt;br /&gt;&lt;li&gt;The configuration for the build (plugins, directories, etc.)&lt;/li&gt;&lt;br /&gt;&lt;li&gt;The configuration for reports (test coverage, static analysis, etc)&lt;/li&gt;&lt;br /&gt;&lt;li&gt;The developers/contributors for the project (name, email, etc.)&lt;/li&gt;&lt;br /&gt;&lt;li&gt;The Infrastructure (Source Control Repository, Continuous Integration Server, Issue Tracker) for the project&lt;/li&gt;&lt;br /&gt;&lt;li&gt;The maven repositories used for the project&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;br /&gt;As you can see, this is a lot of information!  In addition to all this, POM files are object-oriented and may inherit from one parent.  By default, all maven projects inherit from the maven &quot;master pom&quot;.  The master pom defines the standard build layout/configuration for maven projects.  You can override/extend this behavior in your project pom if desired.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;POM File&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Here's a standard maven pom file for a scala project:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br /&gt;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&amp;gt;&lt;br /&gt;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scala-lang.demo&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scala-test&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br /&gt;    &amp;lt;name&amp;gt;Demo of maven for Scala Lang website&amp;lt;/name&amp;gt;&lt;br /&gt;    &amp;lt;url&amp;gt;http://scala-lang.org&amp;lt;/url&amp;gt;&lt;br /&gt;    &amp;lt;repositories&amp;gt;&lt;br /&gt;        &amp;lt;repository&amp;gt;&lt;br /&gt;            &amp;lt;id&amp;gt;scala-tools.org&amp;lt;/id&amp;gt;&lt;br /&gt;            &amp;lt;name&amp;gt;Scala-tools Maven2 Repository&amp;lt;/name&amp;gt;&lt;br /&gt;            &amp;lt;url&amp;gt;http://scala-tools.org/repo-releases&amp;lt;/url&amp;gt;&lt;br /&gt;        &amp;lt;/repository&amp;gt;&lt;br /&gt;    &amp;lt;/repositories&amp;gt;&lt;br /&gt;    &amp;lt;pluginRepositories&amp;gt;&lt;br /&gt;        &amp;lt;pluginRepository&amp;gt;&lt;br /&gt;            &amp;lt;id&amp;gt;scala-tools.org&amp;lt;/id&amp;gt;&lt;br /&gt;            &amp;lt;name&amp;gt;Scala-tools Maven2 Repository&amp;lt;/name&amp;gt;&lt;br /&gt;            &amp;lt;url&amp;gt;http://scala-tools.org/repo-releases&amp;lt;/url&amp;gt;&lt;br /&gt;        &amp;lt;/pluginRepository&amp;gt;&lt;br /&gt;    &amp;lt;/pluginRepositories&amp;gt;&lt;br /&gt;    &amp;lt;dependencies&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.scala-lang&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;scala-library&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;2.7.2-rc2&amp;lt;/version&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;&lt;br /&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;    &amp;lt;/dependencies&amp;gt;&lt;br /&gt;    &amp;lt;build&amp;gt;&lt;br /&gt;        &amp;lt;plugins&amp;gt;&lt;br /&gt;            &amp;lt;plugin&amp;gt;&lt;br /&gt;                &amp;lt;groupId&amp;gt;org.scala-tools&amp;lt;/groupId&amp;gt;&lt;br /&gt;                &amp;lt;artifactId&amp;gt;maven-scala-plugin&amp;lt;/artifactId&amp;gt;&lt;br /&gt;                &amp;lt;executions&amp;gt;&lt;br /&gt;                    &amp;lt;execution&amp;gt;&lt;br /&gt;                        &amp;lt;goals&amp;gt;&lt;br /&gt;                            &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;&lt;br /&gt;                            &amp;lt;goal&amp;gt;testCompile&amp;lt;/goal&amp;gt;&lt;br /&gt;                        &amp;lt;/goals&amp;gt;&lt;br /&gt;                    &amp;lt;/execution&amp;gt;&lt;br /&gt;                &amp;lt;/executions&amp;gt;&lt;br /&gt;                &amp;lt;configuration&amp;gt;&lt;br /&gt;                    &amp;lt;sourceDir&amp;gt;src/main/java&amp;lt;/sourceDir&amp;gt;&lt;br /&gt;                    &amp;lt;jvmArgs&amp;gt;&lt;br /&gt;                        &amp;lt;jvmArg&amp;gt;-Xms64m&amp;lt;/jvmArg&amp;gt;&lt;br /&gt;                        &amp;lt;jvmArg&amp;gt;-Xmx1024m&amp;lt;/jvmArg&amp;gt;&lt;br /&gt;                    &amp;lt;/jvmArgs&amp;gt;&lt;br /&gt;                &amp;lt;/configuration&amp;gt;&lt;br /&gt;            &amp;lt;/plugin&amp;gt;&lt;br /&gt;        &amp;lt;/plugins&amp;gt;&lt;br /&gt;    &amp;lt;/build&amp;gt;&lt;br /&gt;&amp;lt;/project&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Let's analyse this a bit.   First off, all pom files consist of a &quot;project&quot; xml element.  This encompases the entire xml document.   The modelVersion element is always the same and is required for maven2 projects.  Here's some simple descriptions of the other elements:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;groupId - This corresponds to the inverted domain-name of the project.  Although you could use any arbitrary value, it's recommended to use your company domain name here&lt;br /&gt;    &lt;li&gt;artifactId - This is a unique id for the project (within the group).  This name will be used when creating jar/war/ear files.&lt;br /&gt;    &lt;li&gt;version - This represents the current version of the project.  More details later&lt;br /&gt;    &lt;li&gt;name - This is the human-readable name of the project.&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;url -This is the url for the project website.&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;packaging - This defines the &quot;style&quot; of project your building (e.g. ear, jar, war, etc.).  For more information on packaging, check out the respective plugins (maven-jar-plugin, maven-war-plugin, etc.)&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;dependencies - Specifies the dependencies of the project.  This will be materialized from any defined maven repositories.  More details later&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;repositories - Specifies alternative locations for maven to look when materializing dependencies.&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;pluginRepositories - Specifies alternative location for maven to look when materializing build plugins&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;build - Specifies configuration on *how* to build the project&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;reports - Specifies configuration on *what* reports to generate for the project&lt;/li&gt;&lt;br /&gt;&lt;/li&gt;&lt;/li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt; &lt;br /&gt;&lt;span&gt; Default Directory Layout&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Maven projects have default layouts defined by a combination of the maven super-pom and any build-plugins you have declared.   These defaults are customizable, but it is generally recommended to use the convention.  (The more you deviate the more XML you need to write).  Here is a sample project layout with links to descriptions on which maven plugins are responsible for which directories and how you can override the defaults.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre&gt;&lt;br /&gt;project/&lt;br /&gt;   pom.xml   -  Defines the project&lt;br /&gt;   src/&lt;br /&gt;      main/&lt;br /&gt;          java/ - Contains all java code that will go in your final artifact.  &lt;br /&gt;                  See &lt;a href=&quot;http://maven.apache.org/plugins/maven-compiler-plugin/&quot;&gt;maven-compiler-plugin&lt;/a&gt; for details&lt;br /&gt;          scala/ - Contains all scala code that will go in your final artifact.  &lt;br /&gt;                   See &lt;a href=&quot;http://scala-tools.org/mvnsites/maven-scala-plugin/&quot;&gt;maven-scala-plugin&lt;/a&gt; for details&lt;br /&gt;          resources/ - Contains all static files that should be available on the classpath &lt;br /&gt;                       in the final artifact.  See &lt;a href=&quot;http://maven.apache.org/plugins/maven-resources-plugin/&quot;&gt;maven-resources-plugin&lt;/a&gt; for details&lt;br /&gt;          webapp/ - Contains all content for a web application (jsps, css, images, etc.)  &lt;br /&gt;                    See &lt;a href=&quot;http://maven.apache.org/plugins/maven-war-plugin/&quot;&gt;maven-war-plugin&lt;/a&gt; for details&lt;br /&gt;     site/ - Contains all apt or xdoc files used to create a project website.  &lt;br /&gt;             See &lt;a href=&quot;http://maven.apache.org/plugins/maven-site-plugin/&quot;&gt;maven-site-plugin&lt;/a&gt; for details       &lt;br /&gt;     test/&lt;br /&gt;         java/ - Contains all java code used for testing.   &lt;br /&gt;                 See &lt;a href=&quot;http://maven.apache.org/plugins/maven-compiler-plugin/&quot;&gt;maven-compiler-plugin&lt;/a&gt; for details&lt;br /&gt;         scala/ - Contains all scala code used for testing.   &lt;br /&gt;                  See &lt;a href=&quot;http://scala-tools.org/mvnsites/maven-scala-plugin/&quot;&gt;maven-scala-plugin&lt;/a&gt; for details&lt;br /&gt;         resources/ - Contains all static content that should be available on the &lt;br /&gt;                      classpath during testing.   See &lt;a href=&quot;http://maven.apache.org/plugins/maven-resources-plugin/&quot;&gt;maven-resources-plugin&lt;/a&gt; for details&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Although the above represents the default layout for most scala projects, every maven plugin used could bring in its own &quot;convention&quot; for where it would like to see code.  An example of this is that the gmaven plugin for groovy expects to find groovy source code in src/main/groovy and src/test/groovy (similar to the scala plugin). &lt;br /&gt;&lt;br /&gt; &lt;br /&gt;&lt;span&gt;Build Lifecycle&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The maven build lifecycle is made up of &quot;phases&quot; and &quot;goals&quot;.  A &quot;goal&quot; is a various action defined by a plugin.  Examples include scala:compile, jetty:run-war, jboss:deploy and (the one you should be familiar with) archetype:generate.   Goals are specific to a particular maven plugin and perform a single operation.  Phases on the other hand are more abstract ideas, and represent particular points in a standard build system.   Here's a listing of some of the phases for a maven build (taken from &lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html&quot;&gt;here&lt;/a&gt;):&lt;br /&gt;&lt;ul&gt;&lt;br /&gt;    &lt;li&gt;validate - validate the project is correct and all necessary information is available&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;compile - compile the source code of the project&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;package - take the compiled code and package it in its distributable format, such as a JAR.&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;integration-test - process and deploy the package if necessary into an environment where integration tests can be run&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;verify - run any checks to verify the package is valid and meets quality criteria&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;install - install the package into the local repository, for use as a dependency in other projects locally&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;deploy - done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;br /&gt;In reality, there are many more phases defined.  For a complete listing, &lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference&quot;&gt;read here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;When operating maven on the command line you can type &quot;mvn&quot; plus a list of goals and/or phases.   These will be executed in the order defined.   Some phases may depend on other phases, such that they do not need to be specified.   For example, package depends on test.   This means you cannot package your software unless all your tests pass, and packaging will always attempt to build.   When specifying goals on the command line, the goal will execute immediately with no dependencies.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Build Plugins&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;One of the great features of maven is that there's a build plugin for almost any activity required in a Java/Scala project.   These plugins are defined in the project/build/plugins section of the pom.  Most build plugins automatically attach their goals to appropriate build phases when used, however this is configurable at runtime.  For example, here is how we ask the scala:compile and scala:testCompile goals to automatically bind to their respective phases:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;    &amp;lt;build&amp;gt;&lt;br /&gt;        &amp;lt;plugins&amp;gt;&lt;br /&gt;            &amp;lt;plugin&amp;gt;&lt;br /&gt;                &amp;lt;groupId&amp;gt;org.scala-tools&amp;lt;/groupId&amp;gt;&lt;br /&gt;                &amp;lt;artifactId&amp;gt;maven-scala-plugin&amp;lt;/artifactId&amp;gt;&lt;br /&gt;                &amp;lt;executions&amp;gt;&lt;br /&gt;                    &amp;lt;execution&amp;gt;&lt;br /&gt;                        &amp;lt;goals&amp;gt;&lt;br /&gt;                            &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;&lt;br /&gt;                            &amp;lt;goal&amp;gt;testCompile&amp;lt;/goal&amp;gt;&lt;br /&gt;                        &amp;lt;/goals&amp;gt;&lt;br /&gt;                    &amp;lt;/execution&amp;gt;&lt;br /&gt;                &amp;lt;/executions&amp;gt;&lt;br /&gt;                ...&lt;br /&gt;            &amp;lt;/plugin&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Inside the execution block there's a (sometimes) option id element and a phase element.   The phase element can be used if you'd like to bind a goal to a different phase then it defaults too. As an example, I sometimes bind the jboss:undeploy goal to the package phase and the jboss:deploy goal to the install phase.  This way if my unit tests succeed, my application gets undeployed/redeployed right after packaging, and I only to call mvn install on the command line.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Dependencies&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;One of the powerful features of maven is declarative dependencies.  Maven allows projects to declare what dependencies they have, and will automatically materialize those dependencies (including transitive dependencies).  Maven dependency declaration looks like this:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;   &amp;lt;dependencies&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.scala-lang&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;scala-library&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;2.7.2-rc2&amp;lt;/version&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;&lt;br /&gt;            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;    &amp;lt;/dependencies&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Each dependency consists of several items:&lt;br /&gt;&lt;ul&gt;&lt;br /&gt;    &lt;li&gt;groupId - The group of the dependency to rely on&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;artifactId - The artifact in the group to rely on&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;version - The version of the dependency to rely on&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;scope - The &quot;scope&quot; of the dependency. Defaults to compile (more details later)&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;packaging - The packaging for the dependency.  Defaults to jar (e.g. jar, war, ear)&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;br /&gt;The default maven repository has a website that allows you to search for dependencies called &lt;a href=&quot;http://mvnrepository.com&quot;&gt;http://mvnrepository.com&lt;/a&gt;.  Most open source projects are available either via the &quot;central&quot; maven repository and a separately hosted maven repository (e.g. jboss host's their own repository).&lt;br /&gt;&lt;br /&gt;Dependencies in maven have scope.  The scope determines when/where the dependency will show up in a classpath.  Here are the commonly used scopes:&lt;br /&gt;&lt;ul&gt;&lt;br /&gt;    &lt;li&gt;compile - The dependency is available when compiling/running/testing the project and as a transitive dependency&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;runtime - The dependency is available when running/testing but not for compilation.  Runtime dependencies show up as transitive dependencies.&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;test - The dependency is available during testing phases, but not compilation or (non-testing) runtime.  Test dependencies do not show up as transitive dependencies&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;provided - The dependency is available during compilation, but not runtime.  e.g. You expect the servlet-api will be provided by a servlet container and therefore should be a &quot;provided&quot; dependency&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;br /&gt;More information (and scopes) is available &lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Pom Inheritance&lt;/span&gt;&lt;br /&gt;The Second nicest feature of maven is pom-file inheritance.  Pom file inheritance works similarly to how single-inheritance works in an OO language.  The child POM inherits all configuration items of its parent, and can override/extend them with its own configuration.&lt;br /&gt;&lt;br /&gt;This is done through specifying a pom with a packaging of &quot;pom&quot;, and then using the &quot;parent&quot; tag in a child project.  This can greatly reduce the amount of configuration done in &quot;child&quot; projects  (Often times my child project poms only specify their parent and their artifact/group/version triplet).&lt;br /&gt;&lt;br /&gt;I've posted about this before when talking about &lt;a href=&quot;http://suereth.blogspot.com/2008/05/not-gaven-not-graven-itsgmaven.html&quot;&gt;GMaven&lt;/a&gt;&lt;br /&gt; &lt;br /&gt;A child groovy project to the above pom would look like the following:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;br /&gt; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br /&gt; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&amp;gt;&lt;br /&gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br /&gt; &amp;lt;groupId&amp;gt;com.blogspot.suereth&amp;lt;/groupId&amp;gt;&lt;br /&gt; &amp;lt;artifactId&amp;gt;groovy-child&amp;lt;/artifactId&amp;gt;&lt;br /&gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br /&gt; &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; &lt;br /&gt; &amp;lt;parent&amp;gt;&lt;br /&gt;  &amp;lt;groupId&amp;gt;com.blogspot.suereth&amp;lt;/groupId&amp;gt;&lt;br /&gt;  &amp;lt;artifactId&amp;gt;groovy-parent&amp;lt;/artifactId&amp;gt;&lt;br /&gt;  &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &lt;br /&gt; &amp;lt;/parent&amp;gt;&lt;br /&gt;&amp;lt;/project&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;This behavior is usually associated with multi-module projects, but that discussion is beyond the scope of this article.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Going Further&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This article is only designed to help you take your first steps towards using maven as your build environment.  There are more advanced topics that can greatly help your efforts of creating a build system.  Some of these include&lt;br /&gt;&lt;ul&gt;&lt;br /&gt;    &lt;li&gt;Multi-module projects&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;Profiles&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;Settings.xml&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;Setting up your own Maven Repository (and/or Proxy)&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;Deploying artifacts&lt;/li&gt;&lt;br /&gt;    &lt;li&gt;Project reporting&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;br /&gt;I'm hoping to provide some more new-user documentation for the following in the near future.  For now, I'd recommend what most good maven-build-experts use for information: google.com and maven.apache.org</content>
		<author>
			<name>J. Suereth</name>
			<email>noreply@blogger.com</email>
			<uri>http://suereth.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Rants, Raves and Ridicule</title>
			<subtitle type="html">My thoughts and/or rants on Software Development.</subtitle>
			<link rel="self" href="http://suereth.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1673113361032868171</id>
			<updated>2008-11-01T15:20:26+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Scala for NetBeans Screenshot#14: Refined Color Theme</title>
		<link href="http://blogtrader.net/page/dcaoyuan/entry/scala_for_netbeans_screenshot_14"/>
		<id>http://blogtrader.net/page/dcaoyuan/entry/scala_for_netbeans_screenshot_14</id>
		<updated>2008-10-31T15:37:56+00:00</updated>
		<content type="html">&lt;p&gt;
With more Scala coding experience, I refined color theme of Scala plugin for NetBeans. By desalinating Type name a bit, I found I can concentrate on logic a bit better. And all function calls are highlighted now, so, for multiple-line expression, when error-prone op is put on wrong new line, you can get some hints at once. It also gives you hint if a val/var is with implicit calling, which will be highlighted as a function call. 
&lt;p&gt;
There are still some bugs when infer var/val's correct type in some cases.
&lt;p&gt;
Now the editor is much informative with highlighting and bubble pop display of type information (move mouse on it with CTRL/COMMAND pressed).
&lt;p&gt;
You'll need to update to newest 1.9.0 Editing module, please wait for it appealing on Development Update Center.
&lt;p&gt;
Click on the picture to enlarge it
&lt;p&gt;
&lt;a href=&quot;http://blogtrader.net/resources/dcaoyuan/ScalaEditor_081030a.png&quot;&gt;&lt;img alt=&quot;nn&quot; width=&quot;700&quot; src=&quot;http://blogtrader.net/resources/dcaoyuan/ScalaEditor_081030a.png&quot; /&gt;&lt;/a&gt;
&lt;p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content>
		<author>
			<name>dcaoyuan</name>
			<uri>http://blogtrader.net/page</uri>
		</author>
		<source>
			<title type="html">BlogTrader</title>
			<subtitle type="html">A space for traders</subtitle>
			<link rel="self" href="http://blogtrader.net/page/dcaoyuan/feed/entries/atom"/>
			<id>http://blogtrader.net/page</id>
			<updated>2008-11-01T21:00:17+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Developing on iPhone and Android</title>
		<link href="http://kevinoncode.blogspot.com/2008/10/developing-on-iphone-and-android.html"/>
		<id>tag:blogger.com,1999:blog-1937539813134787961.post-4457312280851767811</id>
		<updated>2008-10-31T15:26:10+00:00</updated>
		<content type="html">When the iPhone SDK came out early this year, I was one of the first to sign up for the beta program.  I was excited by the possibility to develop on the platform and quickly started reading through the documentation and watching developer videos as I began development of what was to be my first iPhone app.  Unfortunately, Apple put one too many roadblocks in place, making the iPhone an undesirable platform for me to work on:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Apple prevented all discussion of iPhone APIs by developers.  I tried to ask a simple API question on an Apple developer board, and although a nice explanation why no one could answer me was sent to the board (see &lt;a href=&quot;http://www.cocoabuilder.com/archive/message/cocoa/2008/3/23/202107&quot;&gt;the mailing list archive&lt;/a&gt;), I actually received obscene emails attacking me for having the audacity to break the SDK's non-disclosure agreement.  The draconian NDA clause was removed a few weeks ago, but even then was long after the beta period was over.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Apple charged a fee just to get the developer kit working on an actual device, but then never gave many developers, including me, the unlocking codes to do so until long after the beta period ended.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Apple is still playing games with developers by occasionally pulling legitimate applications off the App Store.&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;In the end, I gave up and decided to work on &lt;a href=&quot;http://code.google.com/android/&quot;&gt;Google's Android&lt;/a&gt; instead.  First of all, Google got Android right by making the tools free and the restrictions few.  Another nice benefit was the rich tools available to Android developers due to the Android SDK's use of Java (which has the added bonus of letting me use Scala for Android development!).  So far, developing for the Android has been great-- straight-forward APIs, good tools, good documentation.  Maybe someone got mobile OS development right.&lt;br /&gt;&lt;br /&gt;Related Links:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.nabble.com/-scala--mixed-scala-android-eclipse-project-works-td19726752.html#a19726752&quot;&gt;Forum post on developing Android apps in Scala&lt;br /&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.scala-lang.org/node/160&quot;&gt;Slightly outdated official documentation on Android apps in Scala&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content>
		<author>
			<name>Kevin Albrecht</name>
			<email>noreply@blogger.com</email>
			<uri>http://kevinoncode.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Kevin on Code</title>
			<subtitle type="html">Object-oriented programmer by day.
Functional programmer by night.</subtitle>
			<link rel="self" href="http://kevinoncode.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1937539813134787961</id>
			<updated>2008-10-31T22:40:25+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Install Scala Plugin for NetBeans 6.5 RC2</title>
		<link href="http://blogtrader.net/page/dcaoyuan/entry/install_scala_plugin_for_netbeans"/>
		<id>http://blogtrader.net/page/dcaoyuan/entry/install_scala_plugin_for_netbeans</id>
		<updated>2008-10-30T22:13:59+00:00</updated>
		<content type="html">NetBeans 6.5 RC2 released. The Scala plugin on &lt;a href=&quot;http://plugins.netbeans.org/&quot;&gt;NetBeans' Plugins Portal&lt;/a&gt; is not compilable with RC2. To get Scala plugin working with RC2, do:
&lt;p&gt;
# Open NetBeans 6.5 RC2, go to &quot;Tools&quot; -&gt; &quot;Plugins&quot;, check &quot;Setting&quot; -&gt; &quot;Add&quot;, add new update center as &quot;Last Development Build&quot; with url: http://deadlock.netbeans.org/hudson/job/nbms-and-javadoc/lastStableBuild/artifact/nbbuild/nbms/updates.xml.gz
&lt;p&gt;
# Then in the &quot;Available Plugins&quot; tab, you can find the &quot;Scala&quot; category (or, you can click on &quot;Name&quot; in &quot;Available Plugins&quot; tab to find them. You may need to click &quot;Reload Catalog&quot; to get the latest available modules), check &quot;Scala Kit&quot; and click &quot;Install&quot;, following the instructions. Restart IDE.
&lt;p&gt;
I'll re-pack a new version of Scala plugin for Plugins Portal when NetBeans 6.5 is officially released.
&lt;p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content>
		<author>
			<name>dcaoyuan</name>
			<uri>http://blogtrader.net/page</uri>
		</author>
		<source>
			<title type="html">BlogTrader</title>
			<subtitle type="html">A space for traders</subtitle>
			<link rel="self" href="http://blogtrader.net/page/dcaoyuan/feed/entries/atom"/>
			<id>http://blogtrader.net/page</id>
			<updated>2008-11-01T21:00:17+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Dan and I are presenting at SD Forum on November 12th</title>
		<link href="http://blog.lostlake.org/index.php?/archives/80-Dan-and-I-are-presenting-at-SD-Forum-on-November-12th.html"/>
		<id>http://blog.lostlake.org/index.php?/archives/80-guid.html</id>
		<updated>2008-10-30T21:36:20+00:00</updated>
		<content type="html">&lt;p&gt;Developing the Next Generation of Web Applications on a Shoestring&lt;/p&gt;


&lt;p&gt;The bar for web applications keeps rising with demands for increasing richness and scalability delivered on tighter time frames and budgets.  Buy a Feature is a real-time, interactive, serious game that allows product managers to learn from their customers through play.  Buy a Feature runs in most browsers without add-ins and was built in less than 1 man-year using the Lift web framework and Scala programming language.  Buy a Feature is deployed on a standard J2EE app server and on a dual-Opteron machine supports 2,000 simultaneous players and serves 700 pages per second.  Join the Buy a Feature team, Dan O'Leary and David Pollak, as they discuss the technology and agile process that made Buy a Feature a reality.&lt;/p&gt;

&lt;p&gt; 
Where: Pillsbury Winthrop, 2475 Hanover Street, Palo Alto, 94304&lt;br /&gt;
When: Wednesday, November 12, 2008&lt;br /&gt;
6:30pm Registration, Pizza, networking, and small-talk&lt;br /&gt;
6:50pm Introduction and announcements &lt;br /&gt;
7:00pm - 8:30pm David Pollak, Lift, Dan O'Leary, CTO Enthiosys, Inc.
&lt;/p&gt;</content>
		<author>
			<name>David Pollak</name>
			<email>nospam@example.com</email>
			<uri>http://blog.lostlake.org/</uri>
		</author>
		<source>
			<title type="html">David Pollak's Blog</title>
			<subtitle type="html">Information, experiences, rants...</subtitle>
			<link rel="self" href="http://blog.lostlake.org/index.php?/feeds/index.rss2"/>
			<id>http://blog.lostlake.org/index.php?/feeds/index.rss2</id>
			<updated>2008-10-30T21:40:16+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">User-Visible Permissions in Android</title>
		<link href="http://bytecrafter.blogspot.com/2008/10/i-picked-up-t-mobile-g1-danger-flash.html"/>
		<id>tag:blogger.com,1999:blog-32241238.post-6923801003258028327</id>
		<updated>2008-10-30T21:19:35+00:00</updated>
		<content type="html">&lt;p&gt;I picked up a &lt;a href=&quot;http://www.t-mobileg1.com/&quot;&gt;T-Mobile G1 (danger: Flash-heavy site)&lt;/a&gt; at the local T-Mobile store. For those that don't know, the G1 is the first device to run &lt;a href=&quot;http://www.android.com/&quot;&gt;Google's Android platform&lt;/a&gt;. So far I like it a lot, and I'll probably post a lot more about it in the near future.&lt;/p&gt;&lt;p&gt;Like the iPhone, Android has its own app store. Unlike the iPhone, nobody moderates apps submitted to the Android app store. If an app tries to do anything of consequence (i.e. anything that a user might want to know about), it must explicitly request that permission. When you start to download an app from the marketplace, it tells you what permissions that app will require. Most apps are well behaved, but some ask for way too much.&lt;/p&gt;&lt;p&gt;For example, I wanted a weather app. I saw that there is a Weather Channel app. When I went to download it, however, I was very surprised. Here is a list of the permissions that it requested.&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Network communication&lt;/td&gt;&lt;td&gt;full Internet access&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Your location&lt;/td&gt;&lt;td&gt;coarse (network-based) location, fine (GPS) location&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;System tools&lt;/td&gt;&lt;td&gt;change network communication, change your UI settings, modify global system settings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Your messages&lt;/td&gt;&lt;td&gt;edit SMS or MMS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Services that cost you money&lt;/td&gt;&lt;td&gt;send SMS messages&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Your personal information&lt;/td&gt;&lt;td&gt;read contact data&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;What? Why does this app need access to my contacts, or to send text messages? I hope that this was just a lazy developer who requested more permissions that he actually needed, but I'm suspicious. It's entirely possible that The Weather Channel intends to compile a list of all my contacts. Not cool. Especially since it makes no mention of that.&lt;/p&gt;&lt;p&gt;I think it's great that Android provides some ability for the end user to judge the software that they might install on their phone. I'll wait until The Weather Channel updates their app.&lt;/p&gt;</content>
		<author>
			<name>Daniel Yankowsky</name>
			<email>noreply@blogger.com</email>
			<uri>http://bytecrafter.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Why not?</title>
			<link rel="self" href="http://bytecrafter.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-32241238</id>
			<updated>2008-10-31T01:20:02+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">2 Days with Google Gears</title>
		<link href="http://bytecrafter.blogspot.com/2008/10/2-days-with-google-gears.html"/>
		<id>tag:blogger.com,1999:blog-32241238.post-5708973671008368701</id>
		<updated>2008-10-30T21:18:13+00:00</updated>
		<content type="html">&lt;p&gt;I had a chance to play with Google Gears on a mockup project recently. I was surprised to learn that my understanding of Gears was not the same as the reality of Gears. I had expected it to be a JS library to facilitate rich HTML applications to handle spotty network connections. It turned out that Gears is a browser plugin that adds useful tools that any rich web app developer would find useful, though they are all aligned to handle an app losing its network connection. In the two days that I spent playing with Gears, I was pretty much blown away by the power and simplicity of it.&lt;/p&gt;&lt;p&gt;Besides understanding what Gears is, it's important to also understand what Gears is not. Gears doesn't try to be a UI library, or a general &quot;glue&quot; library (see JQuery, Prototype, MochiKit, MooTools, or &lt;em&gt;any other&lt;/em&gt; Javascript framework). It doesn't really force you to code in any particular way (this is a bit of a lie, but more on that later). Just as a sampling, Gears includes:&lt;ul&gt;&lt;li&gt;A cross-browser compatible XMLHttpRequest&lt;/li&gt;&lt;li&gt;Local database storage&lt;/li&gt;&lt;li&gt;A web resource cache, so that items can still be fetched even if the network connection goes down. This is nearly completely transparent to the developer, and works for resources loaded by Gears or by the browser itself.&lt;/li&gt;&lt;li&gt;A mechanism to run scripts in the background (for real).&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;In our little demo, we have a set of checkboxes that can be checked. Initially, these would perform an asynchronous post to the server, where they would update some server-side state. However, if the app goes offline, nothing will ever reach the server. We modified this to enqueue changes into a local database, with a background script pulling items out of the database and sending them to the server. If the server ever goes down, that thread simply stops pulling items out of the database. In addition, we set our app up so that its resources (HTML, Javascript, CSS, and images) were initially cached when the app is first loaded. A neat feature of Gears seems to be that it will monitor the apps that it knows about and will automatically update its cache if the cache ever gets stale. Unfortunately, it's not perfect. It depends on the developer updating a version string, which causes Gears to update its cache from the source.&lt;/p&gt;&lt;p&gt;One problem that we had is that the HTML that we served up would include information about what items were checked. That is to say, when you would load the page, we would serve up some &amp;lt;input type=&quot;checkbox&quot; /&amp;gt; and &amp;lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&amp;gt; elements. This makes total sense in a traditional web app. The client requests the page, and you serve it, and everybody is happy. Every time the page is served, it is reconstructed with the current state of the data. As you might imagine, this caused all kinds of problems for us. Concretely, we noticed that every time the page was reloaded (whether the network connection is up or down), the browser would display the state of the page as it was when the cache first acquired it. In a real application, that could mean that you are seeing data that is several months out of date. Now you see how I lied earlier. Gears does influence the way you code your application, but its requirements are about the same as those of any Javascript-heavy web app. As long as you separate your application presentation from your data, you should be fine.&lt;/p&gt;&lt;p&gt;Another thing that surprised and greatly pleased me was Gears' WorkerPool implementation. As everybody knows, it is impossible to run Javascript in the background in a normal web browser. I think that's because multi-threaded programming is hard, and Javascript can be pretty hairy as it is. I think that the browser designers have held off on implementing a threading solution out of fear that multithreaded Javascript would cause the apocalypse. As it turns out, though, Gears' implementation is both simple and powerful. Gears uses a message-passing mechanism for communication, with &lt;em&gt;absolutely no shared state&lt;/em&gt;. This is great news. As far as I can tell, just as your main JS code has an event loop, each worker also has an event loop. Whenever a message is sent from the main JS code to a worker, that message is copied and onMessage is invoked on by that worker's event loop. Likewise, when a worker sends a message back to the main JS, the message is copied and onMessage is invoked on the main event loop. This has some interesting implications. For one, none of the workers have access to the DOM, or to global variables defined on the page, and cannot participate in closures with mainline Javascript code. By placing a concrete wall between your page and your workers, Gears forces you to think about the interactions that the page and the worker will have, and that's a Good Thing. I'm sure that it's still possible for threading to ruin you, it's just a lot harder with a scheme like this.&lt;/p&gt;&lt;p&gt;And that's it. There's more to Gears that what I described (though not much more). It also includes some geolocation bits (presumably for Android, and maybe Safari Mobile, integration), desktop integration stuff, a standards-compliant timer, a file multi-chooser (yay!), and a binary data type (as opposed to String, which is for textual content). It's a shame that Gears is still in beta. I would really like to see some sites that use it. Of course, since I just recently installed Gears, there might be some sites that do and I never realized it.&lt;/p&gt;</content>
		<author>
			<name>Daniel Yankowsky</name>
			<email>noreply@blogger.com</email>
			<uri>http://bytecrafter.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Why not?</title>
			<link rel="self" href="http://bytecrafter.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-32241238</id>
			<updated>2008-10-31T01:20:02+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Scala 2.7.2 RC5</title>
		<link href="http://www.scala-lang.org/node/341"/>
		<id>http://www.scala-lang.org/341 at http://www.scala-lang.org</id>
		<updated>2008-10-30T13:31:42+00:00</updated>
		<content type="html">&lt;p&gt;Following some very last-minute fixes, we are exceptionally releasing, just a few days after RC4, a new &lt;a href=&quot;http://www.scala-lang.org/downloads#release_candidate&quot;&gt;Scala 2.7.2.RC5&lt;/a&gt;. We are taking particular care in polishing Scala 2.7.2, also considering that 2.7.2 will be the reference release for the &amp;quot;Programming in Scala&amp;quot; book, currently in print. This RC5 should really be our last release candidate for this release cycle, and should be shortly followed by the final release. As usual, the updated Scala plugin for Eclipse is available via the Eclipse software update facility (more information &lt;a href=&quot;http://www.scala-lang.org/node/94&quot;&gt;here&lt;/a&gt;). The new Scala 2.7.2.RC5 is available for download from our &lt;a href=&quot;http://www.scala-lang.org/downloads&quot;&gt;Download Page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.scala-lang.org/node/341&quot; target=&quot;_blank&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</content>
		<author>
			<name>scala-lang.org</name>
			<uri>http://www.scala-lang.org</uri>
		</author>
		<source>
			<title type="html">The Scala Programming Language</title>
			<link rel="self" href="http://www.scala-lang.org/rss.xml"/>
			<id>http://www.scala-lang.org/rss.xml</id>
			<updated>2008-11-01T20:20:46+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Intellij + Scala; it is with great regret…</title>
		<link href="http://blog.tmorris.net/intellij-scala-it-is-with-great-regret/"/>
		<id>http://blog.tmorris.net/?p=389</id>
		<updated>2008-10-30T04:18:58+00:00</updated>
		<content type="html">&lt;p&gt;Sadly, despite &lt;a href=&quot;http://blog.tmorris.net/intellij-idea-scala-utterly-unusable/&quot;&gt;my expressed hopes&lt;/a&gt;, in appears the state of Intellij IDEA with Scala is not improving but worsening. This is sad. Each time you start up IDEA you still get a lovely internal error and exception stack trace. But worse, ever since the 8890 EAP build, the application hangs with any reasonably sized Scala project. This is even more sad. A colleague has confirmed this on his Mac, however, we are unable to revert to a usable version since you cannot download older EAP releases.&lt;/p&gt;
&lt;p&gt;The suspected trend toward becoming more unusable for Intellij IDEA and Scala is regrettably confirmed. I wish it were not so ):&lt;/p&gt;
&lt;p&gt;The Windows Vista upgrade to XP effect perhaps?&lt;/p&gt;</content>
		<author>
			<name>Tony Morris</name>
			<uri>http://blog.tmorris.net</uri>
		</author>
		<source>
			<title type="html">λ Tony’s blog λ</title>
			<subtitle type="html">The weblog of Tony Morris</subtitle>
			<link rel="self" href="http://blog.tmorris.net/feed/"/>
			<id>http://blog.tmorris.net/feed/</id>
			<updated>2008-10-31T22:20:34+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Meta-Programming with Scala: Conditional Compilation and Loop Unrolling</title>
		<link href="http://michid.wordpress.com/2008/10/29/meta-programming-with-scala-conditional-compilation-and-loop-unrolling/"/>
		<id>http://michid.wordpress.com/?p=89</id>
		<updated>2008-10-29T23:38:56+00:00</updated>
		<content type="html">&lt;div class=&quot;snap_preview&quot;&gt;&lt;br /&gt;&lt;p&gt;The kind of comments I keep getting on my &lt;a href=&quot;http://michid.wordpress.com/2008/04/18/meta-programming-with-scala-part-i-addition/&quot;&gt;static&lt;/a&gt; &lt;a href=&quot;http://michid.wordpress.com/2008/07/30/meta-programming-with-scala-part-ii-multiplication/&quot;&gt;meta-programming&lt;/a&gt; with &lt;a href=&quot;http://michid.wordpress.com/2008/08/27/meta-programming-with-scala-part-iii-partial-function-application/&quot;&gt;Scala&lt;/a&gt; blogs are often &lt;a href=&quot;http://michid.wordpress.com/2008/07/30/meta-programming-with-scala-part-ii-multiplication/#comment-67&quot;&gt;along the lines&lt;/a&gt; of: &amp;#8220;The ability to encode Church Numerals in Scala still seems uselessly academic to me, but cool none-the-less&amp;#8221;. In this blog I will show how meta-programming can be applied in practice - at least theoretically.&lt;/p&gt;
&lt;p&gt;In my previous  blogs I introduced a technique for static meta-programing with Scala. This technique uses Scala&amp;#8217;s type system to encode values and functions on these values. The Scala compiler acts as interpreter of such functions. That is, the type checking phase of the Scala compiler actually carries out calculations like &lt;a href=&quot;http://michid.wordpress.com/2008/04/18/meta-programming-with-scala-part-i-addition/&quot;&gt;addition&lt;/a&gt; and &lt;a href=&quot;http://michid.wordpress.com/2008/08/27/meta-programming-with-scala-part-iii-partial-function-application/&quot;&gt;multiplication&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;In this post I show how to apply meta-programming for two practical problems: conditional compilation and loop unrolling. The examples make use of type level encoding for booleans and natural numbers. While I introduced an encoding for natural numbers before, I use an alternative method which is more powerful in this post. Previously it was not possible to build nested expressions having expressions as operands themselves. The new encoding supports such expressions. However, in general the new encoding depends on the &lt;a href=&quot;http://lampsvn.epfl.ch/trac/scala/changeset/16035/scala/trunk/src/compiler&quot;&gt;-Yrecursion&lt;/a&gt; compiler flag which is experimental and as of now only available in the Scala trunk. The type level encoding for booleans is along the same lines as the one for natural numbers. &lt;/p&gt;
&lt;h3&gt;Conditional Compilation&lt;/h3&gt;
&lt;p&gt;Conditional compilation is useful for example for enabling or disabling debugging or logging statements. Ideally code which is excluded by a compile time condition does not have any effect on the run-time behavior of the rest of the code. That is, the rest of the code behaves exactly as if the excluded code were not there at all. Optimizing compilers generally remove  code which is unreachable. This is where meta-programming fits in: type level encoded functions (meta-functions) are evaluated at run-time. The result of the evaluation is a type. Now we only need to trick the compiler into compiling a block of code or not compiling it depending on that type. &lt;/p&gt;
&lt;p&gt;Lets first define meta-booleans and some operations on them (&lt;a href=&quot;http://michid.wordpress.com/code/meta-programming-with-scala-conditional-compilation/&quot;&gt;full code here&lt;/a&gt;):&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;java&quot;&gt;

object Booleans {
  trait BOOL {
    type a[t &amp;lt;: BOOL, f &amp;lt;: BOOL] &amp;lt;: BOOL
    type v = a[TRUE, FALSE]
  }
  final class TRUE extends BOOL {
    type a[t &amp;lt;: BOOL, f &amp;lt;: BOOL] = t
  }
  final class FALSE extends BOOL{
    type a[t &amp;lt;: BOOL, f &amp;lt;: BOOL] = f
  }
  trait IF[x &amp;lt;: BOOL, y &amp;lt;: BOOL, z &amp;lt;: BOOL] extends BOOL {
    type a[t &amp;lt;: BOOL, f &amp;lt;: BOOL] = x#a[y, z]#a[t, f]
  }
  trait NOT[x &amp;lt;: BOOL] extends BOOL {
    type a[t &amp;lt;: BOOL, f &amp;lt;: BOOL] = IF[x, FALSE, TRUE]#a[t, f]
  }
  trait AND[x &amp;lt;: BOOL, y &amp;lt;: BOOL] extends BOOL {
    type a[t &amp;lt;: BOOL, f &amp;lt;: BOOL] = IF[x, y, FALSE]#a[t, f]
  }
  trait OR[x &amp;lt;: BOOL, y &amp;lt;: BOOL] extends BOOL {
    type a[t &amp;lt;: BOOL, f &amp;lt;: BOOL] = IF[x, TRUE, y]#a[t, f]
  }

  // aliases for nicer syntax
  type ![x &amp;lt;: BOOL] = NOT[x]
  type ||[x &amp;lt;: BOOL, y &amp;lt;: BOOL] = OR[x, y]
  type &amp;amp;&amp;amp;[x &amp;lt;: BOOL, y &amp;lt;: BOOL] = AND[x, y]
}
&lt;/pre&gt;
&lt;p&gt;The following pre-processor object contains an &lt;a href=&quot;http://www.scala-lang.org/node/114&quot;&gt;implicit&lt;/a&gt; method for converting a value of type &lt;em&gt;TRUE&lt;/em&gt; to an &lt;em&gt;Include&lt;/em&gt; object whose &lt;em&gt;apply&lt;/em&gt; method executes a block of code. Similarly it contains an implicit method for converting a value of type &lt;em&gt;FALSE&lt;/em&gt; to an &lt;em&gt;Exclude&lt;/em&gt; object whose &lt;em&gt;apply&lt;/em&gt; method simply does nothing. The strange line where &lt;em&gt;null&lt;/em&gt; is being cast to &lt;em&gt;B&lt;/em&gt; is a trick for getting a witnesses of a value of type &lt;em&gt;B&lt;/em&gt;.&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;java&quot;&gt;

object PreProc {
  def IF[B] = null.asInstanceOf[B]

  object Include {
    def apply(block: =&amp;gt; Unit) {
      block
    }
  }

  object Exclude {
    def apply(block: =&amp;gt; Unit) { }
  }

  implicit def include(t: TRUE) = Include
  implicit def exclude(f: FALSE) = Exclude
}
&lt;/pre&gt;
&lt;p&gt;Using these definitions is quite convenient now: &lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;java&quot;&gt;

object IfDefTest {
  import PreProc._

  type LOG = TRUE
  type ERR = TRUE
  type WARN = FALSE

  def errTest() {
    IF[(LOG &amp;amp;&amp;amp; ERR)#v] {
      println(&amp;quot;err&amp;quot;)
    }
  }

  def warnTest() {
    IF[(LOG &amp;amp;&amp;amp; WARN)#v] {
      println(&amp;quot;warn&amp;quot;)
    }
  }

  def main(args: Array[String]) {
    errTest()
    warnTest()
  }
}
&lt;/pre&gt;
&lt;p&gt;Running the above code will print &lt;em&gt;err&lt;/em&gt; but wont print &lt;em&gt;warn&lt;/em&gt; to the console. &lt;/p&gt;
&lt;h3&gt;Loop Unrolling&lt;/h3&gt;
&lt;p&gt;Another application for static meta-programming is loop unrolling. When the number of iterations of a loop is small and only depends on quantities known at compile time, run time performance might profit from unrolling that loop. Instead of resorting to copy paste, we can use similar techniques like above.&lt;/p&gt;
&lt;p&gt;Again let&amp;#8217;s first define meta-naturals and their operations (&lt;a href=&quot;http://michid.wordpress.com/code/meta-programming-with-scala-loop-unrolling/&quot;&gt;full code here&lt;/a&gt;):&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;java&quot;&gt;

object Naturals {
  trait NAT {
    type a[s[_ &amp;lt;: NAT] &amp;lt;: NAT, z &amp;lt;: NAT] &amp;lt;: NAT
    type v = a[SUCC, ZERO]
  }
  final class ZERO extends NAT {
    type a[s[_ &amp;lt;: NAT] &amp;lt;: NAT, z &amp;lt;: NAT] = z
  }
  final class SUCC[n &amp;lt;: NAT] extends NAT {
    type a[s[_ &amp;lt;: NAT] &amp;lt;: NAT, z &amp;lt;: NAT] = s[n#a[s, z]]
  }
  type _0 = ZERO
  type _1 = SUCC[_0]
  type _2 = SUCC[_1]
  type _3 = SUCC[_2]
  type _4 = SUCC[_3]
  type _5 = SUCC[_4]
  type _6 = SUCC[_5]

  trait ADD[n &amp;lt;: NAT, m &amp;lt;: NAT] extends NAT {
    type a[s[_ &amp;lt;: NAT] &amp;lt;: NAT, z &amp;lt;: NAT] = n#a[s, m#a[s, z]]
  }
  trait MUL[n &amp;lt;: NAT, m &amp;lt;: NAT] extends NAT {
    trait curry[n[_[_], _], s[_]] { type f[z] = n[s, z] }
    type a[s[_ &amp;lt;: NAT] &amp;lt;: NAT, z &amp;lt;: NAT] = n#a[curry[m#a, s]#f, z]
  }

  // aliases for nicer syntax
  type +[n &amp;lt;: NAT, m &amp;lt;: NAT] = ADD[n, m]
  type x[n &amp;lt;: NAT, m &amp;lt;: NAT] = MUL[n, m]
}
&lt;/pre&gt;
&lt;p&gt;The pre-processor object defines a trait &lt;em&gt;Loop&lt;/em&gt; having an &lt;em&gt;apply&lt;/em&gt; method which takes a block of code as argument. Again there are two implicit conversion methods. One which converts the zero type to a &lt;em&gt;Loop&lt;/em&gt; with an empty &lt;em&gt;apply&lt;/em&gt; function. An another one which convert the type &lt;em&gt;N + 1&lt;/em&gt; to a a &lt;em&gt;Loop&lt;/em&gt; with an &lt;em&gt;apply&lt;/em&gt; function which executes the block once and then applies itself to the type &lt;em&gt;N&lt;/em&gt;.&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;java&quot;&gt;

object PreProc {
  def LOOP[N] = null.asInstanceOf[N]

  trait Loop[N] {
    def apply(block: =&amp;gt; Unit)
  }

  implicit def loop0(n: ZERO) = new Loop[ZERO] {
    def apply(block: =&amp;gt; Unit) { }
  }

  implicit def loop[N &amp;lt;: NAT](n: SUCC[N])(implicit f: N =&amp;gt; Loop[N]) = new Loop[SUCC[N]] {
    def apply(block: =&amp;gt; Unit) {
      block
      null.asInstanceOf[N].apply(block)
    }
  }
}
&lt;/pre&gt;
&lt;p&gt;Again using this is easy and convenient:&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;java&quot;&gt;

object LoopUnroll {
  import PreProc._

  def unrollTest() {
    // The following line needs the -Yrecursion 1 flag
    // LOOP[(_3 x _2)#v] {
    LOOP[_6] {
      println(&amp;quot;hello world&amp;quot;)
    }
  }

  def main(args: Array[String]) {
    unrollTest()
  }
}
&lt;/pre&gt;
&lt;p&gt;The above code prints the string &amp;#8220;hello word&amp;#8221; six times to the console.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Scala&amp;#8217;s type system is powerful enough for encoding commonly encountered functions. Together with Scala&amp;#8217;s strong capability for creating internal DSLs, this results in convenient techniques for static meta-programming. Such techniques can be applied to practical problems - at least in theory. In practice Scala&amp;#8217;s support is not (yet?) there. For one the technique presented here depends on an experimental compiler flag (-Yrecursion). Further the types required for meta-programming might causes an &lt;a href=&quot;http://lampsvn.epfl.ch/trac/scala/ticket/1327&quot;&gt;exponential growth in compilation time&lt;/a&gt; which is not desirable. And finally an analysis with &lt;a href=&quot;https://c1visualizer.dev.java.net&quot;&gt;c1visualizerwith&lt;/a&gt; showed, that the compiler seems not to remove all unnecessary calls. &lt;/p&gt;
Posted in Uncategorized&amp;nbsp;&amp;nbsp;&amp;nbsp;Tagged: Meta-Programming, Scala&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/michid.wordpress.com/89/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/michid.wordpress.com/89/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godelicious/michid.wordpress.com/89/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/michid.wordpress.com/89/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gostumble/michid.wordpress.com/89/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/michid.wordpress.com/89/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godigg/michid.wordpress.com/89/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/michid.wordpress.com/89/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/goreddit/michid.wordpress.com/89/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/michid.wordpress.com/89/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://stats.wordpress.com/b.gif?host=michid.wordpress.com&amp;blog=2538862&amp;post=89&amp;subd=michid&amp;ref=&amp;feed=1&quot; /&gt;&lt;/div&gt;</content>
		<author>
			<name>Michid's Weblog</name>
			<uri>http://michid.wordpress.com</uri>
		</author>
		<source>
			<title type="html">Michid's Weblog</title>
			<subtitle type="html">Hacking Scala</subtitle>
			<link rel="self" href="http://michid.wordpress.com/feed/"/>
			<id>http://michid.wordpress.com/feed/</id>
			<updated>2008-10-30T13:00:22+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Scala 2.7.2 RC4</title>
		<link href="http://www.scala-lang.org/node/340"/>
		<id>http://www.scala-lang.org/340 at http://www.scala-lang.org</id>
		<updated>2008-10-27T20:09:28+00:00</updated>
		<content type="html">&lt;p&gt;After some final ironing and bug fixing, a new release candidate for the next version of Scala is available: &lt;a href=&quot;http://www.scala-lang.org/downloads#release_candidate&quot;&gt;version&amp;nbsp;2.7.2.RC4&lt;/a&gt;. As usual, the updated Scala plugin for Eclipse is available via the Eclipse software update facility (more information &lt;a href=&quot;http://www.scala-lang.org/node/94&quot;&gt;here&lt;/a&gt;). The new Scala 2.7.2.RC4 is available for download from our &lt;a href=&quot;http://www.scala-lang.org/downloads&quot;&gt;Download Page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.scala-lang.org/node/340&quot; target=&quot;_blank&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</content>
		<author>
			<name>scala-lang.org</name>
			<uri>http://www.scala-lang.org</uri>
		</author>
		<source>
			<title type="html">The Scala Programming Language</title>
			<link rel="self" href="http://www.scala-lang.org/rss.xml"/>
			<id>http://www.scala-lang.org/rss.xml</id>
			<updated>2008-11-01T20:20:46+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Bad Code</title>
		<link href="http://kevinoncode.blogspot.com/2008/10/bad-code.html"/>
		<id>tag:blogger.com,1999:blog-1937539813134787961.post-1622093320606001824</id>
		<updated>2008-10-27T13:56:49+00:00</updated>
		<content type="html">Every programmer has experienced it.  Code that is so bad, you have to share it with someone.  Here are some recent gems I have encountered.&lt;br /&gt;&lt;br /&gt;Poor man's comments.&lt;br /&gt;&lt;pre class=&quot;code&quot;&gt;If 1 = 0 Then&lt;br /&gt;...&lt;br /&gt;End If&lt;/pre&gt;Is nameString empty?&lt;br /&gt;&lt;pre class=&quot;code&quot;&gt;if (nameString + &quot;x&quot; != &quot;x&quot;) {&lt;br /&gt;...&lt;br /&gt;}&lt;/pre&gt;Hmm, is the comment wrong, or the code?&lt;br /&gt;&lt;pre class=&quot;code&quot;&gt;// Comma-separated list of numbers&lt;br /&gt;string configurationIds = &quot;254:762:2:236:23:5:21&quot;;&lt;/pre&gt;</content>
		<author>
			<name>Kevin Albrecht</name>
			<email>noreply@blogger.com</email>
			<uri>http://kevinoncode.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Kevin on Code</title>
			<subtitle type="html">Object-oriented programmer by day.
Functional programmer by night.</subtitle>
			<link rel="self" href="http://kevinoncode.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1937539813134787961</id>
			<updated>2008-10-31T22:40:25+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Data 2.0 - Is your Application ready ?</title>
		<link href="http://debasishg.blogspot.com/2008/10/data-20-is-your-application-ready.html"/>
		<id>tag:blogger.com,1999:blog-22587889.post-7783235696004271042</id>
		<updated>2008-10-27T11:35:09+00:00</updated>
		<content type="html">Brian Aker &lt;a href=&quot;http://krow.livejournal.com/622006.html&quot;&gt;talking&lt;/a&gt; about assumptions on &lt;a href=&quot;http://launchpad.net/drizzle&quot;&gt;Drizzle&lt;/a&gt; and future of database technologies ..&lt;br /&gt;&lt;br /&gt;&lt;cite&gt;&quot;Map/Reduce will kill every traditional data warehousing vendor in the market. Those who adapt to it as a design/deployment pattern will survive, the rest won't. Database systems that have no concept of being multiple node are pretty much dead. If there is no scale out story, then there is not future going forward.&quot;&lt;/cite&gt;&lt;br /&gt;&lt;br /&gt;Later on in the same post he goes on to mention the forces that he hopes would drive the performance of tomorrow's database technologies - map/reduce and asynchronous queues. Drizzle is a fork out of MySql, it is revolutionary in many respects compared to all other forks of the same product or similar products of the same genre. Drizzle does away with the erstwhile dodos of database technology viz. stored procedures, triggers etc. and is being planned exclusively for scaling out in the cloud. The development model is also ultra open source, aka organic open source and is being driven by the community as a whole.&lt;br /&gt;&lt;br /&gt;Drizzle is clearly a step towards &lt;a href=&quot;http://bitworking.org/news/218/N-1&quot;&gt;N &gt; 1&lt;/a&gt; and quite a forceful step too. Erlang was the silent roadmaker towards true N &gt; 1 with the entire ecosystem of OTP, mnesia and the supervisor hierarchies .. Erlang offers the platform and the correct set of primitives for delivering fault tolerance in applications along with replicated mnesia storage. Erlang was not built for N = 1 .. it had N &gt; 1 right into it and right from day 0 .. &lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://incubator.apache.org/couchdb/&quot;&gt;Couchdb&lt;/a&gt; is another instance that may hit the sweet spot of getting the combination right - asynchronous map/reduce along with replicated, distributed, loosely coupled document storage. Implements REST, BASE, MVCC .. what else .. that leads to eventual consistency of the system.&lt;br /&gt;&lt;br /&gt;All the buzz about future database technologies have been somehow related to the cloud, or at least being planned keeping the scale out factor in mind. Erlang started it all, and is now being actively driven in multiple dimensions by all similar complementary/competing technologies and platforms. No one talks about normalization or ACID or multi-phase commit these days. Call it Web 2.0 or Enterprise 2.0 or social networking, everything boils down to how enterprise IT can make data access easier, better, and more resilient to datacenter or network failures without compromising on the quality of service.&lt;br /&gt;&lt;br /&gt;Middleware matters, data storage in the cloud matters, data processing in the cloud matters, and we are looking at lots of vendors fighting for a space there in. Applications of Enterprise 2.0 need to be smart and malleable enough to participate in this ecosystem. Make sure they are implemented as  loosely coupled components that talk to middleware services asynchronously, can consume the atom feeds that other enterprise applications generate and do not depend on ACID properties or rely on synchronous 2-phase commit protocols from the data layer. Are we there yet ?</content>
		<author>
			<name>Debasish</name>
			<email>noreply@blogger.com</email>
			<uri>http://debasishg.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Ruminations of a Programmer</title>
			<subtitle type="html">A programmer's blog - will deal with everything that relates to a programmer. Occasionally, it will contain some humour, some politics and some sport news.</subtitle>
			<link rel="self" href="http://debasishg.blogspot.com/feeds/posts/default?alt=rss"/>
			<id>tag:blogger.com,1999:blog-22587889</id>
			<updated>2008-11-01T19:20:16+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Scala RichString is not comparable to String</title>
		<link href="http://www.gracelessfailures.com/2008/10/scala-richstring-is-not-comparable-to.html"/>
		<id>tag:blogger.com,1999:blog-5526350669322624820.post-5058834455254799850</id>
		<updated>2008-10-24T13:04:57+00:00</updated>
		<content type="html">A sadness:&lt;br /&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;      val r: scala.runtime.RichString = &quot;1&quot;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      val s: String = &quot;1&quot;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      if (r == s) {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      println(&quot;ok1&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      } else {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      println(&quot;sad1&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      }&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;      if (s == r) {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      println(&quot;ok2&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      } else {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      println(&quot;sad2&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      }&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;      if (s.equals(r)) {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      println(&quot;ok3&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      } else {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      println(&quot;sad3&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      }&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;      if (r.equals(s)) {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      println(&quot;ok4&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      } else {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;      println(&quot;sad4&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;}&lt;br /&gt;&lt;br /&gt;    &lt;/span&gt;Will print:&lt;br /&gt;&lt;span&gt;sad1&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sad2&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sad3&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sad4&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This isn't as sad as:&lt;br /&gt;&lt;span&gt;sad1&lt;/span&gt;&lt;br /&gt;&lt;span&gt;ok2&lt;/span&gt;&lt;br /&gt;&lt;span&gt;sad3&lt;/span&gt;&lt;br /&gt;&lt;span&gt;ok4&lt;/span&gt;&lt;br /&gt;which would precipitate Robey's &quot;ultimate sadness&quot;.&lt;br /&gt;&lt;br /&gt;I got into this state by adding a .drop to a String, and chaos resulted. The details are tangentally described in: http://www.nabble.com/String-and-RichString-equality-td14888607.html&lt;br /&gt;&lt;br /&gt;Still, this is another thing to keep in your head when coding along. I suppose it's best to coerce RichStrings back to Strings immediately, so as not to allow RichStrings to propagate too far.</content>
		<author>
			<name>John Kalucki</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.gracelessfailures.com/</uri>
		</author>
		<source>
			<title type="html">Graceless Failures</title>
			<subtitle type="html">Learning Scala.  The hard way.</subtitle>
			<link rel="self" href="http://www.gracelessfailures.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-5526350669322624820</id>
			<updated>2008-10-31T20:40:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Using Scala for Domain-Specific-Languages</title>
		<link href="http://suereth.blogspot.com/2008/09/using-scala-for-domain-specific.html"/>
		<id>tag:blogger.com,1999:blog-1673113361032868171.post-3685541979347823464</id>
		<updated>2008-10-24T11:26:15+00:00</updated>
		<content type="html">In this post, I'm going to attempt to create something similar to Ruby on Rails (or rake's) db:migrate scripts in Scala.  I'm not going to actually implement features, just show how one can go about constructing a DSL in the Scala language.  This is a learning process for me, so please excuse some mistakes I may make, and hopefully I can correct them in future posts.&lt;br /&gt;&lt;br /&gt;For a quick over-view of what the db:migrate scripts provide in Rails:&lt;br /&gt;&lt;ul&gt;&lt;li&gt; Convienient language-based syntax for creating/modifying/deleting tables&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Versioning of the Database API&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Convention for defining scripts to perform migrations between various versions&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;I've seen proprietary methods like db:migrate implemented at various companies, so I don't think it's anything new.  The nice thing about rails db:migrate is that you can remain db-agnostic for simple cases AND creating a new migration is pretty easy.  I'd like to keep the same conventions in scala.&lt;br /&gt;&lt;br /&gt;To begin with, we're going to define a parent class (actually a trait) for all database migration scripts to inherit from.  In rails, I believe it's called ActiveRecord::Migration.  For our purposes, we'll call it Migration.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;package com.blogspot.suereth.dbmigrate&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt;* This trait is a common parent for all migration scripts.  Each migration represents a version.&lt;br /&gt;*/&lt;br /&gt;trait Migration {&lt;br /&gt; def upgrade(implicit ctx : MigrationContext)&lt;br /&gt; def downgrade(implicit ctx : MigrationContext)&lt;br /&gt; def version : Int  //TODO - Figure out how we're really going to do versions.&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The above trait is very similar to the Rails version.  The three methods do the following:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;upgrade - Migrate the database from the previous version to &quot;this&quot; version&lt;/li&gt;&lt;br /&gt;&lt;li&gt;downgrade - Migrate the database from &quot;this&quot; version to the previous version&lt;/li&gt;&lt;br /&gt;&lt;li&gt;version - &quot;this&quot; version for the migration.  i.e. upgrade should leave me at version X&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;Already I'm introducing the implicit argument keyword here.  We'll get to why this is useful later, but for now just pretend like we're passing in a MigrationContext object that can be used to perform database manipulations.  We can assume the MigrationContext will handle all of our database transactions in a reasonable fashion.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;For now, let's focus on defining tables in our DSL.  What we'd like to see is something like the following:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;class Migration1 extends Migration {&lt;br /&gt; import MigrationDSL._&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; def upgrade(implicit ctx : MigrationContext) {&lt;br /&gt;  &lt;br /&gt;   create_table('user) {&lt;br /&gt;     tbl =&gt;&lt;br /&gt;       tbl has_column 'user_id as classOf[Int] default 0 primaryKey()&lt;br /&gt;       tbl has_column 'user_name as classOf[String] not_null()&lt;br /&gt;   }   &lt;br /&gt;&lt;br /&gt; }&lt;br /&gt; ...&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;So  how do we get here?  We'll let's do a top-down approach.  First, there's the syntax: &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;create_table('user) { tbl =&gt; ... }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;This looks like (and is) a function call.  We have two options for where to place it.  We can place it in the Migration trait (which I'm reluctant to do) or we can place it into the MigrationDSL object (see the import above).  We're going to place it in MigrationDSL.  Here's our first cut at the create_table function: &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;object MigrationDSL {&lt;br /&gt;  def create_table[A](name : Symbol)(creatorScript : TableCreator =&gt; A) = {&lt;br /&gt;    //TODO - Implement&lt;br /&gt;  }&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Alright, so now after importing MigrationDSL._ we can write create_table('symbol) { tbl=&gt; } anywhere we want.&lt;br /&gt;&lt;br /&gt;There's two things I don't like about this.  One is that we're placing implementation into our MigrationDSL.  I'd rather keep the DSL abstract, so we can implement it however we feel like.  We should be using the MigrationContext trait/interface here.  The other complaint is that we can write create_table from anywhere as long as we import MigrationDSL._.  We want to only be able to use this in the context of a migration.  Let's try to have MigrationDSL forward its method call to a migration context like so:   &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;object MigrationDSL {&lt;br /&gt;  def create_table[A](name : Symbol)(creatorScript : TableCreator =&gt; A)(implicit ctx : MigrationContext)  = ctx.createTable(name.toString)(creatorScript)&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Once again I'm using the implicit argument keyword.  What's it doing here?  Well this time I'm using it so that when you call the create_table method, you either need to explicitly pass in a MigrationContext &lt;b&gt;or&lt;/b&gt; have one available for implicit usage.  If you remember when we defined the Migration trait, the upgrade/downgrade methods both take in an implicit MigrationContext.  This means that within an upgrade/downgrade method, there is a MigrationContext implicitly available (and therefore you don't have to specify it).  It's the last parameter of the last parameter-set just so the compiler can use it implicitly.  We're back to having our desired syntax, AND we're still delegating all calls through the MigrationContext.&lt;br /&gt;&lt;br /&gt;Now we need to define what the MigrationContext trait looks like (at least so that it has the createTable method.  It's going to look very much like the earlier create_table that was on our MigrationDSL object.  Here's the new MigrationContext: &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;trait MigrationContext {&lt;br /&gt;  def createTable[A](name : String)(creatorScript : TableCreator =&gt; A) : A&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Notice that the method is completely abstract.  We've now divorced our DSL in such a way that someone simple needs to implement a MigrationContext for our DSL.&lt;br /&gt;&lt;br /&gt;The next item we'd like to implement are the column definition lines: &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt; tbl has_column('user_id) as classOf[Int] default 0 primaryKey()&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;As we haven't defined the TableCreator type yet (which is what our creatorScripts are accepting), let's define it and add the &quot;has_column&quot; method:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt; trait TableCreator { &lt;br /&gt; def has_column(name : Symbol) : ColumnCreator&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Once again I'm keeping everything as pure-abstract Traits.  We'll leave implementation as an exercise to the reader.  As you can see the has_column method take in a symbol and returns a ColumnCreator.  We're going to have to put the rest of our column DSL into the ColumnCreator class.  First, let's tackle the &quot;as&quot; method.  All columns need to have a type associated.  This is something we'd like to require, however we'll leave that as an implementation detail for the time being.  &lt;i&gt;If anyone has a suggestion for how to require this method be called at compile time, please let me know!&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Let's look at the ColumnCreator trait: &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;trait ColumnCreator {&lt;br /&gt; def as[A](clazz : Class[A]) : ColumnCreator2[A]&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;This trait defines one method (as) and returns a completely different (typed) ColumnCreator2 type.  This is our way of guaranteeing that (a) users always define types for column and (b) we have a valid type before allowing the default function of our DSL to be called.  So after this call, we have a valid column that could be created in a database table.  However for all our configuration options, we'll have to do something with the ColumnCreator2[A] trait.  Here's what it looks like for me: &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;trait ColumnCreator2[A]&lt;br /&gt;{&lt;br /&gt; def default(value : A) : ColumnCreator2[A]&lt;br /&gt; def primaryKey() : ColumnCreator2[A]&lt;br /&gt; def not_null() : ColumnCreator2[A]&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Because ColumnCreator2 is typed, we can now enforce type-safety for the column's default value.  That means &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt; tbl has_column('MyCol) as classOf[Int] default &quot;&quot;&lt;/pre&gt;&lt;/div&gt; will fail to compile.&lt;br /&gt;The only downside to this DSL (which I'm trying to determine  a way around) is that primaryKey and not_null attributes of a column both require a () to compile within scala.  This is a very minor downside, but perhaps I'll determine a clever way around it in the future.&lt;br /&gt;&lt;br /&gt;The next bit I'd like to show is some syntax to add foreign keys to our tables.  Here's another potential migration usage example:&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;class Migration2 extends Migration {&lt;br /&gt; import MigrationDSL._&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; def upgrade(implicit ctx : MigrationContext) {&lt;br /&gt;  &lt;br /&gt;   create_table('roles) {&lt;br /&gt;     tbl =&gt;&lt;br /&gt;       tbl has_column 'user_id as classOf[Int]&lt;br /&gt;       tbl has_column 'role as classOf[String] not_null()&lt;br /&gt;       tbl has_foreign_key 'fk_user_id on 'user_id references 'user_id on 'user&lt;br /&gt;   }&lt;br /&gt;   ...   &lt;br /&gt; }&lt;br /&gt; ...&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Notice we've added the &quot;has_foreign_key&quot; syntax  here.  The above syntax should create a foreign key titled &quot;fk_user_id&quot; from column user_id on the roles table to the column user_id on the user table.&lt;br /&gt;Once again, this looks like (and is) a function call on the TableCreator trait.  Here's our new Trait definition: &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;trait TableCreator { &lt;br /&gt; def has_column(name : Symbol) : ColumnCreator&lt;br /&gt; def has_foreign_key(name : Symbol) : FkConstraintCreator1&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Now to define the FkConstraintCreator traits.  Because we need to ensure specific ordering of the DSL, we're basically defining a series of traits the expose the correct methods in the appropriate order.  Here they are:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;trait FkConstraintCreator1 {&lt;br /&gt; def on(name : Symbol) : FkConstraintCreator2&lt;br /&gt;}&lt;br /&gt;trait FkConstraintCreator2 {&lt;br /&gt; def references(columnName : Symbol) : FkConstraintCreator3&lt;br /&gt;}&lt;br /&gt;trait FkConstraintCreator3 {&lt;br /&gt; def on(tableName : Symbol) : FkConstraintCreatorLast&lt;br /&gt;}&lt;br /&gt;trait FkConstraintCreatorLast {&lt;br /&gt; def on_delete(action : Symbol)&lt;br /&gt; def on_update(action : Symbol)&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;With this series of FkConstraintCreators, we can now enforce a particular ordering of language in our DSL.  The nice part is that we can still define one FkConstraintCreator (or Builder) implementation that inherits from ALL the FKConstraintCreator traits.  This could help simplify our implementation while leaving the DSL staticly-type-safe.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;In conclusion it was amazingly easy to define a somewhat rich DSL in Scala.  Perhaps in the future I'll write an implementation for the MigrationContext and contribute this code to Lift and/or Scala proper.</content>
		<author>
			<name>J. Suereth</name>
			<email>noreply@blogger.com</email>
			<uri>http://suereth.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Rants, Raves and Ridicule</title>
			<subtitle type="html">My thoughts and/or rants on Software Development.</subtitle>
			<link rel="self" href="http://suereth.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1673113361032868171</id>
			<updated>2008-11-01T15:20:26+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Virtual Appliance - Not a Toaster on Second Life</title>
		<link href="http://suereth.blogspot.com/2008/10/virtual-appliance-not-toaster-on-second.html"/>
		<id>tag:blogger.com,1999:blog-1673113361032868171.post-7908416900251946666</id>
		<updated>2008-10-23T23:47:45+00:00</updated>
		<content type="html">This posting is going to outline what a virtual appliance is.  This touches on what I do at work enough to give you a hint of some of the neat new things coming down the line.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt; No really, It's not a toaster... or a coffee maker&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;So what is a virtual appliance?  A virtual appliance is a virtual machine that can be distributed (like any file) and deployed onto some hypervisor (a server that runs virtual machines).  Because a virtual appliance is an entire virtual machine, the appliance developer has control of the entire aspect of the machine, from operating system to window themes to startup procedures.  ***Not only could one use some custom operating system, one could perform more interesting OS integration without worrying about &quot;cross-platform compatability&quot;.  Imagine buying a server that could initally be running a VM with your DNS and Email, and then repurpose it to dedicated indexing/search web interface. &lt;br /&gt;&lt;br /&gt;A few other interesting things to note about virtual appliances involve web hosting and choice of operating systems.  It is now feasible for a web host to simply provide some hypervisor (virtual server) and give you a virtual machine on this server.  You can then customize the machine however you want (under the resource restrictions the hosting service provides).  The host can control how much CPU/RAM/Network they allocate to your machine and enforce it in the hypervisor.  You can control almost every other aspect of your machine.  I know a lot of web hosting services have already started adopting this model.&lt;br /&gt;&lt;br /&gt;Another intersting thing you do on a virtual appliance is install any kind of (or no) operating system.  Many Linux distributions are starting to offer &quot;virtualization optimized&quot; packages (e.g. Ubuntu's JeOS, rPath's JeOS and Red Hat's (not released) &lt;a href=&quot;http://suereth.blogspot.com/feeds/posts/default#two&quot;&gt;Appliance Operating System&lt;/a&gt; [AOS]).  [JeOS =&gt; Just Enough Operating System, a term coined (AFAIK) by VMWare).  These JeOS products could greatly improve performance of your virtual appliance.  I predict that in the future we'll see more custom distributions, kernels or entire operating system stacks.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;The Early Brew&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In the 90's MIT was doing research into something they called the &quot;&lt;a href=&quot;http://suereth.blogspot.com/feeds/posts/default#one&quot;&gt;Exokernel&lt;/a&gt;&quot;.   The idea behind an exokernel was one step beyond micro-kernels: The kernel should only multiplex resources on a machine.  The idea was neat, and they experimented with a webserver they called &quot;Cheetah&quot;.  Cheetah implemented its own memory management to reduce the os-abstraction-overhead of server static content.  Cheetah was able to gain an order-of-magnitude in performance by marking and passing memory loaded with file contents directly to the NIC without having to be copied to and from user-space.  The exo kernel failed in other areas, mainly in that it tried to multiplex host resources *separately* for all &quot;processes&quot;.  I remember watching the ExOS library (a POSIX-as-a-shared-library implementation) fly together, but the file system really started caused some trouble.   It was hard to share a disk across operating systems without imposing some kind of filesystem on them all.&lt;br /&gt;&lt;br /&gt;Virtualization is very similar to the ExOS idea.  It multiplexes physical resources across many virtual machines.  The big difference here is in the fundamental unit of execution: For ExOS it was still a Process, however for the Hypervisor it's a &quot;Machine&quot;.  This difference in fundamental unit is what has made virtualization so popular, however it doesn't mean we have to give up some of the things we've learned from the exokernel.  We can still implement an OS that is highly tuned for some specific purpose (almost like an embedded device).  However, instead of compiling for a particular architecture, we compile to the x86-virtualized-architecture.  We can back our order-of-magnitude performance gain for hosting static content.  The question remains, what is the cost of the extra-layer of abstraction that virtualization brings?  With no hard data, I can't answer this question.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;The Burnt Edges&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Because using virtual machines give so much new flexibility to how applications are developed, a whole new host of issues also creep in.  The biggest of these is how to generate these virtual appliances in the first place.  What I've seen most often in &quot;How To&quot; documents (Amazon EC2's for example) is that you should start with a base OS install and begin to customize your appliance until it suits you.  Being a virtual machine, you can then clone this machine to distribute to clients (or yourself).  This works great, but is tougher to automate, and upgrade.&lt;br /&gt;&lt;br /&gt;One thing that can help in this process is the &quot;snapshot&quot; feature provided by some vm vendors.  This means you can set up a virtual machine how you like it, but without most of your software installed.  Then when doing a distribution, you install your software, clone your machine, and revert the &quot;template&quot; back to a pre-install state. &lt;br /&gt;&lt;br /&gt;Although this gives you a way of creating nearly infinite numbers of virtual appliances, it still leaves something to be desired (automation).  I've noticed that as virtual appliances become more prevalent a few companies have begun offering tools to help manage this.  rPath &lt;a href=&quot;http://suereth.blogspot.com/feeds/posts/default#three&quot;&gt;rBuilder&lt;/a&gt; is one such product.  It uses a completely new packaging system (Conary) and its own JeOS Linux Distro.&lt;br /&gt;&lt;br /&gt;If you're more into completely free (well, pay for service), Ubuntu also recently posted some documentation for their open-source JeOS&quot;&lt;a href=&quot;http://suereth.blogspot.com/feeds/posts/default#four&quot;&gt;JeOSVMBuilder&lt;/a&gt;&quot;. &lt;br /&gt;&lt;br /&gt;Anyway, The virtualization market is pretty exciting times.  Migrating to virtualization can provide a *lot* of flexibility to your infrastructure.  Use completely open-source software, I've been able to set up a &quot;development server&quot; complete with source control, project website, issue tracking, etc. AND nightly backups are as simple as copying a file to a USB disk.  If you're interested in doing the same, I'd recommend looking into VirtualBox.  If I can find the proper place to host (and time to clean it up), I may host my Ubuntu JeOS development server  (Apache2 + Tomcat + Archiva + Hudson + Trac + SVN). &lt;br /&gt;&lt;br /&gt;As a side note, the more I've seen of GIT the more I like it.  Given some time (once again, hard to come by),  I'm thinking of making the dev server be flexible enough to create new projects with svn, Hg or git.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;References&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;a name=&quot;one&quot;&gt;&lt;/a&gt;[1] &lt;a href=&quot;http://pdos.csail.mit.edu/exo.html&quot;&gt;MIT Exokernel Operating System&lt;/a&gt;&lt;br /&gt;&lt;a name=&quot;two&quot;&gt;&lt;/a&gt;[2] &lt;a href=&quot;http://www.redhat.com/solutions/aos/&quot;&gt;Red Hat Appliance Operating System&lt;/a&gt;&lt;br /&gt;&lt;a name=&quot;three&quot;&gt;&lt;/a&gt;[3] &lt;a href=&quot;http://www.rpath.com/corp/products/rbuilder&quot;&gt;rBuilder&lt;/a&gt;&lt;br /&gt;&lt;a name=&quot;four&quot;&gt;&lt;/a&gt;[4] &lt;a href=&quot;https://help.ubuntu.com/community/JeOSVMBuilder&quot;&gt;JeOSVMBuilder&lt;/a&gt;</content>
		<author>
			<name>J. Suereth</name>
			<email>noreply@blogger.com</email>
			<uri>http://suereth.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Rants, Raves and Ridicule</title>
			<subtitle type="html">My thoughts and/or rants on Software Development.</subtitle>
			<link rel="self" href="http://suereth.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1673113361032868171</id>
			<updated>2008-11-01T15:20:26+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">An Example Syntax in Haskell, Erlang and Scala</title>
		<link href="http://blogtrader.net/page/dcaoyuan/entry/an_example_syntax_in_haskell"/>
		<id>http://blogtrader.net/page/dcaoyuan/entry/an_example_syntax_in_haskell</id>
		<updated>2008-10-23T16:51:58+00:00</updated>
		<content type="html">&lt;b&gt; &gt;&gt;&gt; Updated Oct 16:&lt;/b&gt;&lt;br /&gt;
I found some conventions of coding style make code more readable for Scala. For example, use &lt;pre&gt;{ x =&gt; something } instead of (x =&gt; dosomething)&lt;/pre&gt; &lt;p&gt;for anonymous function; Use x, y, z as the names of arguments of anonymous functions; Put all modifiers to the ahead line etc. That makes me can pick up these functions by eyes quickly.
&lt;b&gt;======&lt;/b&gt;
&lt;p&gt;
It's actually my first time to write true Scala code, sounds strange? Before I write Scala code, I wrote a Scala IDE first, and am a bit familiar with Scala syntax now. And I've got about 1.5 year experience on Erlang, it began after I wrote ErlyBird.
&lt;p&gt;
Now it's time to write some real world Scala code, I choose to port &lt;a href=&quot;http://mult.ifario.us/p/perpubplat-now-on-github&quot;&gt;Paul R. Brown's perpubplat blog engine&lt;/a&gt;, which is written in Haskell. And I have also some curiosities on how the syntax looks in Erlang, so I tried some Erlang code too.
&lt;p&gt;
Here's some code piece of entry module in Haskell, Erlang and Scala:
&lt;p&gt;
&lt;h3&gt;Original Haskell code piece&lt;/h3&gt;
&lt;pre class=&quot;code&quot;&gt;
empty :: Model
empty = Model M.empty M.empty M.empty [] 0

build_model :: [Item] -&gt; Model
build_model [] = empty
build_model items = Model (map_by permatitle sorted_items)
                    bid                    
                    (build_child_map sorted_items)
                    (sorted_items)
                    (n+1)
    where
      sorted_items = sort_by_created_reverse items
      bid = (map_by internal_id sorted_items)
      n = fst . M.findMax $ bid

build_child_map :: [Item] -&gt; M.Map Int [Int]
build_child_map i = build_child_map_ (M.fromList $ (map (\x -&gt; (internal_id x,[])) i)) i

-- Constructed to take advantage of the input being in sorted order.
build_child_map_ :: M.Map Int [Int] -&gt; [Item] -&gt; M.Map Int [Int]
build_child_map_ m [] = m
build_child_map_ m (i:is) = if (parent i == Nothing) then
                                build_child_map_ m is
                            else
                                build_child_map_ (M.insertWith (++) (unwrap $ parent i) [internal_id i] m) is

sort_by_created_reverse :: [Item] -&gt; [Item]
sort_by_created_reverse = sortBy created_sort_reverse

created_sort_reverse :: Item -&gt; Item -&gt; Ordering
created_sort_reverse a b = compare (created b) (created a)
&lt;/pre&gt;
&lt;p&gt;
&lt;h3&gt;In Erlang:&lt;/h3&gt;
&lt;pre class=&quot;sh_erlang&quot;&gt;
% @spec empty :: Model
empty() -&gt; #model{}.

% @spec build_model :: [Item] -&gt; Model
build_model([]) -&gt; empty();
build_model(Is) -&gt; 
    SortedIs = sort_by_created_reverse(Is),
    Bid = dict:from_list([{I#item.internal_id, I} || I - SortedIs]),
    N = lists:max(dict:fetch_keys(Bid)),
    
    #model{by_permatitle = dict:from_list([{X#item.permatitle, X} || X - SortedIs]),
           by_int_id = Bid,               
           child_map = build_child_map(SortedIs),
           all_items = SortedIs,
           next_id = N + 1}.


% @spec build_child_map :: [Item] -&gt; M.Map Int [Int]
build_child_map(Is) -&gt; build_child_map_(dict:from_list(lists:map(fun (X) -&gt; {X#item.internal_id, []} end), Is), Is).

%% Constructed to take advantage of the input being in sorted order.
% @spec build_child_map_ :: M.Map Int [Int] -&gt; [Item] -&gt; M.Map Int [Int]
build_child_map_(D, []) -&gt; D;
build_child_map_(D, [I|Is]) -&gt; 
    case I#item.parent of 
        undefined -&gt;                
            build_child_map_(D, Is);
        P_Id -&gt;
            build_child_map_(dict:append(unwrap(P_Id), I#item.internal_id, D), Is)
    end.

% @spec sort_by_created_reverse :: [Item] -&gt; [Item]
sort_by_created_reverse(Is) -&gt; lists:sort(fun created_sort_reverse/2, Is).

% @spec created_sort_reverse :: Item -&gt; Item -&gt; Ordering
created_sort_reverse(A, B) -&gt; compare(B#item.created, A#item.created).
&lt;/pre&gt;
&lt;p&gt;
&lt;h3&gt;In Scala&lt;/h3&gt;
&lt;pre class=&quot;sh_scala&quot;&gt;
object Entry {
    def empty = new Model()

    def build_model(is:List[Item]) = is match {
        case Nil =&gt; empty
        case _ =&gt;
            val sortedIs = sortByCreatedReverse(is)
            val bid = Map() ++ sortedIs.map{ x =&gt; (x.internalId -&gt; x) }
            val n = bid.keys.toList.sort{ (x, y) =&gt; x &gt; y }.head // max

            new Model(Map() ++ sortedIs.map{ x =&gt; (x.permatitle -&gt; x) },
                      bid,
                      buildChildMap(sortedIs),
                      sortedIs,
                      n + 1)
    }

    def buildChildMap(is:List[Item]) = buildChildMap_(Map() ++ is.map{ x =&gt; (x.internalId -&gt; Nil) }, is)

    private
    def buildChildMap_(map:Map[Int, List[Int]], is:List[Item]) = {
        map ++ (for (i - is if i.parent.isDefined; pid = i.parent.get; cids = map.getOrElse(pid, Nil)) 
                yield (pid -&gt; (cids + i.internalId)))
    }

    def sortByCreatedReverse(is:List[Item]) = is.sort{ (x, y) =&gt; x.created before y.created }
}
&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt; &gt;&gt;&gt; Updated Oct 16:&lt;/b&gt;
Per Martin's suggestion, the above code can be written more Scala style (the reasons are in the comments). Thanks, Martin.
&lt;pre class=&quot;sh_scala&quot;&gt;
object Entry {
   def empty = new Model()

   def build_model(is:List[Item]) = is match {
       case Nil =&gt; empty
       case _ =&gt;
           val sortedIs = sortByCreatedReverse(is)
           val bid = Map() ++ sortedIs.map{ x =&gt; (x.internalId -&gt; x) }
           // use predefined max in Iterable
           val n = Iterable.max(bid.keys.toList)   

           new Model(Map() ++ sortedIs.map{ x =&gt; (x.permatitle -&gt; x) },
                     bid,
                     buildChildMap(sortedIs),
                     sortedIs,
                     n + 1)
   }

   // you can use a wildcard anonymousfunction here
   def buildChildMap(is:List[Item]) = buildChildMap_(Map() ++ is.map(_.internalId -&gt; Nil), is)

   private
   def buildChildMap_(map:Map[Int, List[Int]], is:List[Item]) =
       map ++ {  // rewrite for so that definitions go into body -- it's more efficient.
           for (i - is if i.parent.isDefined) yield {
               val pid = i.parent.get
               val cids = map.getOrElse(pid, Nil)
               pid -&gt; (cids + i.internalId)
           }
       }
       
   // you can use a wildcard anonymous function here
   def sortByCreatedReverse(is:List[Item]) = is.sort{ _.created before _.created } 
}
&lt;/pre&gt;
&lt;b&gt;======&lt;/b&gt;
&lt;p&gt;
I use ErlyBird for Erlang coding, and Scala for NetBeans for Scala coding. The experience seems that IDE is much aware of Scala, and I can get the typing a bit faster than writing Erlang code.
&lt;p&gt;
If you are not familiar with all these 3 languages, which one looks more understandable?
&lt;p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content>
		<author>
			<name>dcaoyuan</name>
			<uri>http://blogtrader.net/page</uri>
		</author>
		<source>
			<title type="html">BlogTrader</title>
			<subtitle type="html">A space for traders</subtitle>
			<link rel="self" href="http://blogtrader.net/page/dcaoyuan/feed/entries/atom"/>
			<id>http://blogtrader.net/page</id>
			<updated>2008-11-01T21:00:17+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">RPC Server for Erlang, In Java</title>
		<link href="http://blogtrader.net/page/dcaoyuan/entry/rpc_server_for_erlang_in"/>
		<id>http://blogtrader.net/page/dcaoyuan/entry/rpc_server_for_erlang_in</id>
		<updated>2008-10-23T02:20:31+00:00</updated>
		<content type="html">We are using Erlang to do some serious things, one of them is indeed part of a banking system. Erlang is a perfect language in concurrent and syntax (yes, I like its syntax), but lacks static typing (I hope new added -spec and -type attributes may be a bit helping), and, is not suitable for processing massive data (performance, memory etc). I tried parsing a 10M size XML file with xmerl, the lib for XML in OTP/Erlang, which causes terrible memory disk-swap and I can never get the parsed tree out.
&lt;p&gt;
It's really a need to get some massive data processed in other languages, for example, C, Java etc. That's why I tried to write RPC server for Erlang, in Java. 
&lt;p&gt;
There is a jinterface lib with OTP/Erlang, which is for communication between Erlang and Java. And there are docs for how to get it to work. But, for a RPC server that is called from Erlang, there are still some tips for real world:
&lt;p&gt;
1. When you send back the result to caller, you need set the result as a tuple, with caller's &lt;b&gt;tag Ref&lt;/b&gt; as the first element, and the destination should be the caller's &lt;b&gt;Pid&lt;/b&gt;. It's something like: 
&lt;pre class=&quot;code&quot;&gt;
OtpErlangTuple msg = new OtpErlangTuple(new OtpErlangObject[] {call.tag, tResult});
sConnection.send(call.to, msg); 
&lt;/pre&gt;
&lt;p&gt;
where, call.tag is a OtpErlangRef, and tResult can be any OtpErlangObject, call.to is a OtpErlangPid.
&lt;p&gt;
2. If you need to send back a massive data back to caller, the default buffer size of OtpErlangOutputStream is not good, I set it to &lt;b&gt;1024 * 1024 * 10&lt;/b&gt;
&lt;p&gt;
3. Since there may be a lot of concurrent callers call your RPC server, you have to consider the concurrent performance of your server, I choose using thread pool here.
&lt;p&gt;
The RPC server in Java has two class, RpcNode.java, and RpcMsg.java:
&lt;p&gt;
&lt;pre class=&quot;sh_java&quot;&gt;
package net.lightpole.rpcnode;

import com.ericsson.otp.erlang.OtpErlangAtom;
import com.ericsson.otp.erlang.OtpErlangList;
import com.ericsson.otp.erlang.OtpErlangObject;
import com.ericsson.otp.erlang.OtpErlangPid;
import com.ericsson.otp.erlang.OtpErlangRef;
import com.ericsson.otp.erlang.OtpErlangTuple;

/**
 *
 * @author Caoyuan Deng
 */
public class RpcMsg {

    public OtpErlangAtom call;
    public OtpErlangAtom mod;
    public OtpErlangAtom fun;
    public OtpErlangList args;
    public OtpErlangPid user;
    public OtpErlangPid to;
    public OtpErlangRef tag;

    public RpcMsg(OtpErlangTuple from, OtpErlangTuple request) throws IllegalArgumentException {
        if (request.arity() != 5) {
            throw new IllegalArgumentException(&quot;Not a rpc call&quot;);
        }

        /* {call, Mod, Fun, Args, userPid} */
        if (request.elementAt(0) instanceof OtpErlangAtom &amp;amp;&amp;amp; ((OtpErlangAtom) request.elementAt(0)).atomValue().equals(&quot;call&quot;) &amp;amp;&amp;amp;
                request.elementAt(1) instanceof OtpErlangAtom &amp;amp;&amp;amp;
                request.elementAt(2) instanceof OtpErlangAtom &amp;amp;&amp;amp;
                request.elementAt(3) instanceof OtpErlangList &amp;amp;&amp;amp;
                request.elementAt(4) instanceof OtpErlangPid &amp;amp;&amp;amp;
                from.elementAt(0) instanceof OtpErlangPid &amp;amp;&amp;amp;
                from.elementAt(1) instanceof OtpErlangRef) {

            call = (OtpErlangAtom) request.elementAt(0);
            mod = (OtpErlangAtom) request.elementAt(1);
            fun = (OtpErlangAtom) request.elementAt(2);
            args = (OtpErlangList) request.elementAt(3);
            user = (OtpErlangPid) request.elementAt(4);
            to = (OtpErlangPid) from.elementAt(0);
            tag = (OtpErlangRef) from.elementAt(1);

        } else {
            throw new IllegalArgumentException(&quot;Not a rpc call.&quot;);
        }
    }

    /* {'$gen_call', {To, Tag}, {call, Mod, Fun, Args, User}} */
    public static RpcMsg tryToResolveRcpCall(OtpErlangObject msg) {
        if (msg instanceof OtpErlangTuple) {
            OtpErlangTuple tMsg = (OtpErlangTuple) msg;
            if (tMsg.arity() == 3) {
                OtpErlangObject[] o = tMsg.elements();
                if (o[0] instanceof OtpErlangAtom &amp;amp;&amp;amp; ((OtpErlangAtom) o[0]).atomValue().equals(&quot;$gen_call&quot;) &amp;amp;&amp;amp;
                        o[1] instanceof OtpErlangTuple &amp;amp;&amp;amp; ((OtpErlangTuple) o[1]).arity() == 2 &amp;amp;&amp;amp;
                        o[2] instanceof OtpErlangTuple &amp;amp;&amp;amp; ((OtpErlangTuple) o[2]).arity() == 5) {
                    OtpErlangTuple from = (OtpErlangTuple) o[1];
                    OtpErlangTuple request = (OtpErlangTuple) o[2];

                    try {
                        return new RpcMsg(from, request);
                    } catch (IllegalArgumentException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
        
        return null;
    }
}
&lt;/pre&gt;
&lt;p&gt;
&lt;pre class=&quot;sh_java&quot;&gt;
package net.lightpole.rpcnode;

import com.ericsson.otp.erlang.OtpAuthException;
import com.ericsson.otp.erlang.OtpConnection;
import com.ericsson.otp.erlang.OtpErlangAtom;
import com.ericsson.otp.erlang.OtpErlangExit;
import com.ericsson.otp.erlang.OtpErlangObject;
import com.ericsson.otp.erlang.OtpErlangString;
import com.ericsson.otp.erlang.OtpErlangTuple;
import com.ericsson.otp.erlang.OtpSelf;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * Usage:
 *   $ erl -sname clientnode -setcookie mycookie
 *   (clientnode@cmac)&gt; rpc:call(xnodename@cmac, 'System', currentTimeMillis, []).
 * 
 * @author Caoyuan Deng
 */
public abstract class RpcNode {

    public static final OtpErlangAtom OK = new OtpErlangAtom(&quot;ok&quot;);
    public static final OtpErlangAtom ERROR = new OtpErlangAtom(&quot;error&quot;);
    public static final OtpErlangAtom STOPED = new OtpErlangAtom(&quot;stoped&quot;);
    private static final int THREAD_POOL_SIZE = 100;
    private OtpSelf xSelf;
    private OtpConnection sConnection;
    private ExecutorService execService;

    public RpcNode(String xnodeName, String cookie) {
        this(xnodeName, cookie, THREAD_POOL_SIZE);
    }

    public RpcNode(String xnodeName, String cookie, int threadPoolSize) {
        execService = Executors.newFixedThreadPool(threadPoolSize);

        startServerConnection(xnodeName, cookie);
        loop();
    }

    private void startServerConnection(String xnodeName, String cookie) {
        try {
            xSelf = new OtpSelf(xnodeName, cookie);
            boolean registered = xSelf.publishPort();
            if (registered) {
                System.out.println(xSelf.node() + &quot; is ready.&quot;);
                /**
                 * Accept an incoming connection from a remote node. A call to this
                 * method will block until an incoming connection is at least
                 * attempted.
                 */
                sConnection = xSelf.accept();
            } else {
                System.out.println(&quot;There should be an epmd running, start an epmd by running 'erl'.&quot;);
            }
        } catch (IOException ex) {
            Logger.getLogger(RpcNode.class.getName()).log(Level.SEVERE, null, ex);
        } catch (OtpAuthException ex) {
            Logger.getLogger(RpcNode.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loop() {
        while (true) {
            try {
                final int[] flag = {0};

                final OtpErlangTuple msg = (OtpErlangTuple) sConnection.receive();

                Runnable task = new Runnable() {

                    public void run() {
                        RpcMsg call = RpcMsg.tryToResolveRcpCall(msg);

                        if (call != null) {
                            long t0 = System.currentTimeMillis();

                            flag[0] = processRpcCall(call);

                            System.out.println(&quot;Rpc time: &quot; + (System.currentTimeMillis() - t0) / 1000.0);
                        } else {
                            try {
                                sConnection.send(sConnection.peer().node(), new OtpErlangString(&quot;unknown request&quot;));
                            } catch (IOException ex) {
                                Logger.getLogger(RpcNode.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                };

                execService.execute(task);

                if (flag[0] == -1) {
                    System.out.println(&quot;Exited&quot;);
                    break;
                }

            } catch (OtpErlangExit ex) {
                Logger.getLogger(RpcNode.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(RpcNode.class.getName()).log(Level.SEVERE, null, ex);
            } catch (OtpAuthException ex) {
                Logger.getLogger(RpcNode.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    protected void sendRpcResult(RpcMsg call, OtpErlangAtom head, OtpErlangObject result) throws IOException {
        OtpErlangTuple tResult = new OtpErlangTuple(new OtpErlangObject[] {head, result});

        // Should specify call.tag here
        OtpErlangTuple msg = new OtpErlangTuple(new OtpErlangObject[]{call.tag, tResult});
        // Should specify call.to here
        sConnection.send(call.to, msg, 1024 * 1024 * 10); 
    }

    public abstract int processRpcCall(RpcMsg call);
    

    // ------ helper
    public static String getShortLocalHost() {
        return getLocalHost(false);
    }

    public static String getLongLocalHost() {
        return getLocalHost(true);
    }

    private static String getLocalHost(boolean longName) {
        String localHost;
        try {
            localHost = InetAddress.getLocalHost().getHostName();
            if (!longName) {
                /* Make sure it's a short name, i.e. strip of everything after first '.' */
                int dot = localHost.indexOf(&quot;.&quot;);
                if (dot != -1) {
                    localHost = localHost.substring(0, dot);
                }
            }
        } catch (UnknownHostException e) {
            localHost = &quot;localhost&quot;;
        }

        return localHost;
    }
}
&lt;/pre&gt;
&lt;p&gt;
As you can see, the RpcNode is an abstract class, by implement &lt;b&gt;int processRpcCall(RpcMsg call)&lt;/b&gt;, you can get your what ever wanted features. For example:
&lt;pre class=&quot;sh_java&quot;&gt;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.lightpole.xmlnode;

import basexnode.Main;
import com.ericsson.otp.erlang.OtpErlangAtom;
import com.ericsson.otp.erlang.OtpErlangList;
import com.ericsson.otp.erlang.OtpErlangObject;
import com.ericsson.otp.erlang.OtpErlangString;
import java.io.IOException;
import net.lightpole.rpcnode.RpcMsg;
import net.lightpole.rpcnode.RpcNode;

/**
 *
 * @author dcaoyuan
 */
public class MyNode extends RpcNode {

    public MyNode(String xnodeName, String cookie, int threadPoolSize) {
        super(xnodeName, cookie, threadPoolSize);
    }

    @Override
    public int processRpcCall(RpcMsg call) {
        final String modStr = call.mod.atomValue();
        final String funStr = call.fun.atomValue();
        final OtpErlangList args = call.args;

        try {
            OtpErlangAtom head = ERROR;
            OtpErlangObject result = null;

            if (modStr.equals(&quot;xnode&quot;) &amp;amp;&amp;amp; funStr.equals(&quot;stop&quot;)) {
                head = OK;
                sendRpcResult(call, head, STOPED);
                return -1;
            }

            if (modStr.equals(&quot;System&quot;) &amp;amp;&amp;amp; funStr.equals(&quot;currentTimeMillis&quot;)) {
                head = OK;
                long t = System.currentTimeMillis();
                result = new OtpErlangLong(t);
            } else {
                result = new OtpErlangString(&quot;{undef,{&quot; + modStr + &quot;,&quot; + funStr + &quot;}}&quot;);
            }

            if (result == null) {
                result = new OtpErlangAtom(&quot;undefined&quot;);
            }

            sendRpcResult(call, head, result);
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
        }

        return 0;
    }
}
&lt;/pre&gt;
&lt;p&gt;
I tested MyNode by:
&lt;pre class=&quot;code&quot;&gt;
$ erl -sname clientnode -setcookie mycookie
...
(clientnode@cmac)&gt; rpc:call(xnodename@cmac, 'System', currentTimeMillis, []).
&lt;/pre&gt;
&lt;p&gt;
And you can try to test its concurrent performance by:
&lt;pre class=&quot;code&quot;&gt;
%% $ erl -sname clientnode -setcookie mycookie
%% &gt; xnode_test:test(10000)

-module(xnode_test).

-export([test/1]).

test(ProcN) -&gt;
    Workers = [spawn_worker(self(), fun rpc_parse/1, {})        
     	       || I - lists:seq(0, ProcN - 1)],
    Results = [wait_result(Worker) || Worker - Workers].

rpc_parse({}) -&gt;
    rpc:call(xnodename@cmac, 'System', currentTimeMillis, []).

spawn_worker(Parent, F, A) -&gt;
    erlang:spawn_monitor(fun() -&gt; Parent ! {self(), F(A)} end).

wait_result({Pid, Ref}) -&gt;
    receive
        {'DOWN', Ref, _, _, normal} -&gt; receive {Pid, Result} -&gt; Result end;
        {'DOWN', Ref, _, _, Reason} -&gt; exit(Reason)
    end.
&lt;/pre&gt;
&lt;p&gt;
I spawned 10000 calls to it, and it run smoothly.
&lt;p&gt;
I'm also considering to write a more general-purpose RPC server in Java, which can dynamically call any existed methods of Java class.
&lt;p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content>
		<author>
			<name>dcaoyuan</name>
			<uri>http://blogtrader.net/page</uri>
		</author>
		<source>
			<title type="html">BlogTrader</title>
			<subtitle type="html">A space for traders</subtitle>
			<link rel="self" href="http://blogtrader.net/page/dcaoyuan/feed/entries/atom"/>
			<id>http://blogtrader.net/page</id>
			<updated>2008-11-01T21:00:17+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">FOR, WHILE Is Too Easy, Let's Go Looping</title>
		<link href="http://blogtrader.net/page/dcaoyuan/entry/for_while_is_too_easy"/>
		<id>http://blogtrader.net/page/dcaoyuan/entry/for_while_is_too_easy</id>
		<updated>2008-10-23T01:44:49+00:00</updated>
		<content type="html">&lt;p&gt;
With several 10k code in Erlang, I'm familiar with functional style coding, and I found I can almost rewrite any functions in Erlang to Scala, in syntax meaning. 
&lt;p&gt;
Now, I have some piece of code written in Java, which I need to translate them to Scala. Since &quot;for&quot;, &quot;while&quot;, or &quot;do&quot; statement is so easy in Java, I can find a lot of them in Java code. The problem is, should I keep them in the corresponding &quot;for&quot;, &quot;while&quot;, &quot;do&quot; in Scala, or, as what I do in Erlang, use recursive function call, or, &quot;loop&quot;?
&lt;p&gt;
I sure choose to loop, and since Scala supports recursive function call on functions defined in function body (Erlang doesn't), I choose define these functions' name as &quot;loop&quot;, and I tried to write code let &quot;loop&quot; looks like a replacement of &quot;for&quot;, &quot;while&quot; etc.
&lt;p&gt;
Here's a piece of code that is used to read number string and convert to double, only piece of them.
&lt;p&gt;
The Java code:
&lt;pre class=&quot;sh_java&quot;&gt;
public class ReadNum {

    private double readNumber(int fstChar, boolean isNeg) {
        StringBuilder out = new StringBuilder(22);
        out.append(fstChar);
        
        double v = '0' - fstChar;
        // the maxima length of number stirng won't exceed 22
        for (int i = 0; i  22; i++) {
            int c = getChar();
            switch (c) {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    v = v * 10 - (c - '0');
                    out.append(c);
                    continue;
                case '.':
                    out.append('.');
                    return readFrac(out, 22 - i);
                case 'e':
                case 'E':
                    out.append(c);
                    return readExp(out, 22 - i);
                default:
                    if (c != -1) backup(1);
                    if (!isNeg) return v; else return -v
            }
        }
        return 0;
    }
}
&lt;/pre&gt;
&lt;p&gt;
The Scala code:
&lt;pre class=&quot;sh_scala&quot;&gt;
class ReadNum {
   private
   def readNumber(fstChar:Char, isNeg:Boolean) :Double = {
      val out = new StringBuilder(22)
      out.append(fstChar)

      val v:Double = '0' - fstChar
      def loop(c:Char, v:Double, i:Int) :Double = c match {
         // the maxima length of number stirng won't exceed 22
         case _ if i &gt; 21 =&gt;
            0
         case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' =&gt;
            out.append(c)
            val v1 = v * 10 - (c - '0')
            loop(getChar, v1, i + 1)
         case '.' =&gt;
            out.append('.')
            readFrac(out, 22 - i)
         case 'e' | 'E' =&gt;
            out.append(c)
            readExp(out, 22 - i)
         case _ =&gt;
            if (c != -1) backup(1)
            if (isNeg) v else -v
      }; loop(getChar, v, 1)
   }
}
&lt;/pre&gt;
As you can see in line 25, the loop call is put at the position immediately after the &quot;loop&quot; definition, following &quot;}; &quot;, I don't put it to another new line, it makes me aware of the &quot;loop&quot; function is just used for this call.
&lt;p&gt;
And yes, I named all these embedded looping function as &quot;loop&quot;, every where.
&lt;p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content>
		<author>
			<name>dcaoyuan</name>
			<uri>http://blogtrader.net/page</uri>
		</author>
		<source>
			<title type="html">BlogTrader</title>
			<subtitle type="html">A space for traders</subtitle>
			<link rel="self" href="http://blogtrader.net/page/dcaoyuan/feed/entries/atom"/>
			<id>http://blogtrader.net/page</id>
			<updated>2008-11-01T21:00:17+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">JUnit Testing Scala in Eclipse</title>
		<link href="http://kevinoncode.blogspot.com/2008/10/junit-testing-scala-in-eclipse.html"/>
		<id>tag:blogger.com,1999:blog-1937539813134787961.post-1206204338982143921</id>
		<updated>2008-10-22T09:26:27+00:00</updated>
		<content type="html">Being a fairly new convert to agile development methods, including test driven development, I knew the first thing I would want to get up and running with Scala was a unit testing framework.  The NetBeans plugin has built-in JUnit support which served me very well.  But I also wanted to get some unit testing working with the Eclipse plugin.  It took me a while to get JUnit testing setup with Eclipse, mainly due to my lack of experience in the Java ecosystem.  To help future explorers down this path, here are a few lessons I learned.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Put the your tests in a separate source folder&lt;/span&gt;.  See this &lt;a href=&quot;http://open.ncsu.edu/se/tutorials/junit/&quot;&gt;tutorial on setting up JUnit in Eclipse&lt;/a&gt; for more information.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Add JUnit to your project's build path&lt;/span&gt;.  Select the project and choose &quot;Build Path&quot; -&gt; &quot;Add Libraries...&quot;.  Then choose the JUnit jar.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Add the output directory of your project to your build path&lt;/span&gt;.  See this &lt;a href=&quot;http://code.google.com/p/specs/wiki/RunningSpecs#Run_your_specification_with_JUnit4_in_Eclipse&quot;&gt;short guide from the makers of Spec&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;To get you started, here is a simple test:&lt;br /&gt;&lt;pre class=&quot;code&quot;&gt;package tests&lt;br /&gt;&lt;br /&gt;import junit.framework._&lt;br /&gt;import org.junit.Assert._&lt;br /&gt;&lt;br /&gt;class FirstTest extends TestCase {&lt;br /&gt; override def setUp() = {&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; override def tearDown() = {&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; def testOne() = {&lt;br /&gt;   assertEquals(1, 1)&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;</content>
		<author>
			<name>Kevin Albrecht</name>
			<email>noreply@blogger.com</email>
			<uri>http://kevinoncode.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Kevin on Code</title>
			<subtitle type="html">Object-oriented programmer by day.
Functional programmer by night.</subtitle>
			<link rel="self" href="http://kevinoncode.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1937539813134787961</id>
			<updated>2008-10-31T22:40:25+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Nano painters mean you no harm</title>
		<link href="http://technically.us/code/x/nano-painters-mean-you-no-harm"/>
		<id>http://technically.us/code/x/nano-painters-mean-you-no-harm</id>
		<updated>2008-10-22T05:30:00+00:00</updated>
		<content type="html">&lt;p&gt;Do you want to be painted by ninety-nine evil robots living in your Macintosh™ computer, that has a camera attached to it? If &lt;em&gt;YES&lt;/em&gt; then here is something large to click on:&lt;/p&gt;

&lt;p class=&quot;break&quot;&gt;&lt;a href=&quot;http://technically.us/pictures/Nano_Painters.zip&quot;&gt;&lt;img src=&quot;http://technically.us/resources/com.typeturner.Typeturner/image?name=number-5&quot; alt=&quot;Number 5 is ALIVE&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;break&quot;&gt;Sorry to all the dozens of fans of embedding applets in actual web pages, on the internet, but this time it was not possible to be so obnoxious. Only the paragon of private and secure browsing, Adobe Flash, is allowed to activate your camera from &amp;#8216;rich media&amp;#8217; and transmit images back to the mothership.&lt;/p&gt;

&lt;p&gt;But this is totally worth the D/L guys! Made with &lt;a href=&quot;http://processing.org/&quot;&gt;Processing&lt;/a&gt;, obviously, and shortly written in Scala:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import processing.video._

size(800, 600)
val video = new Capture(applet, width, height, 6)
smooth()
strokeWeight(8)

// current positions
var pos_list = List[Point]()
keyPressed()
override def keyPressed() {
  pos_list = List.tabulate(99, n =&amp;gt; Point(width/2, height/2))
  background(0xFFAAAAAA)
}

// circle of 20 points, radius of 10 with center at 0,0
val r = 10;
val circle = List.tabulate(20, PI*_/10).map( t =&amp;gt;
  Point((cos(t)*r).toInt, (sin(t)*r).toInt)
)

def draw() {
  video.read()
  // if this is a real live frame
  if (video.get(width/2, height/2) != -16777216) {
    pos_list = pos_list.map { pos =&amp;gt;
      val c = video.get(pos.x, pos.y)
      // randomly select next point from circle around current
      // with bias for similar colors and staying in bounds
      val next = play(circle.map { circle_p =&amp;gt;
        val p = pos + circle_p
        (bounds(p) * similarity(c, video.get(p.x, p.y))) %&amp;gt; p
      }: _*)
      stroke(c)
      line(pos.x, pos.y, next.x, next.y)
      next
    }
  }
}

def bounds(p: Point) = if (
  p.x &amp;gt; 0 &amp;amp;&amp;amp;
  p.x &amp;lt; width &amp;amp;&amp;amp;
  p.y &amp;gt; 0 &amp;amp;&amp;amp;
  p.y &amp;lt; height) 1 else 0

def similarity(a: Color, b: Color) =
  1 + 10 / max(1, ((a.r - b.r)*^2 + (a.g - b.g)*^2 + (a.b - b.b)*^2))

case class Point(x: Int, y: Int) {
  def + (o: Point) = Point(x + o.x, y + o.y)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you spot the sneaky robots&amp;#8217; implicit conversions that access a growing assortment of &lt;a href=&quot;http://technically.us/git?p=spde.git;a=blob;f=core-scala/src/main/scala/processing/core/scala/Enrich.scala;hb=HEAD&quot;&gt;handy operators&lt;/a&gt;?&lt;/p&gt;

&lt;p class=&quot;break&quot;&gt;&lt;em&gt;This application is packaged as an example in &lt;a href=&quot;http://technically.us/torrents/&quot;&gt;Spde&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content>
		<author>
			<name>Coderspiel</name>
			<uri>http://technically.us/code</uri>
		</author>
		<source>
			<title type="html">Coderspiel (all posts)</title>
			<subtitle type="html">Programming with creative license.</subtitle>
			<link rel="self" href="http://technically.us/resources/com.typeturner.Typeturner/code-rss?q=scala"/>
			<id>http://technically.us/resources/com.typeturner.Typeturner/code-rss?q=scala</id>
			<updated>2008-10-22T13:20:20+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Commando programming</title>
		<link href="http://etorreborre.blogspot.com/2008/10/commando-programming.html"/>
		<id>tag:blogger.com,1999:blog-5336273.post-8565375419195743614</id>
		<updated>2008-10-21T18:14:35+00:00</updated>
		<content type="html">&lt;blockquote&gt;When you program for a trader you don't have time to write tests&lt;br /&gt;&lt;/blockquote&gt;I've been wondering for some time if the quote above, or a variant like: &quot;you don't have time to refactor your code&quot;, was really true or not. I generally bug my colleagues when they don't write tests along with their code and I usually prophetize that they will actually &lt;span&gt;spare&lt;/span&gt; time by writing tests instead of losing time.&lt;br /&gt;&lt;br /&gt;Unfortunately I don't have strong evidence if this is &lt;a href=&quot;http://scruffylookingcatherder.com/archive/2008/01/22/tdd-proven-effective-or-is-it.aspx&quot;&gt;true or not&lt;/a&gt;. The only thing I can say is that almost every time I've tried to take shortcuts in my developments, I've been bitten by very silly bugs and regretted my recklessness!&lt;br /&gt;&lt;br /&gt;Anyway, what would you do if you had to code at the speed of light for a drug-addict trader (and they really need drugs those days,...)? What kind of practices would you adopt to go faster? How would you prepare yourself for those situations?&lt;br /&gt;&lt;br /&gt;With those questions in mind, I was happy to be recently involved in a one week project where the biggest  part of my job was to do some &quot;Commando programming&quot; to create the necessary tools to support the project.&lt;br /&gt;&lt;br /&gt;In this post, I'll do my own retrospective of that project and try to highlight the points which I think are decisive in the context of &quot;Commando programming&quot;. Actually most of the &quot;Ding!&quot; points  (does that ring a bell to you?)  below are applicable to any programming situation. The only difference is that there's no time for preparation in a &quot;Commando&quot; situation. You have to be seriously fit for the job.&lt;br /&gt;&lt;br /&gt; This post is too long, that's the Steve Yegge syndrom,... So here's a summary of the take-away points, so you can get a first impression if it's worth reading or not:&lt;br /&gt; &lt;span&gt;Ding!&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Know your destination&lt;/span&gt;&lt;br /&gt;  &lt;span&gt;Ding!&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Be a fast code-reader&lt;/span&gt;&lt;br /&gt; &lt;span&gt;Ding!&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Know at least one scripting language really well&lt;/span&gt;&lt;br /&gt; &lt;span&gt;Ding! &lt;/span&gt;&lt;span&gt;Know your platform ecosystem&lt;/span&gt;&lt;br /&gt; &lt;span&gt;Ding! Don't rewrite anything&lt;/span&gt;&lt;br /&gt;  &lt;span&gt;Ding! Take careful risks and prototype&lt;/span&gt;&lt;br /&gt; &lt;span&gt;Ding! Have at least one high-level functional test&lt;/span&gt;&lt;br /&gt;         &lt;span&gt;Ding! Test the difficult stuff&lt;/span&gt;&lt;br /&gt;        &lt;span&gt;&lt;span&gt;Ding! Isolate the file system&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Ding! Use the console&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Ding! Have lots of sample data&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Ding! Time is money, concepts are time&lt;/span&gt;&lt;br /&gt;    &lt;span&gt;Ding! PPP: Practice, Practice, Practice!!!&lt;/span&gt;&lt;br /&gt;   &lt;span&gt;Ding! Cool down and document/review your code&lt;/span&gt;&lt;br /&gt;  &lt;span&gt;Ding! Cool down and take a break&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;br /&gt;&lt;span&gt;The project&lt;/span&gt;: &lt;span&gt;go see your doctor, now!&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In my company we've setup a methodology and a set of tools to assess the performance of our customers deployments and one of them asked us to come over for one week to deploy this so-called &quot;HealthCheck&quot; process. After the first initial interviews, we determined that one very essential objective of the project was to reduce the time to save a trade from 1.2 seconds to less than 500 ms. Very clear and quantifiable objective, that's a good start!&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding!&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Know your destination&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;First point here, this may look totally obvious but still it needs to be said: the overall user objective must be very clear for everyone.&lt;br /&gt;&lt;br /&gt;This point is important for at least 4 reasons:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;It's hard to say that you're going fast if you don't know where you're going!&lt;br /&gt;&lt;/li&gt;&lt;li&gt;The fastest development in the world is the one you don't do because you don't need it&lt;/li&gt;&lt;li&gt;It helps a lot, as seen later, to have a clear overall objective when negotiating with yourself or with your customer the next micro-task to develop&lt;/li&gt;&lt;li&gt;Developing fast is not the alpha and omega of productivity. Seeing the project from its overall objective can make you realize that saving other people's time may actually more important than saving your own&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;&lt;span&gt;Reading the thermometer&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Assessing the performance of our systems involves parsing and analyzing lots of different log files: client requests, server requests, database requests, sql execution times, workflow times, garbage collection times,... The scripts we started working with were shell scripts doing the following:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Reading and managing log files, including archiving old versions&lt;/li&gt;&lt;li&gt;Parsing the files and extracting the time spent for a given &quot;quantity&quot; (client request, SQL call,...)&lt;/li&gt;&lt;li&gt;Computing small statistics: minimum / average / maximum time&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Creating graphs in order to be able to spot &quot;spikes&quot; that we will be able to label as &quot;Red flags&quot;&lt;/li&gt;&lt;/ul&gt;The scripts we had were doing the job, but were pretty slow considering the amount of data we had to process. More than one hour could be spent just running the scripts on a subset of the log files.&lt;br /&gt;&lt;br /&gt;Analyzing the scripts, I thought that I could implement something more effective,(...)&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding!&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Be a fast code-reader&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Commando programming may involve reading a lot of code that's not yours before being able to do anything else. This has been written before: we usually spend far more time reading code than writing it. Reading code faster will necessarily speed you up.&lt;br /&gt;&lt;br /&gt;(...) more effective so I started prototyping something using Ruby. Why Ruby? Because I knew I would be fast to implement my ideas with it. Or was I?&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding!&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Know at least one scripting language really well&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;No, I wasn't so fast,... I haven't programmed in Ruby for quite some time and I've forgotten many of the idioms or methods of the core api. My head is so full of Scala nowadays, that I would certainly have been faster using Scala for that task. The morality here is that knowing a &quot;scripting&quot; language is very helpful but you really need to have everything in your mental RAM in order to be effective.&lt;br /&gt;&lt;br /&gt;This goes for api knowledge as well as &quot;environmental&quot; knowledge: you should spend no time figuring out how to develop/build/test/deploy your code. Being stuck for 2 hours because you don't know how to set a class path for example is a huge waste of value.&lt;br /&gt;&lt;br /&gt;Anyway, I was able to show the effectiveness of using a language like Ruby to speed up the analysis time so I decided to officially port the scripts from shell to another language. But now which language should I select for my commando developments?&lt;br /&gt;&lt;br /&gt;Choosing a language is a vast question and the criteria governing that choice may not be entirely related to the intrinsic language features. This choice may also be governed by more &quot;contextual&quot; considerations, like the ability of other developers to learn the language and associated tools.&lt;br /&gt;&lt;br /&gt;In my case, Groovy was the winner for 4 reasons:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;It has all sort of features to help write code faster like closures, literals,...&lt;/li&gt;&lt;li&gt;It can access Java libraries and I was planning to integrate some Database analysis tools we had written in Java&lt;br /&gt;&lt;/li&gt;&lt;li&gt;That's one of the closest language to Java on the JVM so other developers will be able to pick up the new scripts faster. And it is usually better known than JRuby, Scala or Jython for example&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;&lt;span&gt;Ding! &lt;/span&gt;&lt;span&gt;Know your platform ecosystem&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;I also knew, when choosing Groovy, that I would be able to use all sorts of &lt;a href=&quot;http://groovy.codehaus.org/Cookbook+Examples&quot;&gt;niceties&lt;/a&gt;. One of them was the Ant integration which allowed me to easily reuse the &lt;a href=&quot;http://ant.apache.org/manual/CoreTasks/exec.html&quot;&gt;exec&lt;/a&gt; task (see below). Knowing my way around Ant was a good thing (I know that's not exceptional for a Java developer, it's just an example ;-) ).&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Rewrite everything?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;That was the most &quot;dangerous&quot; part of this project.&lt;br /&gt;&lt;br /&gt;I would honestly have preferred avoiding it. Since I had to replace one small part of the scripts with some new Groovy logic and also, since the scripts would need to be extended anyway, I decided to rewrite them all in Groovy.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding! Don't rewrite anything&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Haha, I just said I did it! Well, not that you can never rewrite code or some library part, but you have to be damn sure about what you're doing. So,...&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding! Take careful risks and prototype&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Doing &quot;Commando programming&quot; will undoubtedly require taking risks and trying out some solutions before going on. More than ever, it needs to be done with lots of care because the last thing you want, is to find yourself in the middle of the road at the end of the week, because you didn't have time to finish implementing your new &quot;Grand Vision&quot;, whatever it is.&lt;br /&gt;&lt;br /&gt;In my case I mitigated the risks a lot by &quot;wrapping&quot; the existing shell commands in my Groovy scripts. So I was essentially running the same thing but executed from Groovy! That was really worth it because in the process, I could also reduce a lot the existing amount of code thanks to the usual Groovy tricks.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Test or not to test&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Now we come to the meat of the discussion! TDD, BDD, unit tests, code-and-see, what should be done? I honestly don't have a definitive answer but here's what I did.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding! Have at least one high-level functional test&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;You need to have at least one high-level functional test guiding you in your developments. Something which you can come back to and say: &quot;this case still doesn't pass, I'm not finished yet&quot;. You may actually have implemented more code than just what was necessary to pass that test case but at least this primary use case should be ok.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding! Test the difficult stuff&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Complex logic is definitely something you want to isolate and test early. If you don't unit test it thoroughly, it will usually haunt you in the most painful way: hidden inside all the rest. Besides, this complex logic usually means &quot;value&quot; for your customer, more than anything else, so it's worth cherishing it.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;Ding! Isolate the file system&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;Actually, you should soon realize that any interaction with the file system is slowing you down.&lt;br /&gt;Being able to mock the file system, or to write to temporary files with automatic clean up is a huge time-saver for unit testing. In a &quot;Commando&quot; situation you would be prepared with this and have all sorts of functions and ready to use design to help with this. In my case, I had to write all lot of it,...&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;Ding! Use the console&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/REPL&quot;&gt;Read-Eval-Print loop&lt;/a&gt;. In my developments I found very useful to test interactively my regular expressions inside the &lt;a href=&quot;http://groovy.codehaus.org/Groovy+Console&quot;&gt;Groovy console&lt;/a&gt;. Whether or not I turned those expressions to actual unit tests,... I didn't do it all the time I must say. One reason is that, once I had confidence that this regular expression was encapsulated in a higher-level concept, like &quot;extractClassName&quot;, it would be right forever.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span&gt;Ding! Have lots of sample data&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;If possible try to gather as much sample data as you can and run it through your program. Does it blow-up right away? Well, that's actually good, it may be the sign that you forgot a requirement. Instead of spending time trying to refine your requirements until they're exhaustive, or try to think about all possible cases, run the system with the maximum data available. There are 2 drawbacks to this: one is the time spent re-executing large datasets and analyzing failures, the other is not knowing what to look at! Your program may not break with enough smoke to prove you wrong.&lt;br /&gt;&lt;br /&gt;On my project I had lots of log files I could run my scripts against. And fortunately my scripts broke in very unambiguous ways, showing where I was wrong.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;To design or not to design&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;So you're programming like hell, you don't have time to draw all those nifty UML diagrams or devise the best design patterns for the job. &quot;We'll design when we'll have time.&quot;&lt;br /&gt;&lt;br /&gt;But is it really buying you time? I don't think so. I'm not saying that you should write diagrams or add tons of interface and clever indirections.&lt;br /&gt;&lt;br /&gt;But you need design in the sense that the problem and solution domains should be very, very clear to you.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding! Time is money, concepts are time&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;So it's worth taking a bit of time and think: &quot;What's really this system like?&quot;. Clarifying the concepts is very, very important. For us, it was first of all giving proper names to our analysis concepts:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;An entity can have measurable properties (&quot;A trade server has requests&quot;)&lt;/li&gt;&lt;li&gt;For each property, you can define several quantities (&quot;each request can take some average time&quot;)&lt;/li&gt;&lt;li&gt;For a given &quot;Test environment&quot;, we can run several &quot;Test campaigns&quot;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;This helped a lot in our discussions, in structuring the scripts and planning our actions.&lt;br /&gt;&lt;br /&gt;The next step was to realize that the type of queries we wanted to execute to analyze logging data looked pretty much like SQL queries: &quot;between 15:00 and 15:03. return all update queries with a time &gt; 300ms and group them by workflow rules&quot;. This gave us a good hint that the next step for our scripts would be to put everything in a database!&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Coding&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Consider this:&lt;br /&gt;&lt;br /&gt;&quot;I know where I'm going, I have a clear mind about my system and it's concepts, I know how to write minimal and effective tests, is there anything more I could do now to speed up my coding?&quot;&lt;br /&gt;&lt;br /&gt;Let's reformulate the sentence above:&lt;br /&gt;&lt;br /&gt;&quot;I know I want a gold medal at the Olympics, I know I'll get it by being a table tennis champion and I know the rules of the game, I have a very good racket,  is there anything more I could do now to be the best at table tennis?&quot;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding! PPP: Practice, Practice, Practice!!!&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;That's so obvious I'm ashamed to have to write it,... but that makes a real difference for &quot;Commando programming&quot;:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;technique: practice your regular-expression-fu for example, or know how to &lt;a href=&quot;http://etorreborre.blogspot.com/2008/07/my-first-icfp-contest-part-2-parser.html&quot;&gt;write a parser for a simple language&lt;/a&gt; (I planned to do that for the verbose gc logs but we didn't have time nor interest to rewrite this part)&lt;br /&gt;&lt;/li&gt;&lt;li&gt;libraries: no time should be spent looking at the API docs&lt;/li&gt;&lt;li&gt;tools: if you need remote debugging, it should be fast to setup, because you did it thousands of times before&lt;br /&gt;&lt;/li&gt;&lt;li&gt;computer science: you should have at least a good sense of the complexity of your algorithms&lt;/li&gt;&lt;li&gt;integration: how to call Excel from Groovy to create graphics was one of our coding issues&lt;/li&gt;&lt;li&gt;system / network tools: that wasn't too necessary on our project, but I can imagine this making a real difference in other settings&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;Cooling down for a minute&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Two things of equal importance I've also noticed during that week. First of all, when I tried to go fast I couldn't help but noticing entropy. Yes my code was doing the job, but at the same time it wasn't always consistent, documented, properly named or refactored.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding! Cool down and document/review your code&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This really can look like a pure loss of time. But I really observed that it wasn't. For 2 reasons:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Actually it doesn't take that long to review/document/refactor the code (try it at home)! Except maybe for the naming part, it's a bit like playing sudoku, you just try to make things fall into place&lt;/li&gt;&lt;li&gt;I observed that I was much less dragged down implementing new feature on clear-cut code with obvious intentions, I had much less mental noise. You know, like: &quot;This &lt;span&gt;computeTotal&lt;span&gt; &lt;/span&gt;&lt;/span&gt;function is actually also sorting the results, so I know I don't have to do it there&quot;. If computing and sorting are better separated or named, that can reduce the &quot;mental tax&quot; while reasoning about something else.&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;The second thing is the equivalent of &quot;cooling down the code&quot;,... applied to your body!&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Ding! Cool down and take a break&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;We're not machines. I was so enthusiastic with that project that I almost coded day and night (and I was away from my family,...). But I also observed one very interesting phenomenon: time was slowing down! Sometimes I was just starring at my screen without realizing that 5 minutes had passed without doing nothing substantial. That should be a clear signal for taking a break. This gives me an interesting idea: &quot;stopwatch&quot; programming. Prepare the list of tasks you want to program and program features by 5, 7  or 10 minutes cycles. And watch out when you have almost empty cycles.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;The doctor says: fit for service&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Conclusion for the project: it was very successful (this doesn't happen all the time so I'm glad to report it). We were able to analyze and spot 3 major bottlenecks and give good recommendations so that our maximum saving time was eventually around 400 ms. The tools served us, but actually ours brains served us more.&lt;br /&gt;&lt;br /&gt;But what's the biggest room in the world? The room for improvement ;-) ! I think we'll be able to transfer more of that wisdom to smarter analysis scripts in the future.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Back to the original question&lt;br /&gt;&lt;/span&gt;&lt;blockquote&gt;When you program for a trader you don't have time to write tests&lt;/blockquote&gt;True? False? At the light of my experience of this project, the first thing I'm really convinced of is the first part of the sentence: &lt;span&gt;&quot;You don't have time&quot;&lt;/span&gt;!&lt;br /&gt;&lt;br /&gt;And if you don't have time, you can essentially do 2 things:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;u&gt;Observe and experiment&lt;/u&gt;: whatever makes you spare time is good. In my case, writing tests is a proven way to go faster for example&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;u&gt;Practice, learn, invest&lt;/u&gt;:  new tools, new languages, new libraries, &lt;a href=&quot;http://etorreborre.blogspot.com/2008/07/my-first-icfp-contest-part-2-parser.html&quot;&gt;contests&lt;/a&gt;, &lt;a href=&quot;http://codingdojo.org/&quot;&gt;coding dojos&lt;/a&gt;,...&lt;/li&gt;&lt;/ul&gt;Ok. Thanks for listening, I leave you there, I have to go,... and practice my &quot;Commando-fu&quot;!</content>
		<author>
			<name>Eric</name>
			<email>noreply@blogger.com</email>
			<uri>http://etorreborre.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">A++ [Eric Torreborre's Blog]</title>
			<subtitle type="html">Lots of assertions, some pass, some fail</subtitle>
			<link rel="self" href="http://etorreborre.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-5336273</id>
			<updated>2008-11-01T06:00:24+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">How Scala's type system works for your Domain Model</title>
		<link href="http://debasishg.blogspot.com/2008/10/how-scalas-type-system-works-for-your.html"/>
		<id>tag:blogger.com,1999:blog-22587889.post-7246453328102803003</id>
		<updated>2008-10-20T13:01:03+00:00</updated>
		<content type="html">When you have your type system working for you and model many of the domain constraints without a single line of runtime checking code, you can save much on the &lt;a href=&quot;http://beust.com/weblog/archives/000462.html&quot;&gt;continuous tax&lt;/a&gt; payable down the line. I have been working on a domain model in Scala, and enjoying the expressiveness that the type system brings in to the implementation. There is so much that you can do with minimal ceremony, just using the powers of &lt;a href=&quot;http://www.scala-lang.org/node/105&quot;&gt;abstract types&lt;/a&gt;, abstract vals and &lt;a href=&quot;http://www.scala-lang.org/node/124&quot;&gt;self type annotations&lt;/a&gt;. In this post, I will share some of my experiences in implementing explicit domain constraints and invariants using Scala's type system and review some of the benefits that we can derive out of it, with respect to code readability, maintenability and succinct expression of the essence of the model.&lt;br /&gt;&lt;br /&gt;I am talking about modeling security trades from a brokerage solution stack .. (horribly simplified) ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradeComponent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ReferenceDataComponent&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;A&amp;nbsp;trade&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;have&amp;nbsp;a&amp;nbsp;Trading&amp;nbsp;Account&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Trade&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;T&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Trading&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;account&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;T&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;valueOf&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;An&amp;nbsp;equity&amp;nbsp;trade&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;have&amp;nbsp;a&amp;nbsp;Stock&amp;nbsp;as&amp;nbsp;the&amp;nbsp;instrument&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EquityTrade&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Trade&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;S&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Stock&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equity&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;S&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;valueOf&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&amp;nbsp;calculate&amp;nbsp;value&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;A&amp;nbsp;fixed&amp;nbsp;income&amp;nbsp;trade&amp;nbsp;needs&amp;nbsp;to&amp;nbsp;have&amp;nbsp;a&amp;nbsp;FixedIncome&amp;nbsp;type&amp;nbsp;of&amp;nbsp;instrument&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FixedIncomeTrade&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Trade&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;FI&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FixedIncome&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;fi&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;FI&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;valueOf&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&amp;nbsp;calculate&amp;nbsp;value&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;All of the above traits can be mixed in with actual service components and provide explicit abstraction over the constrained types that they declare as members. Note we have not yet committed to any concrete type in any of the above abstractions so far, but provided declarative constraints, just enough to model their domain invariants, e.g. a fixed income trade can only be instantiated with an instrument whose type is bounded on the upper side by &lt;code&gt;FixedIncome&lt;/code&gt;. Once declared, the compiler will ensure this forever ..&lt;br /&gt;&lt;br /&gt;Now we define a helper component that is only applicable for &lt;code&gt;FixedIncome&lt;/code&gt; trades .. Note the appropriate bound on the type, explicitly declared to enforce the business rule ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradeComponent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&amp;nbsp;as&amp;nbsp;above&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Accrued&amp;nbsp;Interest&amp;nbsp;is&amp;nbsp;computed&amp;nbsp;only&amp;nbsp;for&amp;nbsp;fixed&amp;nbsp;income&amp;nbsp;trades&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AccruedInterestCalculatorComponent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;T&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FixedIncomeTrade&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;acc&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AccruedInterestCalculator&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AccruedInterestCalculator&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;calculate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;trade&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;T&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Implementation&amp;nbsp;of&amp;nbsp;AccruedInterestCalculatorComponent.&amp;nbsp;Does&amp;nbsp;not&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;yet&amp;nbsp;commit&amp;nbsp;on&amp;nbsp;the&amp;nbsp;actual&amp;nbsp;type&amp;nbsp;of&amp;nbsp;the&amp;nbsp;instrument.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AccruedInterestCalculatorComponentImpl&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AccruedInterestCalculatorComponent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AccruedInterestCalculatorImpl&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AccruedInterestCalculator&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;override&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;calculate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;trade&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;T&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&amp;nbsp;logic&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Let us now define a generic service component that provides trading service for all types of trades and instruments. Ignore the details of what the service offers, details have been elided to focus on how we can build expressive domain models using the abstraction capabilities offered by Scala's type system. The generic service still does not commit to any implementation. It uses the services of another component &lt;code&gt;TaxRuleComponent&lt;/code&gt; using self type annotations.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradeComponent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&amp;nbsp;as&amp;nbsp;above&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Generic&amp;nbsp;trading&amp;nbsp;service&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradingServiceComponent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;T&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Trade&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;trd&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradingService&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradingService&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;valueTrade&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;T&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;Implementation&amp;nbsp;of&amp;nbsp;generic&amp;nbsp;trading&amp;nbsp;service&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradingServiceComponentImpl&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradingServiceComponent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TaxRuleComponent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradingServiceImpl&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradingService&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;override&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;valueTrade&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;T&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;l&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;tax&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;getTaxRules&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&amp;nbsp;logic&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;valueOf&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;When you define your type contraints correctly, Scala provides great support for wiring your components together through explicit type and value definitions in the final assembly. The following component assembly uses the Cake pattern that Jonas Boner &lt;a href=&quot;http://jonasboner.com/2008/10/06/real-world-scala-dependency-injection-di/&quot;&gt;recommended&lt;/a&gt; for implementing dependency injection. We are going to implement a concrete component assembly for fixed income trades. We need to define the concrete type once in the object and all type dependencies will be resolved through the Scala compiler magic. And we need to provide concrete implementations for all of the abstract &lt;code&gt;val&lt;/code&gt;s that we have declared above in defining the generic components ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradeComponent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&amp;nbsp;as&amp;nbsp;above&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;The&amp;nbsp;actual&amp;nbsp;component&amp;nbsp;that&amp;nbsp;will&amp;nbsp;be&amp;nbsp;published&amp;nbsp;and&amp;nbsp;commits&amp;nbsp;on&amp;nbsp;the&amp;nbsp;concrete&amp;nbsp;types&amp;nbsp;and&amp;nbsp;vals&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FixedIncomeTradeComponentRegistry&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradingServiceComponentImpl&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;with&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AccruedInterestCalculatorComponentImpl&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;with&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TaxRuleComponentImpl&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;T&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FixedIncomeTrade&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;tax&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TaxRuleServiceImpl&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;trd&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TradingServiceImpl&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;acc&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AccruedInterestCalculatorImpl&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//..&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Now that's a lot of domain constraints implemented only through the power of the type system. And these business rules are explicit within the code base and not buried within spaghetti of procedural routines, making your code maintenable and readable. Imagine how many lines of runtime checks we would have to write to implement the same in a dynamically typed language. And, btw, when you express your constraints through the type system, you don't need to write a single line of unit test for their verification - the compiler does that for you. Next time when you wonder how concise or terse your favorite dynamically typed language is, don't forget to figure that count in.</content>
		<author>
			<name>Debasish</name>
			<email>noreply@blogger.com</email>
			<uri>http://debasishg.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Ruminations of a Programmer</title>
			<subtitle type="html">A programmer's blog - will deal with everything that relates to a programmer. Occasionally, it will contain some humour, some politics and some sport news.</subtitle>
			<link rel="self" href="http://debasishg.blogspot.com/feeds/posts/default?alt=rss"/>
			<id>tag:blogger.com,1999:blog-22587889</id>
			<updated>2008-11-01T19:20:16+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Is Scala Not “Functional Enough”?</title>
		<link href="http://www.codecommit.com/blog/scala/is-scala-not-functional-enough"/>
		<id>http://www.codecommit.com/blog/scala/is-scala-not-functional-enough</id>
		<updated>2008-10-20T07:00:00+00:00</updated>
		<content type="html">&lt;p&gt;In one of Rich Hickey&amp;#8217;s &lt;a href=&quot;http://clojure.blip.tv/&quot;&gt;excellent presentations introducing Clojure&lt;/a&gt;, he mentions in passing that Scala &amp;#8220;isn&amp;#8217;t really a functional language&amp;#8221;.&amp;#160; He says that Java and Scala are both cut from the same mold, and because Scala doesn&amp;#8217;t &lt;em&gt;force&lt;/em&gt; immutability it really shouldn&amp;#8217;t qualify.&amp;#160; These viewpoint is something I&amp;#8217;ve been hearing a lot of from various sources, people talking about how F# is really the only mainstream functional language, or how once Erlang takes off it will leave Scala in the dust.&lt;/p&gt;
&lt;p&gt;When I first heard this sentiment voiced by Rich, I brushed it off as a little odd and only slightly self-serving (after all, if you don&amp;#8217;t use Scala, there&amp;#8217;s a better chance you will use Clojure).&amp;#160; Rich has his own opinions about a lot of things, but I have found with most that I can still understand his rationale, even if I don&amp;#8217;t agree.&amp;#160; So, realizing that many of his other kooky ideas seemed to have some basis in reality, I decided to come back to his opinion on Scala and give it some deeper consideration.&lt;/p&gt;
&lt;p&gt;The core of the argument made by Rich (and others) against Scala as a functional language goes something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mutable variables as first-class citizens of the language &lt;/li&gt;
&lt;li&gt;Uncontrolled side-effects (ties in with the first point) &lt;/li&gt;
&lt;li&gt;Mutable collections and other imperative libraries exist on equal footing &lt;/li&gt;
&lt;li&gt;Object-oriented structures (class inheritance, overloading, etc) &lt;/li&gt;
&lt;li&gt;Verbosity &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Comparative Type Inference&lt;/h3&gt;
&lt;p&gt;If you&amp;#8217;re coming from Java-land, the final point may have caught you a bit by surprise.&amp;#160; After all, Scala is &lt;em&gt;vastly&lt;/em&gt; more concise than Java, so how could anyone possibly claim that it is &amp;#8220;too verbose&amp;#8221;?&amp;#160; Well, to answer that question, you have to compare Scala with the other side of the language jungle: the functional languages.&amp;#160; Here&amp;#8217;s an explicitly-recursive function which sums a list of integers:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ls: List&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;: &lt;span&gt;Int&lt;/span&gt; = ls &lt;span&gt;match&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;case&lt;/span&gt; hd :: tail =&amp;gt; hd + &lt;span&gt;sum&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;tail&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;Nil&lt;/span&gt; =&amp;gt; &lt;span&gt;0&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;That&amp;#8217;s not too bad.&amp;#160; The use of pattern matching eliminates an entire class of runtime errors (selecting a non-existent element) and makes the code a lot cleaner than the equivalent Java.&amp;#160; However, compare this with the same function ported directly to SML (a functional language:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;ml&quot;&gt;&lt;span&gt;fun&lt;/span&gt; sum &lt;span&gt;nil&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;
  | sum &lt;span&gt;&amp;#40;&lt;/span&gt;hd :: tail&lt;span&gt;&amp;#41;&lt;/span&gt; = hd + sum tail&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;One thing you&amp;#8217;ll notice here is the complete lack of any type annotations.&amp;#160; Like most static functional languages, ML (and derivatives) has a form of type inference called &amp;#8220;&lt;a href=&quot;http://en.wikipedia.org/wiki/Type_inference#Hindley.E2.80.93Milner_type_inference_algorithm&quot;&gt;Hindley - Milner&lt;/a&gt;&amp;#8221; (sometimes called &amp;#8220;global type inference&amp;#8221;).&amp;#160; Rather than just looking at a single expression to infer a type (like Scala), Hindley - Milner looks at the &lt;em&gt;entire&lt;/em&gt; function and derives the most general (least restrictive) type which satisfies all expressions.&amp;#160; This means that everything can be statically type-checked with almost no need to declare types explicitly.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Now, wait!&amp;#8221; (you say), &amp;#8220;You would never write a function just to sum a list; you should be using a fold.&amp;#8221;&amp;#160; That&amp;#8217;s true.&amp;#160; So let&amp;#8217;s see how well these two languages do when the problem is solved in a more realistic fashion.&amp;#160; Once again, Scala first:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ls: List&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = ls.&lt;span&gt;foldLeft&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; _ + _ &lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#8217;s see ML top that!&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;ml&quot;&gt;&lt;span&gt;fun&lt;/span&gt; sum ls = foldl &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;op&lt;/span&gt;+&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; ls&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Then again, maybe we&amp;#8217;ll just quite while we&amp;#8217;re behind&amp;#8230;&lt;/p&gt;
&lt;p&gt;The fact is that Scala requires significantly more ceremony to accomplish some things which are &lt;em&gt;trivial&lt;/em&gt; in pure-functional languages like ML and Haskell.&amp;#160; So while Scala may be a huge step up from Java and C++, it&amp;#8217;s still a far cry from being the quickest and most readable way of expressing things in a functional style.&lt;/p&gt;
&lt;p&gt;One obvious solution to this would be to just add Hindley - Milner type inference to Scala.&amp;#160; Well, this may be the &amp;#8220;obvious&amp;#8221; solution, but it doesn&amp;#8217;t work.&amp;#160; Scala has an extremely powerful and complex type system, one with a number of properties which Hindley - Milner just can&amp;#8217;t handle.&amp;#160; A full object-oriented inheritance hierarchy causes some serious problems with the &amp;#8220;most general&amp;#8221; inference of Hindley - Milner: just about everything becomes type &lt;code&gt;Any&lt;/code&gt; (or close to it).&amp;#160; Also, method overloading can lead to ambiguities in the inferred types.&amp;#160; This is actually a problem even in the venerable Haskell, which imposes hard limitations on what functions can be in scope at any given point in time (so as to avoid two functions with the same name).&lt;/p&gt;
&lt;p&gt;Simply put, Scala&amp;#8217;s design forbids any type inference (that I know of) more sophisticated than local expression-level.&amp;#160; Don&amp;#8217;t get me wrong, it&amp;#8217;s still better than nothing, but a language with local type inference alone will never be as generally concise as a language with Hindley - Milner.&lt;/p&gt;
&lt;h3&gt;Side Effects&lt;/h3&gt;
&lt;p&gt;One big ticket item in the litany of complaints against Scala is the admission of uncontrolled side effects.&amp;#160; It&amp;#8217;s not hard to find an example which demonstrates this property:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;val&lt;/span&gt; name = readLine
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; + name&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This example alone shows how fundamental side-effects are within the Scala language.&amp;#160; All we have done here is made two function calls, one of them passing a &lt;code&gt;String&lt;/code&gt; and receiving &lt;em&gt;nothing&lt;/em&gt; as a result.&amp;#160; From a mathematical standpoint, this code snippet is virtually a no-op.&amp;#160; However, we all know that the &lt;code&gt;println&lt;/code&gt; function has an additional side effect which involves sending text to standard out.&amp;#160; Coming from Java, this makes perfect sense and it&amp;#8217;s probably hard to see why this would be considered a problem.&amp;#160; However, coming from Haskell, what we just wrote was a complete abomination.&lt;/p&gt;
&lt;p&gt;You see, Haskell says that no function should &lt;em&gt;ever &lt;/em&gt;have side effects unless they are explicitly declared using a special type constructor.&amp;#160; In fact, this is one of the areas where monads have had a huge impact on Haskell&amp;#8217;s design.&amp;#160; Consider the following Haskell equivalent:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;haskell&quot;&gt;main :: &lt;span&gt;IO&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
main = &lt;span&gt;do&lt;/span&gt;
         name &amp;lt;- getLine
         putStrLn &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; ++ name&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Even if you don&amp;#8217;t know Haskell, the above should be pretty readable.&amp;#160; The first line is the type declaration for the &lt;code&gt;main&lt;/code&gt; &amp;#8220;function&amp;#8221; (it&amp;#8217;s actually a value, but why quibble).&amp;#160; Haskell does have Hindley - Milner type inference, but I wanted to be extra-explicit.&amp;#160; You&amp;#8217;ll notice that &lt;code&gt;main&lt;/code&gt; is not of type &lt;code&gt;void&lt;/code&gt; or &lt;code&gt;Unit&lt;/code&gt; or anything similar, it is actually of type &lt;code&gt;IO&lt;/code&gt; &lt;em&gt;parameterized&lt;/em&gt; with Haskell&amp;#8217;s form of &lt;code&gt;Unit&lt;/code&gt;: &lt;code&gt;()&lt;/code&gt;.&amp;#160; This is an extremely important point: &lt;code&gt;IO&lt;/code&gt; is a monad which represents an action with side-effects returning a value which matches its type parameter (in this case, &lt;code&gt;()&lt;/code&gt;).&amp;#160; The little dance we perform using &lt;code&gt;do&lt;/code&gt;-notation is just a bit of syntax sugar allowing us to compose two other &lt;code&gt;IO&lt;/code&gt; values together in a specific order.&amp;#160; The &lt;code&gt;getLine&lt;/code&gt; &amp;#8220;function&amp;#8221; is of type &lt;code&gt;IO String&lt;/code&gt;, meaning that it somehow reads a &lt;code&gt;String&lt;/code&gt; value by using side effects (in this case, reading from standard in).&amp;#160; Similarly, &lt;code&gt;putStrLn&lt;/code&gt; is a function of type &lt;code&gt;String -&amp;gt; IO ()&lt;/code&gt;.&amp;#160; This means that it takes a &lt;code&gt;String&lt;/code&gt; as a parameter and uses it to perform some side effects, from which it obtains no result value.&amp;#160; The do-notation takes these two monadic values and &lt;em&gt;composes&lt;/em&gt; them together, forming one big value of type &lt;code&gt;IO ()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, this may seem horribly over-complicated, especially when compared to the nice clean side effects that we have in Scala, but it&amp;#8217;s actually quite mathematically elegant.&amp;#160; You see, the IO monad is how we represent actions with side effects.&amp;#160; In fact, the &lt;em&gt;only&lt;/em&gt; (safe) way to have side effects in Haskell is to wrap them up inside monad instantiations like these.&amp;#160; Haskell&amp;#8217;s type system allows you to actually identify and &lt;em&gt;control&lt;/em&gt; side effects so that they remain contained within discrete sections of your code base.&lt;/p&gt;
&lt;p&gt;This may not sound so compelling, but remember that functional programming is all about eliminating side effects.&amp;#160; You &lt;em&gt;compute&lt;/em&gt; your result, you don&amp;#8217;t just accidentally find yourself with a magic value at the end of a long run.&amp;#160; The ability to work with side effects as packaged values just like any other constant is extremely powerful.&amp;#160; More importantly, it is far closer to the &amp;#8220;true&amp;#8221; definition of functional programming than what we have in Scala.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I hate to say it, but Rich Hickey and the others are quite right: Scala &lt;em&gt;isn&amp;#8217;t&lt;/em&gt; a terribly functional language.&amp;#160; Variables, mutable data structures, side effects and constant type declarations all seem to conspire to remove that crown from Scala&amp;#8217;s proverbial brow.&amp;#160; But let&amp;#8217;s not forget one thing: Scala wasn&amp;#8217;t &lt;em&gt;designed&lt;/em&gt; to be a functional language.&lt;/p&gt;
&lt;p&gt;That may sound like heresy, but it&amp;#8217;s true.&amp;#160; Scala was created primarily as an experiment in language design, specifically focusing on type systems.&amp;#160; This is the one area where I think Scala excels far beyond the rest of the field.&amp;#160; Scala makes it possible to model many problems in an abstract way and then leverage the type system to prove correctness &lt;em&gt;at compile time&lt;/em&gt;.&amp;#160; This is approach is both revolutionary and an extremely natural way to solve problems.&amp;#160; The experience of using the type system in this fashion is a little difficult to describe (I&amp;#8217;m still on the lookout for good examples), but trust me, you&amp;#8217;ll like it when you see it.&lt;/p&gt;
&lt;p&gt;Scala&amp;#8217;s not really a functional language, and as &lt;a href=&quot;http://beust.com/weblog/archives/000490.html&quot;&gt;Cedric Beaust has pointed out&lt;/a&gt;, it&amp;#8217;s not really the best object-oriented language either; so what is it good for?&amp;#160; Scala sits in a strange middle ground between the two worlds of functional and object-oriented programming.&amp;#160; While this does have some disadvantages like being forced to take second place in terms of type inference, it also lets you do some really interesting stuff like build a mutable &lt;code&gt;ListBuffer&lt;/code&gt; with constant time conversion to an immutable &lt;code&gt;List&lt;/code&gt;, or sometimes recognize the fact that &lt;a href=&quot;http://www.drmaciver.com/2008/08/functional-code-not-equal-good-code/&quot;&gt;fold is not the universal solution&lt;/a&gt;.&amp;#160; It&amp;#8217;s an experiment to be sure, but one which I think has yielded some very powerful, very useful results&amp;#8230;just not many of a &lt;em&gt;purely&lt;/em&gt; functional nature.&lt;/p&gt;</content>
		<author>
			<name>Code Commit</name>
			<uri>http://www.codecommit.com/blog</uri>
		</author>
		<source>
			<title type="html">Code Commit » Scala</title>
			<subtitle type="html">(permanently in beta)</subtitle>
			<link rel="self" href="http://www.codecommit.com/blog/category/scala/feed"/>
			<id>http://www.codecommit.com/blog/category/scala/feed</id>
			<updated>2008-10-20T20:20:23+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">October's Bay Area Scala Enthusiasts Meetup, Part 2</title>
		<link href="http://kevinoncode.blogspot.com/2008/10/octobers-bay-area-scala-enthusiasts_17.html"/>
		<id>tag:blogger.com,1999:blog-1937539813134787961.post-4328605252191824444</id>
		<updated>2008-10-17T17:03:03+00:00</updated>
		<content type="html">I promised some technical notes on the Bay Area Scala Enthusiasts meetup earlier this week, so here we go.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Coding Guidelines&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;As I mentioned previously, the presentation by the Twitter folks focused on the informal guidelines they have been using internally for Scala coding (&lt;a href=&quot;http://groups.google.com/group/scala-base/web/TwitterOct2008.pdf&quot;&gt;PDF of their presentation&lt;/a&gt;). I like their guidelines generally. Something that may be controversial in the guidelines is their policy not to use implicits. DSLs especially can make good use of implicits, so I would imagine that would have to be the exception to their rule. Maybe someone should take their coding guidelines as a starting point to make a coding guidelines page on the &lt;a href=&quot;http://scala.sygneca.com/&quot;&gt;Scala Wiki&lt;/a&gt;?&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Structural Types&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;One of the topics mentioned at the meetup was structural types, which I hadn't used before, so I checked them out. Structural types seem to be a way to accomplish the same sort of &quot;duck&quot;-typing that you can do in Ruby and Python. Let's say you don't care about what the inheritance hierarchy of a parameter is, just that it can perform some operation. There are at least two ways to do this: traits or structural types.&lt;br /&gt;&lt;br /&gt;Using traits:&lt;br /&gt;&lt;pre class=&quot;code&quot;&gt;trait Jumpable {&lt;br /&gt; def jump() : Unit { print(&quot;Jumping!&quot;) }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Bunny extends Jumpable { ... }&lt;br /&gt;class PogoStick extends Jumpable { ... }&lt;br /&gt;&lt;br /&gt;class Controller {&lt;br /&gt; def makeThemJump(jumpers: List[Jumpable]) = {&lt;br /&gt;   jumpers.foreach { jumper =&gt;&lt;br /&gt;     jumper.jump()&lt;br /&gt;   }&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;Using structural types:&lt;br /&gt;&lt;pre class=&quot;code&quot;&gt;class Bunny { def jump(): Unit { print(&quot;Jumping!&quot;) } }&lt;br /&gt;class PogoStick { def jump(): Unit { print(&quot;Jumping!&quot;) } }&lt;br /&gt;&lt;br /&gt;class Controller {&lt;br /&gt; def makeThemJump(jumpers: List[{ def jump(): Unit }]) = {&lt;br /&gt;   jumpers.foreach { jumper =&gt;&lt;br /&gt;     jumper.jump()&lt;br /&gt;   }&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;span&gt;The Twitter guys pointed out that it might be a good idea to avoid structural types due to their use of &lt;/span&gt;&lt;span&gt;reflection, which may be slow.&lt;/span&gt;&lt;span&gt;&lt;br /&gt;&lt;br /&gt;Dependency Injection&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;How to use dependency injection (DI) with Scala was brought up. There was some argument on how applicable DI was in Scala, with developers coming from a Java background supporting it and those with a Ruby background questioning its relevance to Scala. Either way, this in depth &lt;a href=&quot;http://jonasboner.com/2008/10/06/real-world-scala-dependency-injection-di/&quot;&gt;article by Jonas Bonér&lt;/a&gt; was brought up.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Development Environment&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;There was a short discussion on what ide/editor people were using for Scala.  The Twitter guys were using TextMate or Emacs, and a few people in the audience mentioned Eclipse and NetBeans.  I am really curious what luck developers have had with the different environments.  I am using NetBeans right now, but I am not completely happy with it.  Can anyone make any recommendations?</content>
		<author>
			<name>Kevin Albrecht</name>
			<email>noreply@blogger.com</email>
			<uri>http://kevinoncode.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Kevin on Code</title>
			<subtitle type="html">Object-oriented programmer by day.
Functional programmer by night.</subtitle>
			<link rel="self" href="http://kevinoncode.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1937539813134787961</id>
			<updated>2008-10-31T22:40:25+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Test Driven Development Best Practices for C#</title>
		<link href="http://kevinoncode.blogspot.com/2008/09/test-driven-development-best-practices.html"/>
		<id>tag:blogger.com,1999:blog-1937539813134787961.post-5882424026065840510</id>
		<updated>2008-10-17T12:43:57+00:00</updated>
		<content type="html">&lt;div class=&quot;ExternalClassB733F077632D4BCB8BFCADC93592A71C&quot;&gt;As I have mentioned before, my company has recently started to use the Test Driven Development style of programming.  In order to help us write testable code, I came up with this simple list of best practices for making our C# code base more testable.  (Some of the links refer to limitations of Rhino Mocks, a mocking framework for C#, but the rules apply more generally as well.)&lt;br /&gt;&lt;br /&gt;To maximize the testability of code, follow these rules:&lt;br /&gt;&lt;div class=&quot;ExternalClass02015F31AB394C3A9A2076F5C9B665C5&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;div align=&quot;left&quot;&gt;&lt;div align=&quot;left&quot;&gt;&lt;strong&gt;Write the test first, then the code. (PRIME DIRECTIVE!)&lt;br /&gt;&lt;/strong&gt;Reason: This ensures that you write testable code and that every line of code gets tests written for it.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Design classes using dependency injection.&lt;/span&gt;&lt;br /&gt;&lt;div align=&quot;left&quot;&gt;&lt;div align=&quot;left&quot;&gt;&lt;strong&gt;&lt;/strong&gt;See: &lt;a href=&quot;http://weblogs.asp.net/stephenwalther/archive/2008/03/22/tdd-introduction-to-rhino-mocks.aspx&quot;&gt;Intro to Rhino Mocks (see &quot;Creating Testable Web Applications&quot; section)&lt;/a&gt; and &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;Dependency Injection Article&lt;/a&gt;&lt;br /&gt;Reason: You cannot mock or test what cannot be seen.&lt;/div&gt;&lt;/div&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/li&gt;&lt;br /&gt;&lt;li&gt;&lt;span&gt;Separate UI code from its behavior using Model-View-Controller or Model-View-Presenter.&lt;/span&gt;&lt;br /&gt;&lt;div align=&quot;left&quot;&gt;Reason: Allows the business logic to be tested while the parts that can't be tested (the UI) is minimized.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Do not write static methods or classes.&lt;/strong&gt;&lt;br /&gt;&lt;div align=&quot;left&quot;&gt;See: &lt;a href=&quot;http://weblogs.asp.net/stephenwalther/archive/2008/03/22/tdd-introduction-to-rhino-mocks.aspx&quot;&gt;Intro to Rhino Mocks (see &quot;Creating Testable Web Applications&quot; section)&lt;/a&gt; and &lt;a href=&quot;http://www.ayende.com/Wiki/Rhino+Mocks+Limitations.ashx&quot;&gt;Rhino Mocks Limitations&lt;/a&gt;&lt;br /&gt;Reason: Static methods are difficult or impossible to isolate and Rhino Mocks is unable to mock them.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Program off interfaces, not classes.&lt;/strong&gt;&lt;br /&gt;&lt;div align=&quot;left&quot;&gt;Reason: Interfaces can be easily mocked using Rhino Mocks and other mocking frameworks.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div align=&quot;left&quot;&gt;&lt;strong&gt;Isolate external dependencies.&lt;/strong&gt;&lt;br /&gt;Reason: Unresolved external dependencies.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div align=&quot;left&quot;&gt;&lt;strong&gt;Mark as virtual the methods you intend to mock.&lt;/strong&gt;&lt;br /&gt;See: &lt;a href=&quot;http://www.ayende.com/Wiki/Rhino+Mocks+Limitations.ashx&quot;&gt;Rhino Mocks Limitations&lt;/a&gt;&lt;br /&gt;Reason: Rhino Mocks is unable to mock non-virtual methods.&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content>
		<author>
			<name>Kevin Albrecht</name>
			<email>noreply@blogger.com</email>
			<uri>http://kevinoncode.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Kevin on Code</title>
			<subtitle type="html">Object-oriented programmer by day.
Functional programmer by night.</subtitle>
			<link rel="self" href="http://kevinoncode.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1937539813134787961</id>
			<updated>2008-10-31T22:40:25+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Test Driven Development</title>
		<link href="http://kevinoncode.blogspot.com/2008/04/test-driven-development.html"/>
		<id>tag:blogger.com,1999:blog-1937539813134787961.post-7047576888777145788</id>
		<updated>2008-10-17T12:43:11+00:00</updated>
		<content type="html">We have started using Test Driven Development at work, which is an entirely new way to program.  This goes along with our existing use of Agile Development, so we are totally embracing the latest and (hopefully) greatest in programming philosophy.</content>
		<author>
			<name>Kevin Albrecht</name>
			<email>noreply@blogger.com</email>
			<uri>http://kevinoncode.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Kevin on Code</title>
			<subtitle type="html">Object-oriented programmer by day.
Functional programmer by night.</subtitle>
			<link rel="self" href="http://kevinoncode.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1937539813134787961</id>
			<updated>2008-10-31T22:40:25+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">JavaScript Retardedness</title>
		<link href="http://kevinoncode.blogspot.com/2007/08/javascript-retardedness.html"/>
		<id>tag:blogger.com,1999:blog-1937539813134787961.post-7036676623283443893</id>
		<updated>2008-10-17T12:42:24+00:00</updated>
		<content type="html">I just discovered after dealing with an annoying bug for over an hour, that in JavaScript, this evaluates to true:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;0 == ''&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Thankfully, in the newer browsers, they added the === operator to deal with this.</content>
		<author>
			<name>Kevin Albrecht</name>
			<email>noreply@blogger.com</email>
			<uri>http://kevinoncode.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Kevin on Code</title>
			<subtitle type="html">Object-oriented programmer by day.
Functional programmer by night.</subtitle>
			<link rel="self" href="http://kevinoncode.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1937539813134787961</id>
			<updated>2008-10-31T22:40:25+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">October's Bay Area Scala Enthusiasts Meetup</title>
		<link href="http://kevinoncode.blogspot.com/2008/10/octobers-bay-area-scala-enthusiasts.html"/>
		<id>tag:blogger.com,1999:blog-1937539813134787961.post-2851871922408268639</id>
		<updated>2008-10-16T00:50:33+00:00</updated>
		<content type="html">Tonight I attended a meeting of the &lt;a href=&quot;http://svscala.ning.com/&quot;&gt;Bay Area Scala Enthusiasts&lt;/a&gt;, a user group focused on the Scala programming language.  The meeting was held at Twitter's office in San Francisco, only a few blocks from my company's office, so it couldn't have been more convenient for me.  I expected to encounter around 5-10 people there, but I was surprised when around 30 had gathered.  The Scala community is definitely growing!&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.gracelessfailures.com/&quot;&gt;Alex, Steve, and Robey from Twitter&lt;/a&gt; hosted the meeting, and explained how they are using Scala at Twitter.  They are using it both in middleware and in front-end code and seem to be committed to expanding its use in Twitter-- good things for Scala and Twitter both.  Their main presentation focused on establishing a set of coding conventions for the Scala community, which I think could be a really good help for new programmers to have some structure.  Robey showed us some of his open source code up on github, including &lt;a href=&quot;http://github.com/robey/configgy/tree/master&quot;&gt;configgy&lt;/a&gt;, which I plan to take a serious look at soon.&lt;br /&gt;&lt;br /&gt;Some other interesting discussions at the meeting included preferred development environments and strategies to deal with the paradox of being paralyzed by having multiple ways to accomplish the same thing in Scala, usually at least a functional and an object-oriented way of doing things.  The concensus seemed to be that each group will ultimately end up with their own style or Scala programming, somewhere between the extremes of writing Java in Scala or Haskell in Scala.&lt;br /&gt;&lt;br /&gt;We also learned that there are no less than three Scala books in the works:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://pragprog.com/titles/vsscala/programming-scala&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.artima.com/shop/programming_in_scala&quot;&gt;Programming in Scala&lt;/a&gt; by Odersky, Spoon, and Bill Venners (who was also present and shared some good stories about his experiences in the language as well as the origin of the &quot;/:&quot; operator)&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://pragprog.com/titles/vsscala/programming-scala&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://pragprog.com/titles/vsscala/programming-scala&quot;&gt;&lt;span&gt;Programming Scala: Tackle Multi-Core Complexity on the Java Virtual Machine&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://pragprog.com/titles/vsscala/programming-scala&quot;&gt;&lt;/a&gt; by Venkat Subramaniam&lt;br /&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Programming Scala &lt;/span&gt;by &lt;a href=&quot;http://www.al3x.net/&quot;&gt;Alex Payne&lt;/a&gt; and &lt;a href=&quot;http://blog.aspectprogramming.com/&quot;&gt;Dean Wampler&lt;/a&gt;, published by O'Reilly&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;Notice a pattern in the titles?&lt;br /&gt;&lt;br /&gt;All in all, a great meeting where I meet some very interesting people.  It's great to see the community of Bay Area Scalists so... well, Enthusiastic :)&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Update:&lt;/span&gt;&lt;br /&gt;Added exact authors of the new O'Reilly Scala book.</content>
		<author>
			<name>Kevin Albrecht</name>
			<email>noreply@blogger.com</email>
			<uri>http://kevinoncode.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Kevin on Code</title>
			<subtitle type="html">Object-oriented programmer by day.
Functional programmer by night.</subtitle>
			<link rel="self" href="http://kevinoncode.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1937539813134787961</id>
			<updated>2008-10-31T22:40:25+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Java/Ruby does not generalise to static/dynamic</title>
		<link href="http://blog.tmorris.net/javaruby-does-not-generalise-to-staticdynamic/"/>
		<id>http://blog.tmorris.net/?p=384</id>
		<updated>2008-10-15T20:44:54+00:00</updated>
		<content type="html">&lt;p&gt;So you were once a Java fanboy and now you&amp;#8217;ve apostatised to the Ruby cult. Now you believe you hold veritable opinions about &amp;#8220;statically typed languages&amp;#8221; and &amp;#8220;dynamically typed languages&amp;#8221;. How wrong you are.&lt;/p&gt;
&lt;p&gt;Java is not representative of static type systems, not even a bit. It lacks some of the most basic features of a static type system. It might even be said that its static type system imposes some of the most impractical insanity that could possibly be conceived. Why do I think this? &lt;a href=&quot;http://functionaljava.org/&quot;&gt;Because I have pushed Java&amp;#8217;s static type system to its limits&lt;/a&gt; and relative to its peers, it fails miserably. I&amp;#8217;ve seen the language inside-out. I used to work on the JDK implementation for a certain corporation (of questionable ethical standards). I even have the spanky Sun Java Programmer/Developer certifications. Yes I have been drowned in Java Jolly Junkie bullshit and revived.&lt;/p&gt;
&lt;p&gt;So you use Ruby eh? It allows you to express things that Java was too rigid to allow, right? That doesn&amp;#8217;t mean a thing about static type systems, right? RIGHT?&lt;/p&gt;
&lt;p&gt;When you use Java and Ruby as the example for static and dynamic type systems, I am reminded of my children who compare the flight of their scrunched up pieces of paper&amp;#8230; er highly aerodynamic, radar-resistant aircraft (sorry boys). Hopefully some day they will learn what a wind tunnel is and what it takes to engineer a fighter-aircraft. Will you?&lt;/p&gt;
&lt;p&gt;This kind of enthusiasm is to be encouraged &amp;mdash; if you are 6 years old &amp;mdash; but you are not, so you just look like you are in an adult&amp;#8217;s body. No really, you do. This might be fine with you (who am I to judge?), but if it is not, it might help to know &lt;a href=&quot;http://www.pphsg.org/cdsmith/types.html&quot;&gt;What to Know Before Debating Type Systems&lt;/a&gt;. Just a thought &amp;mdash; there is plenty of other information available should you desire to seek it, just drop me a line.&lt;/p&gt;
&lt;p&gt;Here are some tips to get started; static typing and explicit type annotating are two very different things. Don&amp;#8217;t use the two notions interchangeably &amp;mdash; not even loosely. Dynamically-typed languages do not produce shorter code, this is a myth. In fact, what constitutes shorter code is often misunderstood &amp;mdash; certainly by Ruby (and Python, Groovy for that matter) advocates that I have encountered. I&amp;#8217;m tempted to dispense with this myth with a challenge, but I&amp;#8217;m not sure if I can be bothered (I have a life outside of whinging on my blog you know). It would also fail to do the topic justice. An entire discussion on what constitutes shorter code is in order.&lt;/p&gt;
&lt;p&gt;For the love of GADTs, in the meantime, please stop talking nonsense about static and dynamic type systems. It only serves to hurt other potential learners by perpetuating misinformation. Myths spread by repetition &amp;mdash; be honest and break the cycle.&lt;/p&gt;</content>
		<author>
			<name>Tony Morris</name>
			<uri>http://blog.tmorris.net</uri>
		</author>
		<source>
			<title type="html">λ Tony’s blog λ</title>
			<subtitle type="html">The weblog of Tony Morris</subtitle>
			<link rel="self" href="http://blog.tmorris.net/feed/"/>
			<id>http://blog.tmorris.net/feed/</id>
			<updated>2008-10-31T22:20:34+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">No More Statics! Part 2</title>
		<link href="http://bytecrafter.blogspot.com/2008/09/no-more-statics-part-2.html"/>
		<id>tag:blogger.com,1999:blog-32241238.post-6766748432160464515</id>
		<updated>2008-10-14T19:42:54+00:00</updated>
		<content type="html">&lt;p&gt;In a &lt;a href=&quot;http://bytecrafter.blogspot.com/2008/09/no-more-statics.html&quot;&gt;previous post&lt;/a&gt;, I explained how Scala's use of singleton objects is better than Java's use of static members. I was asked for some sample code after that post, so I thought I would throw some together. Let's look at a simple Java class.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;class Foo {&lt;br /&gt;    private static int number = 1;&lt;br /&gt;    &lt;br /&gt;    public static Foo create(String a) {&lt;br /&gt;        return new Foo(&quot;Some &quot; + a);&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    private String a;&lt;br /&gt;    private int id = number++;&lt;br /&gt;    &lt;br /&gt;    public Foo(String a) {&lt;br /&gt;        this.a = a;&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    @Override&lt;br /&gt;    public String toString() {&lt;br /&gt;        return &quot;Foo #&quot; + id + &quot; is &quot; + a;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This class keeps track of how many instances have ever been created. You construct a Foo with a name, and the Foo's name and id are part of its string representation. In addition, there is a create method that has been defined on the Foo class itself.&lt;/p&gt;&lt;p&gt;Scala doesn't have a &quot;static&quot; keyword. Instead, members that would otherwise be static are placed onto the so-called companion object. &lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;object Foo {&lt;br /&gt;  var number:Int = 1;&lt;br /&gt;&lt;br /&gt;  def create(a:String) = new Foo(&quot;Some &quot; + a)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Foo(a:String) {&lt;br /&gt;  private val id:Int = Foo.number&lt;br /&gt;  Foo.number = Foo.number + 1&lt;br /&gt;&lt;br /&gt;  override def toString() = {&lt;br /&gt;    &quot;Foo #&quot; + id + &quot; is &quot; + a&lt;br /&gt;  }&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Because Foo is the name of both an object and a class in the same package, they are allowed to access each other's private members. Basically, this makes the instance members of a singleton object equivalent to static members of an ordinary Java class. However, since the singleton object is a fully fledged object, it can be passed around in a way that Java classes normally can't be.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;def createList(f : Foo.type) = {&lt;br /&gt;  List(f.create(&quot;One&quot;), f.create(&quot;Two&quot;))&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Have you ever wanted a Java class' static members to obey an interface? Well, the singleton object can mix in Scala traits (Scala traits seem to take the place of both interfaces and mixins from other languages).&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;trait Creatable[A] {&lt;br /&gt;  def create(a:String) : A&lt;br /&gt;&lt;br /&gt;  def createDefault() : A = {&lt;br /&gt;    return create(&quot;Default&quot;)&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;object Foo extends Creatable[Foo] {&lt;br /&gt;  var number:Int = 1;&lt;br /&gt;&lt;br /&gt;  override def create(a:String) = new Foo(a)&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;And here's a whole sample program:&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;trait Creatable[A] {&lt;br /&gt;  def create(a:String) : A&lt;br /&gt;  &lt;br /&gt;  def createDefault() : A = {&lt;br /&gt;    return create(&quot;Default&quot;)&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;object Foo extends Creatable[Foo] {&lt;br /&gt;  var number:Int = 1;&lt;br /&gt;  &lt;br /&gt;  override def create(a:String) = new Foo(a)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Foo(a:String) {&lt;br /&gt;  private val id:Int = Foo.number&lt;br /&gt;  Foo.number = Foo.number + 1&lt;br /&gt;&lt;br /&gt;  override def toString() = {&lt;br /&gt;    &quot;Foo #&quot; + id + &quot; is &quot; + a&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;def createList(f : Creatable[Foo]) = {&lt;br /&gt;  List(f.create(&quot;Three&quot;), f.create(&quot;Four&quot;))&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;println(Foo.create(&quot;One&quot;))&lt;br /&gt;println(Foo.create(&quot;Two&quot;))&lt;br /&gt;println(createList(Foo))&lt;br /&gt;println(Foo.createDefault())&lt;br /&gt;&lt;br /&gt;----------&lt;br /&gt;&lt;br /&gt;Foo #1 is One&lt;br /&gt;Foo #2 is Two&lt;br /&gt;List(Foo #3 is Three, Foo #4 is Four)&lt;br /&gt;Foo #5 is Default&lt;/pre&gt;&lt;p&gt;Why are singleton objects better than static members? To begin with, Scala's singleton objects are at least as expressive as static class members, so you're not losing anything from Java. You define a singleton object differently that you define static members in Java, but you access them using notation identical to Java (i.e. Foo.bar(5) in both languages). In addition, you get some other nice features - first class object status and the ability to participate in the normal class hierarchy. As an added bonus, Scala's simpler syntax actually made the class/singleton-object pair &lt;em&gt;shorter&lt;/em&gt; than the equivalent Java solution. Not bad!&lt;/p&gt;</content>
		<author>
			<name>Daniel Yankowsky</name>
			<email>noreply@blogger.com</email>
			<uri>http://bytecrafter.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Why not?</title>
			<link rel="self" href="http://bytecrafter.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-32241238</id>
			<updated>2008-10-31T01:20:02+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">32-bit or 64-bit JVM? How about a Hybrid?</title>
		<link href="http://blog.juma.me.uk/2008/10/14/32-bit-or-64-bit-jvm-how-about-a-hybrid/"/>
		<id>http://ijuma.wordpress.com/?p=32</id>
		<updated>2008-10-14T07:07:55+00:00</updated>
		<content type="html">&lt;div class=&quot;snap_preview&quot;&gt;&lt;br /&gt;&lt;p&gt;Before &lt;a href=&quot;http://en.wikipedia.org/wiki/X86-64&quot;&gt;x86-64&lt;/a&gt; came along, the decision on whether to use 32-bit or 64-bit mode for architectures that supported both was relatively simple: use 64-bit mode if the application requires the larger address space, 32-bit mode otherwise. After all, no point in reducing the amount of data that fits into the processor cache while increasing memory usage and bandwidth if the application doesn&amp;#8217;t need the extra addressing space.&lt;/p&gt;
&lt;p&gt;When it comes to x86-64, however, there&amp;#8217;s also the fact that the number of named general-purpose registers has doubled from 8 to 16 in 64-bit mode. For CPU intensive apps, this may mean performance at the cost of extra memory usage. On the other hand, for memory intensive apps 32-bit mode might be better in if you manage to fit your application within the address space provided. Wouldn&amp;#8217;t it be nice if there was a single JVM that would cover the common cases?&lt;/p&gt;
&lt;p&gt;It turns out that the HotSpot engineers have been working on doing just that through a feature called &lt;a href=&quot;http://wikis.sun.com/display/HotSpotInternals/CompressedOops&quot;&gt;Compressed oops&lt;/a&gt;. The benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Heaps up to 32GB (instead of the theoretical 4GB in 32-bit that in practice is closer to 3GB)&lt;/li&gt;
&lt;li&gt;64-bit mode so we get to use the extra registers&lt;/li&gt;
&lt;li&gt;Managed pointers (including Java references) are 32-bit so we don&amp;#8217;t waste memory or cache space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main disadvantage is that encoding and decoding is required to translate from/to native addresses. HotSpot tries to avoid these operations as much as possible and they are relatively cheap. The hope is that the extra registers give enough of a boost to offset the extra cost introduced by the encoding/decoding.&lt;/p&gt;
&lt;p&gt;Compressed Oops have been included (but disabled by default) in the performance release &lt;a href=&quot;http://java.sun.com/javase/technologies/performance.jsp&quot;&gt;JDK6u6p&lt;/a&gt; (requires you to fill a survey), so I decided to try it in an internal application and compare it with 64-bit mode and 32-bit mode.&lt;/p&gt;
&lt;p&gt;The tested application has two phases, a single threaded one followed by a multi-threaded one. Both phases do a large amount of allocation so memory bandwidth is very important. All tests were done on a dual quad-core Xeon 5400 series with 10GB of RAM. I should note that a different JDK version had to be used for 32-bit mode (JDK6u10rc2) because there is no Linux x86 build of JDK6u6p. I chose the largest heap size that would allow the 32-bit JVM to run the benchmark to completion without crashing.&lt;/p&gt;
&lt;p&gt;I started by running the application with a smaller dataset:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;JDK6u10rc2 32-bit&lt;/strong&gt;&lt;br /&gt;
Single-threaded phase: 6298ms&lt;br /&gt;
Multi-threaded phase (8 threads on 8 cores): 17043ms&lt;br /&gt;
Used Heap after full GC: 430MB&lt;br /&gt;
JVM Args: -XX:MaxPermSize=256m -Xms3328m -Xmx3328m -server -XX:+UseConcMarkSweepGC
&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;JDK6u6p 64-bit with Compressed Oops&lt;/strong&gt;&lt;br /&gt;
Single-threaded phase: 6345&lt;br /&gt;
Multi-threaded phase (8 threads on 8 cores): 16348&lt;br /&gt;
Used Heap after full GC: 500MB&lt;br /&gt;
JVM Args: -XX:MaxPermSize=256m -Xms3328m -Xmx3328m -server -XX:+UseConcMarkSweepGC -XX:+UseCompressedOops
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The performance numbers are similar and the memory usage of the 64-bit JVM with Compressed Oops is 16% larger.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;JDK6u6p 64-bit&lt;/strong&gt;&lt;br /&gt;
Single-threaded phase: 6463&lt;br /&gt;
Multi-threaded phase (8 threads on 8 cores): 18778&lt;br /&gt;
Used Heap after full GC: 700MB&lt;br /&gt;
JVM Args: -XX:MaxPermSize=256m -Xms3328m -Xmx3328m -server -XX:+UseConcMarkSweepGC
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The performance is again similar, but the memory usage of the 64-bit JVM is much higher, over 60% higher than the 32-bit JVM one.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s try the larger dataset now:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;JDK6u10rc2 32-bit&lt;/strong&gt;&lt;br /&gt;
Single-threaded phase: 14188ms&lt;br /&gt;
Multi-threaded phase (8 threads on 8 cores): 73451ms&lt;br /&gt;
Used Heap after full GC: 1.25GB&lt;br /&gt;
JVM Args: -XX:MaxPermSize=256m -Xms3328m -Xmx3328m -server -XX:+UseConcMarkSweepGC
&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;JDK6u6p 64-bit with CompressedOops&lt;/strong&gt;&lt;br /&gt;
Single-threaded phase: 13742&lt;br /&gt;
Multi-threaded phase (8 threads on 8 cores): 76664ms&lt;br /&gt;
Used Heap after full GC: 1.45GB&lt;br /&gt;
JVM Args: -XX:MaxPermSize=256m -Xms3328m -Xmx3328m -server -XX:+UseConcMarkSweepGC -XX:+UseCompressedOops
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The performance difference and memory overhead are the same as with the smaller dataset. The benefit of Compressed Oops here is that we still have plenty of headroom while the 32-bit JVM is getting closer to its limits. This may not be apparent from the heap size after a full GC, but during the multi-threaded phase the peak memory usage is quite a bit larger and the fact that the allocation rate is high does not help. This becomes more obvious when we look at the results for the 64-bit JVM.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;JDK6u6p 64-bit&lt;/strong&gt;&lt;br /&gt;
Single-threaded phase: 14610&lt;br /&gt;
Multi-threaded phase (8 threads on 8 cores): 104992&lt;br /&gt;
Used Heap after full GC: 2GB&lt;br /&gt;
JVM Args: -XX:MaxPermSize=256m -Xms4224m -Xmx4224m -server -XX:+UseConcMarkSweepGC
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I had to increase the Xms/Xmx to 4224m for the application to run to completion. Even so, the performance of the multi-threaded phase took a substantial performance hit when compared to the other two JVM configurations. All in all, the 64-bit JVM without compressed oops does not do well here.&lt;/p&gt;
&lt;p&gt;In conclusion, it seems that compressed oops is a feature with a lot of promise and it allows the 64-bit JVM to be competitive even in cases that favour the 32-bit JVM. It might be interesting to test applications with different characteristics to compare the results. It&amp;#8217;s also worth mentioning that since this is a new feature, it&amp;#8217;s possible that performance will improve further before it&amp;#8217;s integrated into the normal JDK releases. As it is though, it already hits a sweet spot and if it weren&amp;#8217;t for the potential for instability, I would be ready to ditch my 32-bit JVM.&lt;/p&gt;
Posted in jvm&amp;nbsp;&amp;nbsp;&amp;nbsp;Tagged: 32-bit, 64-bit, Compressed Oops, hotspot, jvm, memory usage&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/ijuma.wordpress.com/32/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ijuma.wordpress.com/32/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godelicious/ijuma.wordpress.com/32/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/ijuma.wordpress.com/32/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gostumble/ijuma.wordpress.com/32/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/ijuma.wordpress.com/32/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godigg/ijuma.wordpress.com/32/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/ijuma.wordpress.com/32/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/goreddit/ijuma.wordpress.com/32/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/ijuma.wordpress.com/32/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://stats.wordpress.com/b.gif?host=blog.juma.me.uk&amp;blog=4860094&amp;post=32&amp;subd=ijuma&amp;ref=&amp;feed=1&quot; /&gt;&lt;/div&gt;</content>
		<author>
			<name>Ismael Juma</name>
			<uri>http://blog.juma.me.uk</uri>
		</author>
		<source>
			<title type="html">Ismael Juma</title>
			<link rel="self" href="http://blog.juma.me.uk/feed"/>
			<id>http://blog.juma.me.uk/feed</id>
			<updated>2008-10-25T13:00:33+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Scala's Model of Functions</title>
		<link href="http://bytecrafter.blogspot.com/2008/10/scalas-model-of-functions.html"/>
		<id>tag:blogger.com,1999:blog-32241238.post-3702728359815416737</id>
		<updated>2008-10-14T02:20:41+00:00</updated>
		<content type="html">&lt;p&gt;I was a little dismayed to learn that Scala models functions with different numbers of parameters  as instances of distinct function trait definitions. A practical upshot of this is that you can't really work with functions that take more than 22 parameters.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;def crazy(a:Int, b:Int, c:Int, d:Int, e:Int, f:Int, g:Int, h:Int, i:Int, j:Int, &lt;br /&gt;          k:Int, l:Int, m:Int, n:Int, o:Int, p:Int, q:Int, r:Int, s:Int, t:Int, &lt;br /&gt;          u:Int, v:Int) = 0&lt;br /&gt;(crazy _).curry    :    (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; &lt;br /&gt;                        (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; (Int) =&gt; &lt;br /&gt;                        (Int) =&gt; (Int) =&gt; Int = &amp;lt;function&amp;gt;&lt;br /&gt;&lt;br /&gt;def crazier(a:Int, b:Int, c:Int, d:Int, e:Int, f:Int, g:Int, h:Int, i:Int, j:Int, &lt;br /&gt;            k:Int, l:Int, m:Int, n:Int, o:Int, p:Int, q:Int, r:Int, s:Int, t:Int, &lt;br /&gt;            u:Int, v:Int, w:Int) = 0&lt;br /&gt;(crazier _).curry    :    &amp;lt;error&amp;gt;&lt;/pre&gt;&lt;p&gt;The scala runtime apparently has traits &lt;a href=&quot;http://www.scala-lang.org/docu/files/api/scala/Function0.html&quot;&gt;Function0&lt;/a&gt; through &lt;a href=&quot;http://www.scala-lang.org/docu/files/api/scala/Function22.html&quot;&gt;Function22&lt;/a&gt; defined. I guess this is so that they can have &lt;span class=&quot;method&quot;&gt;call&lt;/span&gt; methods that take a statically known list of parameters (rather than, say, an array). That's all well and good, and probably necesary for proper Java interop, but it's still a little sad. Still, I don't expect to run into that limit any time soon. Oh wait, I have already worked on projects with functions that take more than 20 parameters. Maybe this was added just for me. Now I'm sad.&lt;/p&gt;</content>
		<author>
			<name>Daniel Yankowsky</name>
			<email>noreply@blogger.com</email>
			<uri>http://bytecrafter.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Why not?</title>
			<link rel="self" href="http://bytecrafter.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-32241238</id>
			<updated>2008-10-31T01:20:02+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Partial Application in Haskell and Scala</title>
		<link href="http://bytecrafter.blogspot.com/2008/10/partial-application-in-haskell-and.html"/>
		<id>tag:blogger.com,1999:blog-32241238.post-1718163728178465368</id>
		<updated>2008-10-14T01:58:27+00:00</updated>
		<content type="html">&lt;p&gt;This is an attempt to squeeze out a blog post while I wait for my laundry to finish.&lt;/p&gt;&lt;p&gt;Functional languages are fun. Fun in ways that Java (and, for that matter, Ruby) are not. Take Haskell. In that language, we can take any operator and turn it into a function. Normally, we use the symbol &lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt; to represent addition. If we enclose it in parentheses, we instead have a function.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;(+) :: (Num a) =&gt; a -&gt; a -&gt; a&lt;/pre&gt;&lt;p&gt;In this case, &lt;span class=&quot;expression&quot;&gt;(+)&lt;/span&gt; is a function of 2 number parameters, which returns a number. Now that we have a function, we can apply all of the standard Haskell magic to it. Since Haskell is automatically curried (no function really ever takes more than one parameter), we chain calls to fully evaluate our (+) function.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;(+) 2 3 =&gt; 5&lt;/pre&gt;&lt;p&gt;We can also partially apply this operator.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;add5 :: Integer -&gt; Integer&lt;br /&gt;add5 = (+) 5&lt;br /&gt;add5 3 =&gt; 8&lt;/pre&gt;&lt;p&gt;In this case, we have created an alias for the partially bound &lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt; operator. Rather than jump through so many hoops, we could specify add5 more directly.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;add5 = (5+)&lt;/pre&gt;&lt;p&gt;Finally, a slightly more complicated example.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;simple :: Integer -&gt; Integer -&gt; Integer -&gt; Integer&lt;br /&gt;simple x y z = x * (y + z)&lt;br /&gt;&lt;br /&gt;simpler :: Integer -&gt; Integer -&gt; Integer&lt;br /&gt;simpler = simple 2&lt;br /&gt;&lt;br /&gt;simplest :: Integer&lt;br /&gt;simplest = simpler 3 4 =&gt; 14&lt;/pre&gt;&lt;p&gt;All functions are also values in Haskell.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;easy = simple&lt;br /&gt;easy 2 3 4 =&gt; 14&lt;/pre&gt;&lt;p&gt;As you can see, in Haskell, we can turn any operator into a function. Functions are curried, and can be partially evaluated from the left. Functions are also values that can be assigned and passed around as needed.&lt;/p&gt;&lt;p&gt;Scala takes a different approach. In Scala, operators are actually methods on values. There is no global + operator. Instead, you invoke the + method on the left hand parameter.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;5 + 3 //is the same as...&lt;br /&gt;(5).+(3)&lt;/pre&gt;&lt;p&gt;If you want to refer to a function as a value in Scala, you must &quot;partially apply&quot; it to zero parameters.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;val output = println //will result in a compilation error&lt;br /&gt;val output = println _&lt;br /&gt;output &quot;Oh Hai, World!&quot;&lt;/pre&gt;&lt;p&gt;The underscore is the Scala placeholder operator. If used as we did with println, it stands in for the whole argument list, effectively turning the function into a function value. It is also the mechanism by which we can partially apply a function.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;def simple(x:Int, y:Int, z:Int) = x * (y + z)&lt;br /&gt;val simpler = simple(2, _:Int, _:Int)&lt;br /&gt;simpler(3, 4) =&gt; 14&lt;/pre&gt;&lt;p&gt;The underscores, when used this way, compel the result of the expression to itself be a function that takes n parameters, where n is the number of placeholders. Sometimes, it is possible to infer the type of the missing parameters; other times, it isn't. It depends on how the parameters are used.&lt;/p&gt;&lt;p&gt;It is very important to notice that, unlike Haskell, it is very easy to bind only the parameter in the middle of this expression.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;val sample = simple(_:Int, 3, _:Int)&lt;br /&gt;sample(2, 4) =&gt; 14&lt;/pre&gt;&lt;p&gt;By combining placeholder syntax with operators, it is possible to turn an operator into a function, even a function that takes its left operand as a parameter.&lt;/p&gt;&lt;pre class=&quot;code&quot;&gt;List(1, 2, 3).map(_ + 2) =&gt; List(3, 4, 5)&lt;br /&gt;List(1, 2, 3).reduceLeft(_ + _) =&gt; 6&lt;/pre&gt;&lt;p&gt;As you can see, Haskell and Scala have a lot in common. Haskell's syntax is a bit more concise (and its inference rules much better), but Scala's ability to bind any parameter is pretty handy, too. There's something both cluttered and clean about Haskell's use of underscores, especially when types aren't required. Of course, I'm not an expert (or, in fact, experienced at all) with either language, so please correct me if I got any of my facts wrong.&lt;/p&gt;&lt;p&gt;Looks like I failed. My laundry was done 30 minutes ago.&lt;/p&gt;</content>
		<author>
			<name>Daniel Yankowsky</name>
			<email>noreply@blogger.com</email>
			<uri>http://bytecrafter.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Why not?</title>
			<link rel="self" href="http://bytecrafter.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-32241238</id>
			<updated>2008-10-31T01:20:02+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Reflections on Scala</title>
		<link href="http://kevinoncode.blogspot.com/2008/10/reflections-on-scala.html"/>
		<id>tag:blogger.com,1999:blog-1937539813134787961.post-4012529429962641969</id>
		<updated>2008-10-14T01:07:03+00:00</updated>
		<content type="html">In my professional programming career, I have been a mostly object-oriented programmer, programming in C#, Java, Python, and C++.  Throughout this time, though, I researched functional programming languages from Scheme to Haskell.  While I was frequently fascinated by them and they definitely stretched my mind, I never found them to be as practically usable as the relatively new language &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Scala describes itself as a fusion of object-oriented and functional programming languages, and while that is true, it certainly does not give the language justice.  Scala has let me leverage my familiarity with object-oriented languages like C# and Java, but add in functional elements as I go along.  This has been great for me since I am most comfortable developing real-world applications in an object-oriented style, as I suspect most professional developers are these days.  After I have the basics of my program done in an object-oriented style, I can start adding in more functional features.  I have never found a language that makes this easier.&lt;br /&gt;&lt;br /&gt;To me, the biggest stumbling block for programmers new to Scala is that most of the official documentation describes Scala's functional features very well, but lacks in depth discussions on how to transition to Scala from an object-oriented background.  My advice if you are new to Scala and you're an object-oriented developer, learn how to program Scala in a object-oriented way first, then add in functional stuff.&lt;br /&gt;&lt;br /&gt;Finally, I have tried two IDE plugins that offer Scala support: one for Eclipse and one for NetBeans.  Of the two, I find NetBeans to be more stable, faster, and better able to deal with Scala syntax than Eclipse.  There are definitely still some bugs for them to solve, but I'll be sticking with the NetBeans plugin for my Scala development in the near term.</content>
		<author>
			<name>Kevin Albrecht</name>
			<email>noreply@blogger.com</email>
			<uri>http://kevinoncode.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Kevin on Code</title>
			<subtitle type="html">Object-oriented programmer by day.
Functional programmer by night.</subtitle>
			<link rel="self" href="http://kevinoncode.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1937539813134787961</id>
			<updated>2008-10-31T22:40:25+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">NumberFormatException</title>
		<link href="http://www.gracelessfailures.com/2008/10/numberformatexception.html"/>
		<id>tag:blogger.com,1999:blog-5526350669322624820.post-6872639662179409246</id>
		<updated>2008-10-13T18:10:53+00:00</updated>
		<content type="html">&lt;pre&gt;scala&gt; &quot;true&quot;.toBoolean&lt;br /&gt;res1: Boolean = true&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;That's pretty cool. Does it work for &quot;false&quot; too?&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;scala&gt; &quot;false&quot;.toBoolean&lt;br /&gt;res1: Boolean = false&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Yeah! Awesome! How does it handle other values, I wonder?&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;scala&gt; &quot;1&quot;.toBoolean&lt;br /&gt;java.lang.NumberFormatException: For input string: &quot;1&quot;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;... Err, what?&lt;br /&gt;</content>
		<author>
			<name>Robey</name>
			<email>noreply@blogger.com</email>
			<uri>http://www.gracelessfailures.com/</uri>
		</author>
		<source>
			<title type="html">Graceless Failures</title>
			<subtitle type="html">Learning Scala.  The hard way.</subtitle>
			<link rel="self" href="http://www.gracelessfailures.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-5526350669322624820</id>
			<updated>2008-10-31T20:40:03+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Map Composition in Scala (or The Virtues of Laziness)</title>
		<link href="http://debasishg.blogspot.com/2008/10/map-composition-in-scala-or-virtues-of.html"/>
		<id>tag:blogger.com,1999:blog-22587889.post-3457097049751699042</id>
		<updated>2008-10-13T12:33:05+00:00</updated>
		<content type="html">I have been dabbling around with some lazy optimization techniques in designing functional data structures. I am using Scala to implement some of the functional data structures of &lt;a href=&quot;http://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504&quot;&gt;Okasaki&lt;/a&gt; .. hence thought it would be appropriate to think aloud of some of the lazy optimization that Scala offers. &lt;br /&gt;&lt;br /&gt;Scala is a big language with myriads of features and some unfortunate syntactic warts that will definitely rub you the wrong way till you get comfortable with them. Some time back, a popular joke on twitter was related to the number of meanings and interpretations that the character &quot;_&quot; has in Scala. Indeed there are many, and not all of them are intuitive enough .. :-( ..&lt;br /&gt;&lt;br /&gt;Now, on to real some Scala snippets ..  &lt;br /&gt;&lt;br /&gt;Do you know all the differences in interpretation of the following variants of function definition and application ?&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_comment&quot;&gt;//&amp;nbsp;call&amp;nbsp;by&amp;nbsp;value&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;foo&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;a&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;x&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;b&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;x&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_comment&quot;&gt;//&amp;nbsp;call&amp;nbsp;by&amp;nbsp;name&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;foo&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;a&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;x&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;b&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;x&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_comment&quot;&gt;//&amp;nbsp;no&amp;nbsp;argument&amp;nbsp;function&amp;nbsp;implemented&amp;nbsp;as&amp;nbsp;thunks&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;foo&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;a&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;x&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;b&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;x&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;c&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;x&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_comment&quot;&gt;//&amp;nbsp;call&amp;nbsp;by&amp;nbsp;name&amp;nbsp;to&amp;nbsp;call&amp;nbsp;by&amp;nbsp;need&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;foo&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;y&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;x&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;This post is not about discussing the details of the above 4 cases .. Scala &lt;a href=&quot;http://scala.sygneca.com&quot;&gt;wiki&lt;/a&gt; has an excellent &lt;a href=&quot;http://scala.sygneca.com/faqs/language#what-s-the-difference-between-a-lazy-argument-a-no-arg-function-argument-and-a-lazy-value&quot;&gt;FAQ entry&lt;/a&gt; that describes each of them with sufficient rigor and detail .. go get it ..&lt;br /&gt;&lt;br /&gt;Lazy evaluation is one of the techniques of performance optimization when dealing with large functional data structures. In Scala, &lt;code&gt;Seq[A].Projection&lt;/code&gt; is an abstraction that makes operations lazy.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;l&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(...)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_comment&quot;&gt;//&amp;nbsp;a&amp;nbsp;big&amp;nbsp;list&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In the above snippet, every operation on the list creates a separate list, which gets chained on to the next operation in line. Hence if you are dealing with large collections, it always sucks in performance. Go lazy and you have savings both in memory requirements and in elapsed time ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_plain&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;projection&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;This will return a Stream, which will do a lazy evaluation on demand. I found the term Stream first in &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;SICP&lt;/a&gt;, where Abelson and Sussman introduce it as a data structure for &lt;i&gt;delayed evaluation&lt;/i&gt;, &lt;cite&gt;which enables us to represent very large (even infinite) sequences&lt;/cite&gt;.&lt;br /&gt;&lt;br /&gt;In Scala, a &lt;code&gt;Stream&lt;/code&gt; is a lazy list, and follows the semantics of SICP streams, where elments are evaluated &lt;i&gt;only&lt;/i&gt; when they are needed.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Making your custom collection lazy ..&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;I was recently working with a custom recursive tree-like data structure in Scala, which, for simplicity, let us assume is a binary tree. And since I was fetching records from a database and then loading up data structures in memory, I was working with a really big sized collection. Let us see how we can implement &lt;code&gt;Projection&lt;/code&gt; on my custom data structure and make things lazy on my own. Scala, unlike Haskell, is not an inherently lazy language, and abstractions like &lt;code&gt;Projection&lt;/code&gt;, help implement laziness in evaluation. Eric Kidd wrote a great &lt;a href=&quot;http://www.randomhacks.net/articles/2007/02/10/map-fusion-and-haskell-performance&quot;&gt;post&lt;/a&gt; on Haskell rewrite rules to implement declarative fusion of maps using compiler directives. This post has some inspiration from it, through the looking glass of Scala, an admittedly more verbose language than Haskell.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;*&amp;nbsp;Non&amp;nbsp;empty&amp;nbsp;tree&amp;nbsp;node,&amp;nbsp;with&amp;nbsp;a&amp;nbsp;left&amp;nbsp;subtree&amp;nbsp;and&amp;nbsp;a&amp;nbsp;right&amp;nbsp;subtree&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;left&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;right&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;left&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;right&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;*&amp;nbsp;Leaf&amp;nbsp;node&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;*&amp;nbsp;Empty&amp;nbsp;tree&amp;nbsp;object&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_javadoc_comment&quot;&gt;&amp;nbsp;*/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;E&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;We have a &lt;code&gt;map&lt;/code&gt; operation defined for the tree, that uses a recursive implementation to map over all tree nodes. The &lt;code&gt;map&lt;/code&gt; operation is a strict/eager one, much like &lt;code&gt;List.map&lt;/code&gt; ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;t&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;will result in a new tree that will have both the &lt;code&gt;map&lt;/code&gt; operations done in succession. And in the process will generate intermediate tree structures, one for each of the &lt;code&gt;map&lt;/code&gt; operations in chain. Needless to say, for a large collection, both space and time will hit you.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Getting rid of the intermediate trees ..&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Implement laziness .. make evaluations lazy, so that effectively we have one final tree that evaluates it's nodes only when asked for. In other words, lift the operation from the collection to an iterator, which gets evaluated only when asked for.&lt;br /&gt;&lt;br /&gt;Here is a sample bare bone unoptimized iterator implemented via &lt;code&gt;scala.collection.mutable.Stack&lt;/code&gt; ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TreeIterator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;scala&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;mutable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;st&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;st&amp;nbsp;push&amp;nbsp;it&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;hasNext&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;st&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;isEmpty&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;next&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;st&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;pop&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;l&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;r&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;st&amp;nbsp;push&amp;nbsp;r&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;st&amp;nbsp;push&amp;nbsp;l&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;d&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Using this iterator, we define the &lt;code&gt;Projection&lt;/code&gt; for &lt;code&gt;Tree&lt;/code&gt; with the lazy &lt;code&gt;map&lt;/code&gt; implementation and integrate it with the main data structure through a &lt;code&gt;projection&lt;/code&gt; method ..&lt;br /&gt;&lt;br /&gt;Here is the modified &lt;code&gt;Tree[+A]&lt;/code&gt; ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;elements&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TreeIterator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;projection&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Projection&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Projection&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;elements&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;elements&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;and the &lt;code&gt;Projection&lt;/code&gt; trait in an accompanying singleton for &lt;code&gt;Tree&lt;/code&gt; ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Projection&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Projection&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Projection&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;elements&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Projection&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Now I can use my data structure to implement lazy evaluations and fusion of operations ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;t&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;projection&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Eric Kidd reported on making Haskell maps 225% faster through fusion and rewrite rules. In Scala, implementing laziness through delayed evaluation (or &lt;code&gt;Projection&lt;/code&gt;) can also lead to substantial reduction in memory usage and elapsed time.</content>
		<author>
			<name>Debasish</name>
			<email>noreply@blogger.com</email>
			<uri>http://debasishg.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Ruminations of a Programmer</title>
			<subtitle type="html">A programmer's blog - will deal with everything that relates to a programmer. Occasionally, it will contain some humour, some politics and some sport news.</subtitle>
			<link rel="self" href="http://debasishg.blogspot.com/feeds/posts/default?alt=rss"/>
			<id>tag:blogger.com,1999:blog-22587889</id>
			<updated>2008-11-01T19:20:16+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Does Scala have Java’s ternary operator?</title>
		<link href="http://blog.tmorris.net/does-scala-have-javas-ternary-operator/"/>
		<id>http://blog.tmorris.net/?p=375</id>
		<updated>2008-10-13T08:29:41+00:00</updated>
		<content type="html">&lt;p&gt;I hear this question a lot. Yes it does. Instead of &lt;code&gt; c ? p : q&lt;/code&gt;, it is written &lt;code&gt;if(c) p else q&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This may not be preferable. Perhaps you&amp;#8217;d like to write it using the same syntax as Java. Sadly, you can&amp;#8217;t. This is because &lt;code&gt;:&lt;/code&gt; is not a valid identifier. Fear not, &lt;code&gt;|&lt;/code&gt; is! Would you settle for this?&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;c &lt;span&gt;?&lt;/span&gt; p | q&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you&amp;#8217;ll need the following code. Notice the call-by-name (&lt;code&gt;=&gt;&lt;/code&gt;) annotations on the arguments. This evaluation strategy is required to correctly rewrite Java&amp;#8217;s ternary operator. This cannot be done in Java itself.&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Bool&lt;span&gt;&amp;#40;&lt;/span&gt;b&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;?&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;X&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;t&lt;span&gt;:&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; X&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; |&lt;span&gt;&amp;#40;&lt;/span&gt;f&lt;span&gt;:&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; X&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;b&lt;span&gt;&amp;#41;&lt;/span&gt; t &lt;span&gt;else&lt;/span&gt; f
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;object&lt;/span&gt; Bool &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;implicit&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; BooleanBool&lt;span&gt;&amp;#40;&lt;/span&gt;b&lt;span&gt;:&lt;/span&gt; &lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; Bool&lt;span&gt;&amp;#40;&lt;/span&gt;b&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is an example using the new operator that we just defined:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;object&lt;/span&gt; T &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; condition &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;import&lt;/span&gt; Bool.&lt;span&gt;_&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;// yay!&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; x &lt;span&gt;=&lt;/span&gt; condition &lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;quot;yes&amp;quot;&lt;/span&gt; | &lt;span&gt;&amp;quot;no&amp;quot;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Have fun &lt;img src=&quot;http://blog.tmorris.net/wp-includes/images/smilies/icon_wink.gif&quot; alt=&quot;;)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;</content>
		<author>
			<name>Tony Morris</name>
			<uri>http://blog.tmorris.net</uri>
		</author>
		<source>
			<title type="html">λ Tony’s blog λ</title>
			<subtitle type="html">The weblog of Tony Morris</subtitle>
			<link rel="self" href="http://blog.tmorris.net/feed/"/>
			<id>http://blog.tmorris.net/feed/</id>
			<updated>2008-10-31T22:20:34+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Bloom Filters in Scala (and all the fun that they bring)</title>
		<link href="http://www.codecommit.com/blog/scala/bloom-filters-in-scala"/>
		<id>http://www.codecommit.com/blog/scala/bloom-filters-in-scala</id>
		<updated>2008-10-13T07:00:00+00:00</updated>
		<content type="html">&lt;p&gt;This is a post I have been meaning to write for quite some time.&amp;#160; Despite being an &lt;a href=&quot;http://www.javalobby.org/java/forums/t101687.html&quot;&gt;officially excommunicated&lt;/a&gt; former-member of the Ruby community, I still like to keep up on the latest developments.&amp;#160; A few months ago, my &lt;em&gt;&lt;a href=&quot;http://www.rubyinside.com/&quot;&gt;Ruby Inside&lt;/a&gt;&lt;/em&gt; feed produced an interesting post introducing a new library by Peter Cooper (the author of &lt;em&gt;Ruby Inside&lt;/em&gt;).&amp;#160; Unlike the most &amp;#8220;new&amp;#8221; Ruby libraries which are most often just bad clones of Rails snibblets, Peter&amp;#8217;s &lt;em&gt;&lt;a href=&quot;http://www.rubyinside.com/whatlanguage-ruby-language-detection-library-1085.html&quot;&gt;WhatLanguage&lt;/a&gt;&lt;/em&gt; seemed to be quite unique and interesting.&amp;#160; For the first time in years, I was reading about an innovation in Ruby-land which actually sounded quite exciting.&amp;#160; A good feeling to be sure.&lt;/p&gt;
&lt;p&gt;In a nutshell, &lt;em&gt;WhatLanguage &lt;/em&gt;(&lt;a href=&quot;http://github.com/peterc/whatlanguage/tree/master&quot;&gt;project page&lt;/a&gt; at GitHub) is a statistical language identification API which analyses arbitrary input &lt;code&gt;String&lt;/code&gt;(s), scoring them against a set of built-in languages (including English, French, Spanish, Russian, and others).&amp;#160; Add to that a little bit of meta-programming magic and the possibilities are eye-catching to say the least:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;ruby&quot;&gt;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;'whatlanguage'&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;'Here is some text to identify'&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;language&lt;/span&gt;       &lt;span&gt;# =&amp;gt; :english&lt;/span&gt;
&lt;span&gt;'¿Hola, pero donde está su pelo?'&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;language&lt;/span&gt;     &lt;span&gt;# =&amp;gt; :spanish&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To be honest, I&amp;#8217;m not sure what practical application I would have for such a library, but it sure looks like fun!&amp;#160; :-)&amp;#160; Under the surface, the implementation is deceptively simple.&amp;#160; &lt;em&gt;WhatLanguage&lt;/em&gt; bundles a set of words for each language it supports.&amp;#160; The implementation then searches these sets for each word in the string, aggregating a score for each language depending on whether or not the word was found.&amp;#160; If exactly one language has a higher score than the others once the end of the string is reached, it is &amp;#8220;declared the winner&amp;#8221; and returned as a result.&amp;#160; Otherwise, the analysis is undecided and &lt;code&gt;nil&lt;/code&gt; is returned.&amp;#160; Simple, right?&lt;/p&gt;
&lt;p&gt;The tricky part is somehow storing and searching those gigantic language word sets in an efficient manner.&amp;#160; As it turns out, this isn&amp;#8217;t so easy.&amp;#160; Just stop and consider the number of words which exist in your native tongue.&amp;#160; Unless you speak a very strange, primarily-tonal language, the number is likely in the upper hundreds of thousands.&amp;#160; Just going off of Peter&amp;#8217;s word lists, Russian is the real trouble maker, weighing in with a nearly &lt;em&gt;one million&lt;/em&gt; word vocabulary.&amp;#160; Any attempt to store that much data would require megabytes of memory and several &lt;em&gt;minutes&lt;/em&gt; to process, even on a fast machine.&amp;#160; Any sort of hash set is completely out of the question due to the nature of contiguous memory allocation, but can you imagine trying to perform a search traversal on a tree with almost a million nodes?&amp;#160; Obviously, a more effective solution is required.&lt;/p&gt;
&lt;h3&gt;Probabilistic Sets&lt;/h3&gt;
&lt;p&gt;So far we have been focusing our imaginary efforts on data structures which guarantee 100% accuracy and full reversibility.&amp;#160; That is to say, data structures which allow you to get out what you put in and which ensure that if something is &amp;#8220;in&amp;#8221; it will be found and if something is &amp;#8220;out&amp;#8221; it will not.&amp;#160; After all, is a data structure without these guarantees really all that useful?&lt;/p&gt;
&lt;p&gt;As it turns out, the answer is &amp;#8220;yes&amp;#8221;.&amp;#160; Consider a standard hash set as an example.&amp;#160; Sets make absolutely no guarantee about the ordering of their elements.&amp;#160; If you attempt to iterate over a set, you will eventually reach everything inside, but you cannot rely on a certain element coming before the others.&amp;#160; Of course, the advantage we gain by making this trade-off is &lt;a href=&quot;http://en.wikipedia.org/wiki/Constant_time&quot;&gt;constant time&lt;/a&gt; searching by item identity.&amp;#160; Lists cannot achieve this performance, neither can arrays.&amp;#160; If you want to search either one of these structures, you must look through every element from start to finish.&amp;#160; So with hash sets, we have effectively traded a fundamental guarantee about our data for efficiency in some other respect.&lt;/p&gt;
&lt;p&gt;The same is true for probabilistic sets.&amp;#160; We don&amp;#8217;t actually need &lt;em&gt;all&lt;/em&gt; of the properties of a set to implement &lt;em&gt;WhatLanguage&lt;/em&gt;.&amp;#160; For example, we don&amp;#8217;t need to actually retrieve a word from our dictionary, we only need to discover whether or not that word is in the set.&amp;#160; In fact, we really only need our data structure to have two important properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lightning fast boolean searches (does the set contain this element?) &lt;/li&gt;
&lt;li&gt;Minimal memory footprint &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hash sets can make the first guarantee, but as we have already noticed, they don&amp;#8217;t really require any less memory than just storing everything in an array.&amp;#160; Since we can&amp;#8217;t afford one million words-worth of memory per language, we need to come up with some way of storing information about the presence of an element without retaining the data it represents.&amp;#160; In order to do this, we have to make one important sacrifice: accuracy.&lt;/p&gt;
&lt;p&gt;We basically need to accept the fact that our data structure may sometimes return inaccurate results.&amp;#160; As it turns out though, this is just fine.&amp;#160; Remember, we&amp;#8217;re scoring languages one token at a time; an incorrect answer now and again isn&amp;#8217;t going to kill us.&amp;#160; Given a large enough input string, a minimal percentage of inaccuracy will literally be lost in the noise.&lt;/p&gt;
&lt;p&gt;As it turns out, there already exists a very old technique for accomplishing exactly these requirements.&amp;#160; &lt;a href=&quot;http://en.wikipedia.org/wiki/Bloom_filter&quot;&gt;Bloom filters&lt;/a&gt; have been around since the beginning of time (or at least the 1980s), but unfortunately very few developers are aware of them.&amp;#160; In a nutshell, they precisely satisfy all of the needs we just finished enumerating.&amp;#160; They provide true (not amortized) constant-time searches and will consistently return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; for a given element, depending on whether or not the value is in the set.&amp;#160; Occasionally they will give false positives (claiming that an element is in the set when in fact it is not), but never false negatives.&amp;#160; This property is extremely useful in many applications, but it turns out that this is even more than we need for &lt;em&gt;WhatLanguage&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Most importantly though, bloom filters are extremely compact in memory.&amp;#160; Rather than storing an entire value, they &lt;em&gt;hash&lt;/em&gt; every element to one or (usually) more indexes in an array of &lt;em&gt;bits&lt;/em&gt; (0 or 1).&amp;#160; In an optimal bloom filter guaranteeing no false positives, each element would correspond to precisely &lt;em&gt;k&lt;/em&gt; bits of memory (where &lt;em&gt;k&lt;/em&gt; is the number of hash functions, usually in the vicinity of 3 or 4).&amp;#160; Once this hashing is complete, the value itself may be discarded.&amp;#160; Thus, assuming an optimal bloom filter with 3 hash functions, the storage requirements for one million words would only be 375 KB of memory.&amp;#160; Compare this to the &lt;em&gt;8 MB&lt;/em&gt; required just to store the &lt;em&gt;pointers&lt;/em&gt; to each of the words, much less the values themselves!&amp;#160; If we include the underlying character values, we start pushing closer to 20 MB.&lt;/p&gt;
&lt;p&gt;375 KB for a million elements is impressive, but bloom filters can actually do a lot better than that.&amp;#160; Remember, we agreed to accept some false positives.&amp;#160; It&amp;#8217;s easy to imagine how even an ideal bloom filter (such as the one we have been analyzing) could have &lt;em&gt;some&lt;/em&gt; inaccuracy, but if we&amp;#8217;re willing to live with a few more false positives, we can allow hash collisions and drop our memory requirements into the 200 KB range.&amp;#160; Not bad, considering how much data we&amp;#8217;re storing!&lt;/p&gt;
&lt;h4&gt;Bloom Filters&lt;/h4&gt;
&lt;p&gt;So how does the magic actually work?&amp;#160; We&amp;#8217;ve hinted at the implementation in our analysis of memory requirements, but we&amp;#8217;re still missing some important details.&amp;#160; Consider the following diagram (courtesy of Wikipedia):&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;http://upload.wikimedia.org/wikipedia/commons/a/ac/Bloom_filter.svg&quot;&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Bloom_filter.svg/649px-Bloom_filter.svg.png&quot; /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Under the surface, a bloom filter is just an array of &lt;code&gt;boolean&lt;/code&gt; values.&amp;#160; The length of the array is referred to as the &lt;em&gt;width&lt;/em&gt; of the bloom filter.&amp;#160; When the filter is empty, all of the array values are set to &lt;code&gt;false&lt;/code&gt;.&amp;#160; To insert an element, we compute &lt;em&gt;k&lt;/em&gt; different hash indexes in the array and set them all to &lt;code&gt;true&lt;/code&gt;.&amp;#160; The real beauty of the data structure is the manner in which we handle collisions: we don&amp;#8217;t worry about it.&amp;#160; Whenever one (or more) of the hash functions returns an index which is already &lt;code&gt;true&lt;/code&gt;, we simply leave that index as-is and move on.&amp;#160; Thus, the procedure for inserting an element into a &amp;#8220;full&amp;#8221; bloom filter is precisely the same as inserting into an empty one: set all of the hash indexes to &lt;code&gt;true&lt;/code&gt;.&amp;#160; In a sense, bloom filters can never be full, they just get less and less accurate.&lt;/p&gt;
&lt;p&gt;Bloom filters define only one operation other than insertion: searching.&amp;#160; To determine whether or not a value is in the set, we run all of our hash functions and find the indexes to which it corresponds.&amp;#160; If &lt;em&gt;all&lt;/em&gt; of these indexes are &lt;code&gt;true&lt;/code&gt;, then we can assume that the value is indeed in the set.&amp;#160; Conversely, if any one of indexes is &lt;code&gt;false&lt;/code&gt;, then the value cannot be in the set since we would have set that value to &lt;code&gt;true&lt;/code&gt; upon insertion.&lt;/p&gt;
&lt;p&gt;It is important to note that removal is &lt;em&gt;not&lt;/em&gt; supported by bloom filters.&amp;#160; Intuitively we could just take the value to be removed, calculate its hash indexes and then set the corresponding elements to &lt;code&gt;false&lt;/code&gt;.&amp;#160; However, if any other values also hash to even one of those locations, we will be effectively removing it from the bloom filter &amp;#8220;by accident&amp;#8221;.&amp;#160; Subsequent searches for that value will hash to the index which we erroneously set to &lt;code&gt;false&lt;/code&gt;, resulting in a false negative on the search (saying that an element is &lt;em&gt;not&lt;/em&gt; in the set when in fact it is).&amp;#160; Fortunately for us, &lt;em&gt;WhatLanguage&lt;/em&gt; only requires insertion and searching for values, removal is not on the agenda.&lt;/p&gt;
&lt;h3&gt;Scala Implementation&lt;/h3&gt;
&lt;p&gt;Well, this has probably been a nostalgic (for those of you who enjoyed your university days) stroll through the land of data structure theory, but we&amp;#8217;re still lacking one critical factor: a concrete implementation.&amp;#160; Bloom filters don&amp;#8217;t sound that complicated on paper, but to do anything useful with them we&amp;#8217;re going to need some code.&lt;/p&gt;
&lt;p&gt;Before we dive in, we might want to define some more precise requirements for our implementation.&amp;#160; We&amp;#8217;re writing this in Scala, so it would be nice to implement bloom filters as a functional data structure.&amp;#160; I&amp;#8217;m not going to get into all the benefits of immutable data structures; suffice it to say, I really think that they&amp;#8217;re the only way to go for most serious applications.&amp;#160; Unfortunately, in order to do this, we&amp;#8217;re going to need some sort of immutable, array-like data structure under the surface which provides random access in constant time.&amp;#160; &lt;a href=&quot;http://www.codecommit.com/blog/scala/implementing-persistent-vectors-in-scala/&quot;&gt;Sound familiar?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is actually where the whole saga of persistent vectors in Scala found its roots.&amp;#160; The first time I tried to implement a functional bloom filter in Scala I made use of a conventional array under the surface with copy-on-write semantics.&amp;#160; As you can imagine, this is hideously inefficient in both space and time.&amp;#160; In order to solve the problem, I had to implement a data structure which was just as efficient for reading and writing, but which also shared structure with subsequent versions.&amp;#160; Now, two months later, I&amp;#8217;ve borrowed just such a design from Clojure and created a first-class implementation in Scala.&lt;/p&gt;
&lt;p&gt;With a persistent vector now &lt;a href=&quot;http://www.codecommit.com/blog/misc/implementing-persistent-vectors-in-scala/final/Vector.scala&quot;&gt;at our disposal&lt;/a&gt;, we can easily implement a persistent bloom filter by using a vector to represent our boolean indexes.&amp;#160; Every time we perform an insertion, we will &amp;#8220;modify&amp;#8221; the relevant indexes, creating a new instance of the vector.&amp;#160; This vector can then be used in our &amp;#8220;modified&amp;#8221; bloom filter, returned as a new instance of our container class.&amp;#160; Since persistent vectors share unmodified structure between versions, so does our bloom filter.&amp;#160; All of the hard work of efficient immutability is already done for us, we just need to implement a thin facade.&amp;#160; We start out by defining the class skeleton:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;import&lt;/span&gt; BloomSet._
&amp;nbsp;
&lt;span&gt;class&lt;/span&gt; BloomSet&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;A&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;val&lt;/span&gt; size: &lt;span&gt;Int&lt;/span&gt;, &lt;span&gt;val&lt;/span&gt; k: &lt;span&gt;Int&lt;/span&gt;, 
                           &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; contents: Vector&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;A&lt;span&gt;&amp;#41;&lt;/span&gt;=&amp;gt;Boolean&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; width = contents.&lt;span class=&quot;me1&quot;&gt;length&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;width: &lt;span&gt;Int&lt;/span&gt;, k: &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, k, &lt;span&gt;alloc&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;width&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;object&lt;/span&gt; BloomSet &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;alloc&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;size: &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; until size&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;foldLeft&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;Vector&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;c, i&lt;span&gt;&amp;#41;&lt;/span&gt; =&amp;gt; c + &lt;span&gt;false&lt;/span&gt; &lt;span&gt;&amp;#125;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We&amp;#8217;ll keep all of our utility functions in the companion object.&amp;#160; There&amp;#8217;s really no need to put them in the main class, and the JVM is able to optimize dispatch to static members to a slightly higher degree than it can instance members (&lt;code&gt;invokestatic&lt;/code&gt;).&amp;#160; Technically, we don&amp;#8217;t really &lt;em&gt;need&lt;/em&gt; the &lt;code&gt;alloc&lt;/code&gt; function, it just hides some of the boiler-plate involved in initializing a vector to a certain length.&amp;#160; Note that this operation is extremely fast, even for high values of &lt;em&gt;width&lt;/em&gt;.&amp;#160; Despite the fact that we are creating a huge number of &lt;code&gt;Vector&lt;/code&gt; objects, very little memory is actually wasted.&amp;#160; Even at this early stage in the implementation, the advantages of persistence are evident.&lt;/p&gt;
&lt;h4&gt;A Little Math&lt;/h4&gt;
&lt;p&gt;You&amp;#8217;ll notice that our bloom filter has three major properties: &lt;em&gt;size, k&lt;/em&gt;, and &lt;em&gt;width&lt;/em&gt;.&amp;#160; As previously mentioned, &lt;em&gt;k&lt;/em&gt; is the number of hash functions to be used, while &lt;em&gt;width&lt;/em&gt; is the length of the array used to store the boolean values.&amp;#160; These values have to be user-configurable because different applications will call for different optimizations.&amp;#160; For example, implementing &lt;em&gt;WhatLanguage&lt;/em&gt; requires the storage of almost a million elements per set.&amp;#160; Obviously we would not want to attempt to use a bloom filter which only had a &lt;em&gt;width&lt;/em&gt; of (say) 200.&amp;#160; This wouldn&amp;#8217;t cause any errors per se (remember, bloom filters are never &amp;#8220;full&amp;#8221;), but the accuracy of such a filter would be almost nil.&amp;#160; With a million elements all hashed into a mere 200 indexes, it is likely that that every single index would have a value of &lt;code&gt;true&lt;/code&gt;.&amp;#160; Such a bloom filter would return &lt;code&gt;true&lt;/code&gt; when searching for &lt;em&gt;any&lt;/em&gt; value, including those which were not inserted.&amp;#160; We said we would tolerate some false positives, but we still want the results to be meaningful.&amp;#160; Since the &lt;em&gt;width&lt;/em&gt; of a bloom filter cannot be changed once data is inserted (at least, not without &amp;#8220;losing&amp;#8221; data), the user must be able to decide in advance how much space will be required and then instantiate &lt;code&gt;BloomSet&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;p&gt;The value of &lt;em&gt;k&lt;/em&gt; is an even more interesting proposition.&amp;#160; The intuition is that the larger our value of &lt;em&gt;k&lt;/em&gt; (thus, the more hash functions we use), the greater the accuracy of our bloom filter and the fewer false positives we will return.&amp;#160; This is technically true when the bloom filter does not contain very many elements, but as more and more values are inserted, higher values of &lt;em&gt;k&lt;/em&gt; become problematic.&amp;#160; Wikipedia has an &lt;a href=&quot;http://en.wikipedia.org/wiki/Bloom_filter#Probability_of_false_positives&quot;&gt;excellent (and extremely readable) mathematical analysis&lt;/a&gt; of this and other properties of bloom filters.&amp;#160; As it turns out, the optimal value for &lt;em&gt;k&lt;/em&gt; (one which will yield the fewest false positives) can be computed by the following expression (where &lt;em&gt;m&lt;/em&gt; is the &lt;em&gt;width&lt;/em&gt; and &lt;em&gt;n&lt;/em&gt; is the &lt;em&gt;size&lt;/em&gt;, or the number of elements contained in the filter):&lt;/p&gt;
&lt;img src=&quot;http://www.codecommit.com/blog/wp-content/cache/tex_c7b42eab1ffa54edfddb2c71ab78c5b8.png&quot; class=&quot;math&quot; alt=&quot;k = \mbox{ln}(2) \; \frac{m}{n}&quot; /&gt;
&lt;p&gt;For the sake of quick-computation, this is essentially equivalent to:&lt;/p&gt;
&lt;img src=&quot;http://www.codecommit.com/blog/wp-content/cache/tex_db372e804f28219c4fc56b272a100a5d.png&quot; class=&quot;math&quot; alt=&quot;k \approx \frac{9m}{13n}&quot; /&gt;
&lt;p&gt;The equivalence isn&amp;#8217;t precise (logarithms are almost always irrational), but since we&amp;#8217;re already rounding the result to the nearest integer, we don&amp;#8217;t need to be too concerned.&lt;/p&gt;
&lt;p&gt;While it would be nice if we could just auto-magically set &lt;em&gt;k&lt;/em&gt; to the optimum value and be done with it, that just isn&amp;#8217;t the case.&amp;#160; Like &lt;em&gt;width&lt;/em&gt;, &lt;em&gt;k&lt;/em&gt; cannot be changed after data has been inserted.&amp;#160; Unfortunately, its optimum value is dependent on the number of items which will eventually be in the set.&amp;#160; Since we don&amp;#8217;t really &amp;#8220;know&amp;#8221; this value within the data structure until after the insertions are complete, there is no way for us to self-optimize.&amp;#160; To provide maximum configurability, we need to allow this value to be set by the API consumer on a case-by-case basis.&lt;/p&gt;
&lt;p&gt;As an interesting aside, we can actually compute the accuracy of a bloom filter on a scale from 0 to 1 given values for &lt;em&gt;width&lt;/em&gt;, &lt;em&gt;k&lt;/em&gt; and &lt;em&gt;size&lt;/em&gt;.&amp;#160; In this case, accuracy is defined as the odds that a search result is indeed accurate (the chance of it &lt;em&gt;not&lt;/em&gt; being a false positive).&amp;#160; Wikipedia gives the following expression for this accuracy:&lt;/p&gt;
&lt;img src=&quot;http://www.codecommit.com/blog/wp-content/cache/tex_5ee2e0831537f5d07d81eadcf7f5020e.png&quot; class=&quot;math&quot; alt=&quot;1 - (1 - e^{-kn / m})^k&quot; /&gt;
&lt;p&gt;Thanks to the marvels of approximation, this is a fairly efficient computation on modern platforms.&amp;#160; Translated into Scala, it looks something like this:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;lazy&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; accuracy = &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; exp = &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;k:&lt;span&gt;Double&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; * size&lt;span&gt;&amp;#41;&lt;/span&gt; / width
  &lt;span&gt;val&lt;/span&gt; probability = Math.&lt;span&gt;pow&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; - Math.&lt;span&gt;exp&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;-exp&lt;span&gt;&amp;#41;&lt;/span&gt;, k&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
  1d - probability
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;Core Functionality&lt;/h4&gt;
&lt;p&gt;As interesting as this minor detour has been, we still haven&amp;#8217;t arrived at a working implementation of the bloom filter data structure.&amp;#160; We have the basic structure in place, but we still need to implement the two core operations: insert and search, rendered in Scala as &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;contains&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;def&lt;/span&gt; +&lt;span&gt;&amp;#40;&lt;/span&gt;e: A&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; BloomSet&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;A&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;size + &lt;span&gt;1&lt;/span&gt;, k, &lt;span&gt;add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;contents&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;e&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; &lt;span&gt;contains&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;e: A&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; until k&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;foldLeft&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;acc, i&lt;span&gt;&amp;#41;&lt;/span&gt; =&amp;gt; 
    acc &amp;amp;&amp;amp; &lt;span&gt;contents&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;e, i, width&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; 
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;contents: Vector&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;e: &lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;var&lt;/span&gt; back = contents
&amp;nbsp;
  &lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;i &amp;lt;- &lt;span&gt;0&lt;/span&gt; until k&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    back = &lt;span&gt;back&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;e, i, width&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  back
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Feels sort of anti-climactic doesn&amp;#8217;t it?&amp;#160; After all that analysis, we find that it is possible to implement the essence of a bloom filter in less than 17 lines of code.&amp;#160; Technically, I probably could trim this down to more like 8 lines, but this isn&amp;#8217;t an exercise in Scala golf.&amp;#160; These three methods are just the materialization of all of the hand-wavy descriptions that we&amp;#8217;ve spent the last five pages working through.&amp;#160; Each time we insert an element, we calculate &lt;em&gt;k&lt;/em&gt; different hash values and set the appropriate vector indexes to true.&amp;#160; To find that element, we calculate the same &lt;em&gt;k&lt;/em&gt; hashes and ensure that all of the indexes have an appropriate boolean value.&lt;/p&gt;
&lt;h4&gt;Hashing&lt;/h4&gt;
&lt;p&gt;Those of you who are actually &lt;em&gt;reading&lt;/em&gt; the code snippets rather than just blindly trusting my veracity will probably notice that I&amp;#8217;ve omitted a fairly important function from the above sample; specifically: &lt;code&gt;hash&lt;/code&gt;.&amp;#160; Somehow, we need to define a function which will simulate the existence of a potentially unlimited number of hash functions.&amp;#160; Based on our usage of this function, we need to be able to grab a hash value for a given value and function index, restricted to a given &lt;em&gt;width&lt;/em&gt;.&amp;#160; This is not a trivial problem.&lt;/p&gt;
&lt;p&gt;As a good developer, you should already be trying to think up ways to reduce the code involved in implementing these requirements.&amp;#160; I mean, we could potentially just dream up a few dozen &lt;em&gt;different&lt;/em&gt; hash functions with a fairly wide distribution of results.&amp;#160; However, I don&amp;#8217;t know about you, but I really don&amp;#8217;t have that much imagination.&amp;#160; I have a hard enough time developing just &lt;em&gt;one&lt;/em&gt; solid hash function, much less dozens.&amp;#160; What&amp;#8217;s more, if each hash function corresponds with a different method, then we can&amp;#8217;t really scale the number of hash functions to any integer &lt;em&gt;k&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A better approach would be to create a single hash function and then skew its value &lt;em&gt;n&lt;/em&gt; times for every &lt;em&gt;n&lt;/em&gt; between 0 and &lt;em&gt;k&lt;/em&gt;.&amp;#160; Like most things that have to do with hashing, it&amp;#8217;s cheating, but providing we do our job right, it should give us a fairly decent way of computing the required &lt;em&gt;k&lt;/em&gt; hash functions.&amp;#160; Of course, the key phrase there is &amp;#8220;do our job right&amp;#8221;.&amp;#160; We need to make sure that we skew the initial hash value sufficiently for each successive hash, otherwise successive hash functions might get &amp;#8220;stuck in a groove&amp;#8221;.&amp;#160; For example, let&amp;#8217;s assume that each successive hash function is equivalent to the previous hash + 2.&amp;#160; If we then inserted two elements into the bloom filter with &lt;em&gt;k&lt;/em&gt; = 3, there would be the potential that the hash(0) for the first element would be precisely 2 greater than the hash(0) for the second.&amp;#160; If this is the case, then hash(1) for the second would equal hash(0) for the first.&amp;#160; Thus, the first and second elements would collide on two out of three indexes.&amp;#160; Not exactly an optimal distribution.&lt;/p&gt;
&lt;p&gt;To avoid this problem, we should be sure to skew the hash value by a different amount for each hash function.&amp;#160; A convenient way of doing this is to use the number of iterations, or the index of the particular hash function.&amp;#160; To further improve the distribution, we will also use the bitwise XOR operation rather than simple addition.&amp;#160; It&amp;#8217;s not really intuitively obvious, but XOR is mathematically far superior for hashing and just as cheap in terms of processor cycles.&amp;#160; Put it all together, and the implementation looks something like this:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;hash&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;e: &lt;span&gt;Any&lt;/span&gt;, iters: &lt;span&gt;Int&lt;/span&gt;, bounds: &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;: &lt;span&gt;Int&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
  Math.&lt;span&gt;abs&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;iters == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; e.&lt;span class=&quot;me1&quot;&gt;hashCode&lt;/span&gt; 
    &lt;span&gt;else&lt;/span&gt; iters ^ &lt;span&gt;hash&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;e, iters - &lt;span&gt;1&lt;/span&gt;, bounds&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;&amp;#41;&lt;/span&gt; % bounds
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The final bit of math in this function mods our skewed hash value with the given bounds.&amp;#160; Whenever we call hash, we always pass the &lt;em&gt;width&lt;/em&gt; of the bloom filter.&amp;#160; This is a trick that you&amp;#8217;ll see a lot in any hash-based data structure.&amp;#160; Essentially, we&amp;#8217;re just mapping our hash value into the required domain.&amp;#160; Hash values can be anything between -2&lt;sup&gt;31&lt;/sup&gt; and 2&lt;sup&gt;31&lt;/sup&gt; - 1, but our vector indexes can only be between 0 and &lt;em&gt;width &lt;/em&gt;- 1.&amp;#160; Just a rule of thumb, but any time you have a problem where you must &amp;#8220;map values from a large domain to a more restricted one&amp;#8221;, mod is generally the correct approach.&lt;/p&gt;
&lt;p&gt;Observant readers will notice that our implementation of &lt;code&gt;hash&lt;/code&gt; is a little inefficient.&amp;#160; Actually, it&amp;#8217;s worse than just a &amp;#8220;little&amp;#8221; inefficient: it&amp;#8217;s downright terrible.&amp;#160; Remember that we have to call this method once for every integer &lt;em&gt;n&lt;/em&gt; between 0 and &lt;em&gt;k&lt;/em&gt;.&amp;#160; This isn&amp;#8217;t so bad, since &lt;em&gt;k&lt;/em&gt; is usually comparatively small, but the real problem is our sneaky use of recursion within &lt;code&gt;hash&lt;/code&gt;.&amp;#160; The time complexity of &lt;code&gt;hash&lt;/code&gt; is precisely &lt;em&gt;O(n)&lt;/em&gt;, where &lt;em&gt;n&lt;/em&gt; is the number of iterations.&amp;#160; Once you factor this in with the number of times we call this function and it is easy to see how the total complexity of computing &lt;em&gt;k&lt;/em&gt; hash values is actually &lt;em&gt;O(k&lt;sup&gt;2&lt;/sup&gt;).&lt;/em&gt;&amp;#160; Thus, for &lt;em&gt;k &lt;/em&gt;= 4, we actually call &lt;code&gt;hash&lt;/code&gt; 16 times!&amp;#160; You can imagine how this could get very problematic for higher values of &lt;em&gt;k&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Technically, we could rewrite &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;contains&lt;/code&gt; to compute the hash values incrementally from the bottom up.&amp;#160; This would bring the hashing complexity down to &lt;em&gt;O(k)&lt;/em&gt;.&amp;#160; However, this is a bit more elegant in terms of code, not to mention easier to talk about in a modular fashion.&amp;#160; In practice, this inefficiency is only a problem for higher values of &lt;em&gt;k&lt;/em&gt; due to the fact that computing a single-step hash value is actually a very fast operation.&amp;#160; We will run into trouble in a little bit though when we attempt to optimize the bloom sets for shorter wordlists in &lt;em&gt;WhatLanguage&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Serialization&lt;/h4&gt;
&lt;p&gt;One of the important requirements of &lt;em&gt;WhatLanguage&lt;/em&gt; that we haven&amp;#8217;t really touched on so far is the ability to store freeze-dried bloom filters on disk and then suck them back into memory quickly and efficiently.&amp;#160; If you think about it, this requirement only makes sense since one of our primary motivations from the start was to avoid the burdens associated with huge word lists.&amp;#160; After all, if our in-memory representation of a language is only a few hundred kilobytes, shouldn&amp;#8217;t the on-disk representation be no worse?&amp;#160; Furthermore, if we had to parse a wordlist into a bloom filter every time we wanted to check a string&amp;#8217;s language, the performance imposition would be utterly prohibitive.&lt;/p&gt;
&lt;p&gt;Fortunately, there is a fairly obvious format which we could use to efficiently serialize an arbitrary bloom filter.&amp;#160; Recall that the real heart of a bloom filter is the array of &lt;code&gt;boolean&lt;/code&gt; flags, an array which can also be represented as an array of bits.&amp;#160; We could very easily select these bits eight at a time, combine them together using bit-shifting and produce a &lt;code&gt;byte&lt;/code&gt; value which could be sent to an &lt;code&gt;OutputStream&lt;/code&gt;.&amp;#160; Thus, a bloom filter with an array of &lt;code&gt;{true, false, true, true, true, false, false, true, false}&lt;/code&gt; would be stored as the following series of bits: &lt;code&gt;101110010&lt;/code&gt;, which in hexadecimal &lt;code&gt;byte&lt;/code&gt; form becomes &lt;code&gt;B9 00&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition to the array, we also need to store the &lt;em&gt;size&lt;/em&gt;, &lt;em&gt;k&lt;/em&gt;, and &lt;em&gt;width&lt;/em&gt; of the bloom filter, otherwise it will be impossible to find anything reliably in the deserialized result.&amp;#160; The Scala &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;load&lt;/code&gt; methods to accomplish this are verbose, but fairly straightforward:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;class&lt;/span&gt; BloomSet&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;A&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; ... &lt;span&gt;&amp;#123;&lt;/span&gt;
  ...
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;store&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;os: OutputStream&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    os.&lt;span&gt;write&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;convertToBytes&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;size&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    os.&lt;span&gt;write&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;convertToBytes&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;k&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    os.&lt;span&gt;write&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;convertToBytes&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;contents.&lt;span class=&quot;me1&quot;&gt;length&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;var&lt;/span&gt; num = &lt;span&gt;0&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; card = &lt;span&gt;0&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;b &amp;lt;- contents&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      num = &lt;span&gt;&amp;#40;&lt;/span&gt;num &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; | &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;b&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;    &lt;span&gt;// construct mask&lt;/span&gt;
      card += &lt;span&gt;1&lt;/span&gt;
&amp;nbsp;
      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;card == &lt;span&gt;8&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        os.&lt;span&gt;write&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;num&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
        num = &lt;span&gt;0&lt;/span&gt;
        card = &lt;span&gt;0&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;card != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      os.&lt;span&gt;write&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;num&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;object&lt;/span&gt; BloomSet &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; load&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;A&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;is: InputStream&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; buf = &lt;span&gt;new&lt;/span&gt; Array&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Byte&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    is.&lt;span&gt;read&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;buf&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; size = &lt;span&gt;convertToInt&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;buf&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    is.&lt;span&gt;read&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;buf&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; k = &lt;span&gt;convertToInt&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;buf&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    is.&lt;span&gt;read&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;buf&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; width = &lt;span&gt;convertToInt&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;buf&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;var&lt;/span&gt; contents = Vector&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;_ &amp;lt;- &lt;span&gt;0&lt;/span&gt; until &lt;span&gt;&amp;#40;&lt;/span&gt;width / &lt;span&gt;8&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; num = is.&lt;span&gt;read&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; buf: List&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; = &lt;span&gt;Nil&lt;/span&gt;
&amp;nbsp;
      &lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;_ &amp;lt;- &lt;span&gt;0&lt;/span&gt; until &lt;span&gt;8&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        buf = &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;num &amp;amp; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; :: buf
        num &amp;gt;&amp;gt;= &lt;span&gt;1&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
      contents = contents ++ buf
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;width % &lt;span&gt;8&lt;/span&gt; != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; buf: List&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; = &lt;span&gt;Nil&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; num = is.&lt;span&gt;read&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
      &lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;_ &amp;lt;- &lt;span&gt;0&lt;/span&gt; until &lt;span&gt;&amp;#40;&lt;/span&gt;width % &lt;span&gt;8&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        buf = &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;num &amp;amp; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; :: buf
        num &amp;gt;&amp;gt;= &lt;span&gt;1&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
      contents = contents ++ buf
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;new&lt;/span&gt; BloomSet&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;A&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;size, k, contents&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  ...
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;It is interesting to note that &lt;code&gt;store&lt;/code&gt; is a good example of what David MacIver meant when he says that &lt;a href=&quot;http://www.drmaciver.com/2008/08/functional-code-not-equal-good-code/&quot;&gt;functional code &lt;img title=&quot;image&quot; height=&quot;13&quot; alt=&quot;image&quot; src=&quot;http://www.codecommit.com/blog/wp-content/uploads/2008/10/image2.png&quot; width=&quot;18&quot; border=&quot;0&quot; /&gt; good code&lt;/a&gt;.&amp;#160; I actually tried to write this in a functional style to start with, but I gave up after it became horribly ugly (having four nested folds is never a good sign).&amp;#160; The imperative rendering (in this case) is concise and elegant, one of the many advantages of a hybrid languages like Scala.&lt;/p&gt;
&lt;p&gt;This particular format for rendering a bloom set is almost precisely identical to the format used by Peter Cooper&amp;#8217;s &lt;em&gt;&lt;a href=&quot;http://snippets.dzone.com/posts/show/4235&quot;&gt;Bloomin&amp;#8217; Simple&lt;/a&gt;&lt;/em&gt;, the library which sits underneath &lt;em&gt;WhatLanguage&lt;/em&gt;.&amp;#160; However, due to hashing differences it is impossible to use his serialized bloom filters in Scala or vice versa.&lt;/p&gt;

&lt;h3&gt;WhatLanguage in Scala&lt;/h3&gt;
&lt;p&gt;So now that we have our magic bloom filter ready and waiting, it&amp;#8217;s time to take a crack at Peter&amp;#8217;s fancy language identifier!&amp;#160; As it turns out, this is a lot simpler than the bloom filter itself.&amp;#160; Conceptually, all we have to do is load a different bloom filter for each language and then use that bloom filter to check each input string token individually.&amp;#160; For the sake of uniformity, we will convert all tokens to lower-case.&lt;/p&gt;
&lt;p&gt;Of course, before we can &lt;em&gt;load&lt;/em&gt; the language bloom filters we need to first &lt;em&gt;store&lt;/em&gt; them, and we cannot store a bloom filter before it is generated.&amp;#160; To that end, we need to create a simple Scala script (yes, a script) which reads in a file of newline-delimited words, inserts them all into an instance of &lt;code&gt;BloomSet&lt;/code&gt; and then stores the result in a corresponding language file.&amp;#160; Scala&amp;#8217;s scripting functionality is actually quite good, especially for a statically typed language, and really deserves some better recognition.&amp;#160; The complete language generator script is as follows:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;import&lt;/span&gt; com.&lt;span class=&quot;me1&quot;&gt;codecommit&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;collection&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;BloomSet&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; java.&lt;span class=&quot;me1&quot;&gt;io&lt;/span&gt;.&lt;span&gt;&amp;#123;&lt;/span&gt;BufferedOutputStream, File, FileOutputStream&lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; scala.&lt;span class=&quot;me1&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;Source&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;val&lt;/span&gt; WIDTH = &lt;span&gt;2000000&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; &lt;span&gt;computeK&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;lines: &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;:&lt;span&gt;Double&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; * WIDTH&lt;span&gt;&amp;#41;&lt;/span&gt; / &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;:&lt;span&gt;Double&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; * lines&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;intValue&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;file &amp;lt;- &lt;span&gt;new&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;wordlists&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;listFiles&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;!file.&lt;span class=&quot;me1&quot;&gt;isDirectory&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;file.&lt;span class=&quot;me1&quot;&gt;getName&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;==========================&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;val&lt;/span&gt; src = Source.&lt;span&gt;fromFile&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;file&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; count = src.&lt;span class=&quot;me1&quot;&gt;getLines&lt;/span&gt;.&lt;span&gt;foldLeft&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;i, line&lt;span&gt;&amp;#41;&lt;/span&gt; =&amp;gt; i + &lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;#125;&lt;/span&gt;
    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;  Word count: &amp;quot;&lt;/span&gt; + count&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;val&lt;/span&gt; optimalK = &lt;span&gt;computeK&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;count&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; init = &lt;span&gt;new&lt;/span&gt; BloomSet&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;WIDTH, Math.&lt;span&gt;min&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;optimalK, &lt;span&gt;100&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;  Optimal K: &amp;quot;&lt;/span&gt; + optimalK&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;  Actual K: &amp;quot;&lt;/span&gt; + init.&lt;span class=&quot;me1&quot;&gt;k&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;val&lt;/span&gt; set = src.&lt;span class=&quot;me1&quot;&gt;reset&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;getLines&lt;/span&gt;.&lt;span&gt;foldLeft&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;init&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; _ + _.&lt;span class=&quot;me1&quot;&gt;trim&lt;/span&gt; &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;  Accuracy: &amp;quot;&lt;/span&gt; + set.&lt;span class=&quot;me1&quot;&gt;accuracy&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;val&lt;/span&gt; os = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BufferedOutputStream&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt; &lt;span&gt;FileOutputStream&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;src/main/resources/lang/&amp;quot;&lt;/span&gt; + file.&lt;span class=&quot;me1&quot;&gt;getName&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    set.&lt;span&gt;store&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;os&lt;span&gt;&amp;#41;&lt;/span&gt;
    os.&lt;span&gt;close&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;I originally created this script using JRuby, thinking of course that it would be much easier to perform a simple, one-off task like this in a dynamically typed language.&amp;#160; Interestingly enough, the JRuby version was about twice as long and actually took dramatically longer to run.&amp;#160; By &amp;#8220;dramatically&amp;#8221; I mean on the order of &lt;em&gt;seventy times&lt;/em&gt; longer.&amp;#160; The above Scala script takes just over 30 seconds to run on my machine using the &lt;a href=&quot;http://github.com/peterc/whatlanguage/tree/master/wordlists&quot;&gt;wordlists from WhatLanguage&lt;/a&gt;&lt;em&gt;&lt;/em&gt;.&amp;#160; This stands in stark contrast to the 35 &lt;em&gt;minutes&lt;/em&gt; required for the JRuby script.&amp;#160; Both scripts use the same underlying data structure to perform all the work (&lt;code&gt;BloomSet&lt;/code&gt;), so it&amp;#8217;s really hard to claim that one implementation was fundamentally slower than the other.&amp;#160; In short: JRuby does not seem terribly well-suited for computationally-intensive tasks, even when most of that computation is taking place in Java-land.&amp;#160; Anyway&amp;#8230;&lt;/p&gt;
&lt;p&gt;This script is fairly straightforward.&amp;#160; The one interesting landmark is the fact that it actually makes two separate passes over the wordlist file.&amp;#160; The first pass just counts the number of lines, while the second pass reads the words individually, converts them to lower-case and stores them in the bloom filter.&amp;#160; This two-pass approach allows us to calculate the optimal value for &lt;em&gt;k&lt;/em&gt; in our bloom filter.&amp;#160; This contrasts with the Ruby implementation of &lt;em&gt;WhatLanguage&lt;/em&gt;, which just uses 3 as a global default (the &lt;em&gt;width&lt;/em&gt; is the same in both libraries).&amp;#160; According to my math, this per-language optimization actually ekes out an average 2-3% better accuracy in the bloom filters.&amp;#160; This means fewer false positives and nominally better language detection.&lt;/p&gt;
&lt;p&gt;I say &amp;#8220;nominally&amp;#8221; because such a miniscule improvement in bloom filter performance actually makes very little difference in the grand scheme of things.&amp;#160; Most strings are decidedly one language or another, meaning that results should be essentially identical between the two implementations.&amp;#160; Regardless, it&amp;#8217;s the thought that counts.&amp;#160; (right?)&lt;/p&gt;
&lt;p&gt;Just for the curious, the script produces the following output when run:&lt;/p&gt;
&lt;pre&gt;  dutch
  ==========================
    Word count: 222908
    Optimal K: 6
    Actual K: 6
    Accuracy: 0.986554232499401

  english
  ==========================
    Word count: 234936
    Optimal K: 5
    Actual K: 5
    Accuracy: 0.9827068384240777

  farsi
  ==========================
    Word count: 339747
    Optimal K: 4
    Actual K: 4
    Accuracy: 0.9408664843803285

  french
  ==========================
    Word count: 629569
    Optimal K: 2
    Actual K: 2
    Accuracy: 0.7817441534106517

  german
  ==========================
    Word count: 298729
    Optimal K: 4
    Actual K: 4
    Accuracy: 0.9590696917792074

  pinyin
  ==========================
    Word count: 399
    Optimal K: 3470
    Actual K: 100
    Accuracy: 1.0

  portuguese
  ==========================
    Word count: 386393
    Optimal K: 3
    Actual K: 3
    Accuracy: 0.9148904670664727

  russian
  ==========================
    Word count: 951830
    Optimal K: 1
    Actual K: 1
    Accuracy: 0.6213162918878307

  spanish
  ==========================
    Word count: 595946
    Optimal K: 2
    Actual K: 2
    Accuracy: 0.7984358472107859

  swedish
  ==========================
    Word count: 54818
    Optimal K: 25
    Actual K: 25
    Accuracy: 0.9999999755910407&lt;/pre&gt;
&lt;p&gt;I&amp;#8217;m not sure why &lt;a href=&quot;http://en.wikipedia.org/wiki/Pinyin&quot;&gt;Pinyin&lt;/a&gt; only has a vocabulary of 399 words, but that seems to be the way things are.&amp;#160; This means of course that we&amp;#8217;re storing barely 400 elements in a bloom filter with a &lt;em&gt;width&lt;/em&gt; of 2,000,000.&amp;#160; Needless to say, I wasn&amp;#8217;t surprised to see that the optimal &lt;em&gt;k&lt;/em&gt; was in the mid thousands.&amp;#160; Unfortunately, this is where our inefficient &lt;code&gt;hash&lt;/code&gt; implementation comes back to bite us.&amp;#160; I discovered that if I were to allow a &lt;em&gt;k&lt;/em&gt; value of 3470, even when only inserting 399 elements, the time required to process just the single language was upwards of 20 minutes.&amp;#160; This may have something to do with the fact that 3470&lt;sup&gt;2&lt;/sup&gt; is very, very large.&lt;/p&gt;
&lt;p&gt;To get around this problem, I cheat and cap the &lt;em&gt;k&lt;/em&gt; value at 100 in the script.&amp;#160; This still produces a computed accuracy of 100% in the bloom filter, and it takes much less time to process.&amp;#160; A fast &lt;code&gt;hash&lt;/code&gt; is actually even more important during lookups.&amp;#160; Considering that we have to check each token in a string against each and every supported language, a fast lookup is crucial to ensuring performance of the final product.&amp;#160; If it took even 10 ms to compute the hash of a single token when checking against the Pinyin language, the implementation would be completely unusable.&lt;/p&gt;
&lt;h4&gt;A Little API Design&lt;/h4&gt;
&lt;p&gt;Now that we have our word lists encoded as bloom filters, we can turn our attention to slightly more important problems; specifically: what do we want the API to look like?&amp;#160; I decided to base my Scala implementation primarily on Peter&amp;#8217;s Ruby API.&amp;#160; However, there is one small wrinkle in this plan: &lt;em&gt;WhatLanguage&lt;/em&gt; uses symbols for everything.&amp;#160; That&amp;#8217;s fine and in line with Ruby idioms, and technically we could use Scala symbols if we really wanted to, but Scala is a statically typed language with a lot of powerful idioms of its own.&amp;#160; It would be a lot more conventional if we found a type-safe way of representing the same concepts.&amp;#160; To that end, I decided to go with a similar (but not identical) approach as exemplified in the following code snippet:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;import&lt;/span&gt; com.&lt;span class=&quot;me1&quot;&gt;codecommit&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;lang&lt;/span&gt;._
&amp;nbsp;
&lt;span&gt;&amp;quot;Hello, this is a test&amp;quot;&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;language&lt;/span&gt;       &lt;span&gt;// =&amp;gt; english&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;val&lt;/span&gt; wl = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;WhatLanguage&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;english, french, spanish&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;val&lt;/span&gt; text = &lt;span&gt;&amp;quot;Bonjour, my name is Daniel. Estoy bien. Como estas? Êtes-vous ennuyer?&amp;quot;&lt;/span&gt;
&amp;nbsp;
wl.&lt;span&gt;processText&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;text&lt;span&gt;&amp;#41;&lt;/span&gt;   &lt;span&gt;// =&amp;gt; Map(English -&amp;gt; 4, French -&amp;gt; 5, Spanish -&amp;gt; 6)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The neat trick of the day is our use of static values in scope as a form of type-safe symbol.&amp;#160; We create a new instance of &lt;code&gt;WhatLanguage&lt;/code&gt;, passing it three instances of class &lt;code&gt;Language&lt;/code&gt; representing (oddly enough) the languages we wish it to use during the analysis.&amp;#160; We can also use &amp;#8220;&lt;code&gt;all&lt;/code&gt;&amp;#8221; as a shortcut for enumerating every supported language.&lt;/p&gt;
&lt;p&gt;Another cute little API feature is our use of the &lt;code&gt;lang&lt;/code&gt; &amp;#8220;package&amp;#8221; to bring everything into scope, including two implicit conversions and a small boat-load of language values.&amp;#160; This is made possible by the fact that &lt;code&gt;lang&lt;/code&gt; is not actually a package but a singleton object.&amp;#160; Even Scala does not allow values and functions as top-level elements in a package, but it does allow them within objects.&amp;#160; Our import at the head of the snippet is actually equivalent to the following bit of Java:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;java5&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; com.&lt;span class=&quot;me1&quot;&gt;codecommit&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;lang&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;*&lt;/span&gt;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;With all of this in mind, the rest of the library is fairly easy to create.&amp;#160; All we need to do is design an algorithm which splits an input string into tokens, loops over each one keeping track of how many tokens are matched by each language, and finally selects the highest-scoring language from the result and returns its corresponding static value.&amp;#160; As one would expect, this is easily accomplished:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;package&lt;/span&gt; com.&lt;span class=&quot;me1&quot;&gt;codecommit&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;import&lt;/span&gt; java.&lt;span class=&quot;me1&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;BufferedInputStream&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; com.&lt;span class=&quot;me1&quot;&gt;codecommit&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;collection&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;BloomSet&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;import&lt;/span&gt; scala.&lt;span class=&quot;me1&quot;&gt;collection&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;mutable&lt;/span&gt;.&lt;span&gt;ArrayBuffer&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;object&lt;/span&gt; lang &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; all &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;all&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; langs = &lt;span&gt;List&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;dutch, english, farsi, french, german, pinyin, 
                     portuguese, spanish, swedish&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;lazy&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; words = BloomSet&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; toString = &lt;span&gt;&amp;quot;All languages meta-variable&amp;quot;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;val&lt;/span&gt; dutch = &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;dutch&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; english = &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;english&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; farsi = &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;farsi&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; french = &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;french&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; german = &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;german&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; pinyin = &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;pinyin&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; portuguese = &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;portuguese&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; russian = &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;russian&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; spanish = &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;spanish&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; swedish = &lt;span&gt;Language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;swedish&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;implicit&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;conversion&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;str: &lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; language = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;WhatLanguage&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;all&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;str&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;getOrElse&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;implicit&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;languageToString&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;lang: Language&lt;span&gt;&amp;#41;&lt;/span&gt;: &lt;span&gt;String&lt;/span&gt; = lang.&lt;span class=&quot;me1&quot;&gt;toString&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Language private&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;lang&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;file: &lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;lazy&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; words = &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;val&lt;/span&gt; is = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;BufferedInputStream&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;getClass.&lt;span&gt;getResourceAsStream&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;/lang/&amp;quot;&lt;/span&gt; + file&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
      &lt;span&gt;try&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        BloomSet.&lt;span class=&quot;me1&quot;&gt;load&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;is&lt;span&gt;&amp;#41;&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt; &lt;span&gt;finally&lt;/span&gt; is.&lt;span&gt;close&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; toString = &lt;span&gt;file&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;toUpperCase&lt;/span&gt; + file.&lt;span&gt;substring&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;equals&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;other: &lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = other &lt;span&gt;match&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; lang: Language =&amp;gt; toString == lang.&lt;span class=&quot;me1&quot;&gt;toString&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; _ =&amp;gt; &lt;span&gt;false&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; hashCode = file.&lt;span class=&quot;me1&quot;&gt;hashCode&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;class&lt;/span&gt; &lt;span&gt;WhatLanguage&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;langs: Language*&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;language&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;str: &lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;val&lt;/span&gt; back = &lt;span&gt;new&lt;/span&gt; ArrayBuffer&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;Language&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;
      &lt;span&gt;var&lt;/span&gt; max = &lt;span&gt;0&lt;/span&gt;
&amp;nbsp;
      &lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;lang, score&lt;span&gt;&amp;#41;&lt;/span&gt; &amp;lt;- &lt;span&gt;processText&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;str&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;score &amp;gt; max&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
          back.&lt;span class=&quot;me1&quot;&gt;clear&lt;/span&gt;
&amp;nbsp;
          back += lang
          max = score
        &lt;span&gt;&amp;#125;&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;score == max&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
          back += lang
        &lt;span&gt;&amp;#125;&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;back.&lt;span class=&quot;me1&quot;&gt;length&lt;/span&gt; == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;Some&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;back&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;processText&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;str: &lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;val&lt;/span&gt; langs = &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;langs&lt;/span&gt;.&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;all&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; all.&lt;span class=&quot;me1&quot;&gt;langs&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;langs&lt;/span&gt;
      &lt;span&gt;val&lt;/span&gt; prime = langs.&lt;span&gt;foldLeft&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;Map&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;Language, &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; _&lt;span&gt;&amp;#40;&lt;/span&gt;_&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt; &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
      str.&lt;span&gt;split&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;span class=&quot;es0&quot;&gt;\s&lt;/span&gt;+&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;foldLeft&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;prime&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;map, token&lt;span&gt;&amp;#41;&lt;/span&gt; =&amp;gt;
        langs.&lt;span&gt;foldLeft&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;map&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;map, lang&lt;span&gt;&amp;#41;&lt;/span&gt; =&amp;gt;
          &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;lang.&lt;span class=&quot;me1&quot;&gt;words&lt;/span&gt;.&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;token.&lt;span class=&quot;me1&quot;&gt;toLowerCase&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
            &lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;lang&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;map&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;lang&lt;span&gt;&amp;#41;&lt;/span&gt; + &lt;span&gt;1&lt;/span&gt; 
          &lt;span&gt;&amp;#125;&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; map
        &lt;span&gt;&amp;#125;&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Well, it&amp;#8217;s been a fun and informative journey through the fertile land of bloom sets and simple statistical language analysis.&amp;#160; As usual, all of the source (and binaries) are available for download.&amp;#160; It&amp;#8217;s a bit of a shame, but I didn&amp;#8217;t get a chance to discuss a number of rather interesting features also available in my bloom filter implementation (such as concatenation of bloom filters).&lt;/p&gt;
&lt;p&gt;Bloom filters are quite interesting in and of themselves, and definitely a useful technique that every developer should keep in their back pocket.&amp;#160; Peter Cooper definitely merits kudos for his implementation of &lt;em&gt;WhatLanguage&lt;/em&gt; based on bloom filters, but despite the fact that I took the time to port it to Scala, I still don&amp;#8217;t see much practical benefit.&amp;#160; At any rate, the library is now available in Scala; hopefully someone else will find it more useful than I do!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codecommit.com/blog/misc/bloom-filters-in-scala/whatlanguage-0.1.0.jar&quot;&gt;Download whatlanguage&lt;/a&gt; (&lt;a href=&quot;http://www.codecommit.com/blog/misc/bloom-filters-in-scala/whatlanguage.zip&quot;&gt;sources&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codecommit.com/blog/misc/bloom-filters-in-scala/collection-0.1.0.jar&quot;&gt;Download collection library&lt;/a&gt; (&lt;a href=&quot;http://www.codecommit.com/blog/misc/bloom-filters-in-scala/collections.zip&quot;&gt;sources&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codecommit.com/blog/misc/bloom-filters-in-scala/BloomSet.scala&quot;&gt;Download BloomSet.scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codecommit.com/blog/misc/implementing-persistent-vectors-in-scala/final/Vector.scala&quot;&gt;Download Vector.scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
		<author>
			<name>Code Commit</name>
			<uri>http://www.codecommit.com/blog</uri>
		</author>
		<source>
			<title type="html">Code Commit » Scala</title>
			<subtitle type="html">(permanently in beta)</subtitle>
			<link rel="self" href="http://www.codecommit.com/blog/category/scala/feed"/>
			<id>http://www.codecommit.com/blog/category/scala/feed</id>
			<updated>2008-10-20T20:20:23+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Formal Language Processing in Scala, Solutions to Part 4</title>
		<link href="http://szeiger.de/blog/2008/10/12/formal-language-processing-in-scala-solutions-to-part-4/"/>
		<id>http://szeiger.de/?p=23</id>
		<updated>2008-10-12T15:55:34+00:00</updated>
		<content type="html">&lt;p&gt;Here is the solution to the exercise from &lt;a href=&quot;http://szeiger.de/blog/2008/09/20/formal-language-processing-in-scala-part-4/&quot;&gt;part 4&lt;/a&gt;.&lt;span id=&quot;more-23&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Whether you want to use binary or n-ary operators, the first step is always to add the new &amp;#8220;-&amp;#8221; operator to the list of delimiters:&lt;/p&gt;
&lt;div class=&quot;wp_syntax&quot;&gt;
&lt;div class=&quot;code&quot;&gt;
&lt;pre&gt;  lexical.delimiters += (&quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;(&quot;, &quot;)&quot;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;N-ary&lt;/h3&gt;
&lt;p&gt;We currently have two chained operators, &amp;#8220;+&amp;#8221; and &amp;#8220;*&amp;#8221;. Since &amp;#8220;+&amp;#8221; and &amp;#8220;-&amp;#8221; have the same precedence, we cannot simply add a separate chain for &amp;#8220;-&amp;#8221;. Adding the new operator to the parser production is straight-forward:&lt;/p&gt;
&lt;div class=&quot;wp_syntax&quot;&gt;
&lt;div class=&quot;code&quot;&gt;
&lt;pre&gt;  lazy val sum = product ~ ( ( (&quot;+&quot;|&quot;-&quot;) ~&gt; product)* )
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This, however, won&amp;#8217;t work for building the AST because we treat an &lt;em&gt;Add&lt;/em&gt; expression as a list of sub-expressions to be added without keeping the individual operator symbols. In order to make this work with two different operators, we can replace &lt;em&gt;Add&lt;/em&gt; with an &lt;em&gt;AddChain&lt;/em&gt; expression that contains a list of &lt;em&gt;AddChainOps&lt;/em&gt;. There are two concrete sub-types of &lt;em&gt;AddChain&lt;/em&gt; for &lt;em&gt;Add&lt;/em&gt; and &lt;em&gt;Subtract&lt;/em&gt; operators which contain the expression to be added or subtracted:&lt;/p&gt;
&lt;div class=&quot;wp_syntax&quot;&gt;
&lt;div class=&quot;code&quot;&gt;
&lt;pre&gt;  case class AddChain(ops: List[AddChainOp]) extends Expression

  sealed abstract class AddChainOp(expr: Expression)
  case class Add(expr: Expression) extends AddChainOp(expr)
  case class Subtract(expr: Expression) extends AddChainOp(expr)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;#8217;ve split up the &lt;em&gt;sum&lt;/em&gt; production to make it more readable with the new transformations:&lt;/p&gt;
&lt;div class=&quot;wp_syntax&quot;&gt;
&lt;div class=&quot;code&quot;&gt;
&lt;pre&gt;  lazy val sum = product ~ ( sumOp* ) ^^ {
    case e ~ Nil =&gt; e
    case e ~ l =&gt; AddChain(Add(e) :: l)
  }

  lazy val sumOp = &quot;+&quot; ~&gt; product ^^ Add |
    &quot;-&quot; ~&gt; product ^^ Subtract
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The first operand gets wrapped as an &lt;em&gt;Add&lt;/em&gt; object and the other ones as &lt;em&gt;Add&lt;/em&gt; or &lt;em&gt;Subtract&lt;/em&gt; depending on the operator. Note the use of &lt;em&gt;Add&lt;/em&gt; and &lt;em&gt;Subtract&lt;/em&gt; in &lt;em&gt;sumOp&lt;/em&gt; as function objects: &amp;#8220;^^ Add&amp;#8221; is a shortcut for &amp;#8220;^^ { e =&gt; Add(e) }&amp;#8221;, which can be expanded further to &amp;#8220;^^ { e =&gt; Add.apply(e) }&amp;#8221;.&lt;/p&gt;
&lt;p&gt;For interpreting the AST in the &lt;em&gt;compute&lt;/em&gt; method, we still do a left-fold, starting with 0, except now we have to examine the individual &lt;em&gt;AddChainOps&lt;/em&gt; to decide if we need to add or subtract:&lt;/p&gt;
&lt;div class=&quot;wp_syntax&quot;&gt;
&lt;div class=&quot;code&quot;&gt;
&lt;pre&gt;  def compute(e: Expression): Int = e match {
    ...
    case AddChain(ops) =&gt; ops.foldLeft(0) {
      case (z, Add(e)) =&gt; z + compute(e)
      case (z, Subtract(e)) =&gt; z - compute(e)
    }
  }
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Binary&lt;/h3&gt;
&lt;p&gt;The solution with binary operators is a lot simpler, with the only tricky part being the associativity. The &amp;#8220;+&amp;#8221; and &amp;#8220;-&amp;#8221; operators need to be left-associative (e.g. &amp;#8220;1-2-3&amp;#8243; is read as &amp;#8220;(1-2)-3)&amp;#8221; and not as &amp;#8220;1-(2-3)&amp;#8221;) but that cannot be expressed directly with a recursive-descent parser.&lt;/p&gt;
&lt;p&gt;First of all, we define the expression classes for the binary operators:&lt;/p&gt;
&lt;div class=&quot;wp_syntax&quot;&gt;
&lt;div class=&quot;code&quot;&gt;
&lt;pre&gt;  case class Add(left: Expression, right: Expression) extends Expression
  case class Subtract(left: Expression, right: Expression) extends Expression
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This allows for a very straight-forward interpreter:&lt;/p&gt;
&lt;div class=&quot;wp_syntax&quot;&gt;
&lt;div class=&quot;code&quot;&gt;
&lt;pre&gt;  def compute(e: Expression): Int = e match {
    ...
    case Add(left, right) =&gt; compute(left) + compute(right)
    case Subtract(left, right) =&gt; compute(left) - compute(right)
  }
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In order to construct the AST in the parser, we add &amp;#8220;-&amp;#8221; as shown above and change the &amp;#8220;~&gt;&amp;#8221; operator back to &amp;#8220;~&amp;#8221; so that we don&amp;#8217;t drop the parsed &amp;#8220;+&amp;#8221; or &amp;#8220;-&amp;#8221; token. That way we still get a list of operations (now including the operator symbol). We can then change the transformation to left-fold that list into the AST:&lt;/p&gt;
&lt;div class=&quot;wp_syntax&quot;&gt;
&lt;div class=&quot;code&quot;&gt;
&lt;pre&gt;  lazy val sum = product ~ ( ( (&quot;+&quot;|&quot;-&quot;) ~ product)* ) ^^ {
    case e ~ Nil =&gt; e
    case e ~ l =&gt; l.foldLeft(e) {
      case (z, &quot;+&quot; ~ p) =&gt; Add(z, p)
      case (z, &quot;-&quot; ~ p) =&gt; Subtract(z, p)
    }
  }
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There is a simpler way to do this which I will cover in part 5.&lt;/p&gt;</content>
		<author>
			<name>Stefan Zeiger</name>
			<uri>http://szeiger.de</uri>
		</author>
		<source>
			<title type="html">szeiger.de</title>
			<subtitle type="html">Stefan Zeiger's Software Development Weblog</subtitle>
			<link rel="self" href="http://feeds.feedburner.com/szeiger"/>
			<id>http://feeds.feedburner.com/szeiger</id>
			<updated>2008-10-12T20:31:15+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">tiscaf-0.1.1 - http server in Scala</title>
		<link href="http://www.scala-lang.org/node/337"/>
		<id>http://www.scala-lang.org/337 at http://www.scala-lang.org</id>
		<updated>2008-10-11T09:02:25+00:00</updated>
		<content type="html">&lt;p&gt;Andrew Gaydenko published tiscaf-0.1.1 - http server written in Scala: &lt;a rel=&quot;nofollow&quot; title=&quot;http://gaydenko.com/scala/tiscaf/httpd/&quot; href=&quot;http://gaydenko.com/scala/tiscaf/httpd/&quot; rel=&quot;nofollow&quot;&gt;http://gaydenko.com/scala/tiscaf/httpd&lt;/a&gt;. The software is written in Scala with no dependencies on external software, and is released under the LGPL licence.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.scala-lang.org/node/337&quot; target=&quot;_blank&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</content>
		<author>
			<name>scala-lang.org</name>
			<uri>http://www.scala-lang.org</uri>
		</author>
		<source>
			<title type="html">The Scala Programming Language</title>
			<link rel="self" href="http://www.scala-lang.org/rss.xml"/>
			<id>http://www.scala-lang.org/rss.xml</id>
			<updated>2008-11-01T20:20:46+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Local variables scope in HotSpot</title>
		<link href="http://blog.juma.me.uk/2008/10/11/local-variables-scope-in-hotspot/"/>
		<id>http://ijuma.wordpress.com/?p=30</id>
		<updated>2008-10-11T06:16:26+00:00</updated>
		<content type="html">&lt;div class=&quot;snap_preview&quot;&gt;&lt;br /&gt;&lt;p&gt;Assume the following code:&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;java&quot;&gt;

  public void foo() {
    C c = new C();
    bar(c.baz); // assume that baz does not reference c
  }
&lt;/pre&gt;
&lt;p&gt;I was under the impression that HotSpot would not garbage collect c before the local variable went out of scope although it is legally allowed to do so. I even heard of issues where unnecessary garbage was retained as a result (usual workarounds are to null the variable or to inline it).&lt;/p&gt;
&lt;p&gt;According to this &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=6721588&quot;&gt;bug report&lt;/a&gt; (Server JIT optimization can cause objects to go out of scope prematurely), the Server VM is actually able to GC the object before the local variable goes out of scope. It would be interesting to know if it can detect such cases reliably.&lt;/p&gt;
Posted in jvm&amp;nbsp;&amp;nbsp;&amp;nbsp;Tagged: garbage collection, hotspot, jit, jvm&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/ijuma.wordpress.com/30/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ijuma.wordpress.com/30/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godelicious/ijuma.wordpress.com/30/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/ijuma.wordpress.com/30/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gostumble/ijuma.wordpress.com/30/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/ijuma.wordpress.com/30/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godigg/ijuma.wordpress.com/30/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/ijuma.wordpress.com/30/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/goreddit/ijuma.wordpress.com/30/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/ijuma.wordpress.com/30/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://stats.wordpress.com/b.gif?host=blog.juma.me.uk&amp;blog=4860094&amp;post=30&amp;subd=ijuma&amp;ref=&amp;feed=1&quot; /&gt;&lt;/div&gt;</content>
		<author>
			<name>Ismael Juma</name>
			<uri>http://blog.juma.me.uk</uri>
		</author>
		<source>
			<title type="html">Ismael Juma</title>
			<link rel="self" href="http://blog.juma.me.uk/feed"/>
			<id>http://blog.juma.me.uk/feed</id>
			<updated>2008-10-25T13:00:33+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Scala 2.7.2 RC3</title>
		<link href="http://www.scala-lang.org/node/336"/>
		<id>http://www.scala-lang.org/336 at http://www.scala-lang.org</id>
		<updated>2008-10-10T14:43:20+00:00</updated>
		<content type="html">&lt;p&gt;Once again, we have a new release candidate for the next version of Scala: &lt;a href=&quot;http://www.scala-lang.org/downloads#release_candidate&quot;&gt;version&amp;nbsp;2.7.2.RC3&lt;/a&gt;. In this release candidate we fixed additional bugs, and we are now close to a final release. A new version of the Scala plugin for Eclipse is also included: you can update your installation via the Eclipse software update facility, using our &lt;a href=&quot;http://www.scala-lang.org/node/94&quot;&gt;update site&lt;/a&gt;. Scala 2.7.2.RC3 is available for download, as usual, from our &lt;a href=&quot;http://www.scala-lang.org/downloads&quot;&gt;Download Page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.scala-lang.org/node/336&quot; target=&quot;_blank&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</content>
		<author>
			<name>scala-lang.org</name>
			<uri>http://www.scala-lang.org</uri>
		</author>
		<source>
			<title type="html">The Scala Programming Language</title>
			<link rel="self" href="http://www.scala-lang.org/rss.xml"/>
			<id>http://www.scala-lang.org/rss.xml</id>
			<updated>2008-11-01T20:20:46+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Going into orbit</title>
		<link href="http://technically.us/code/x/going-into-orbit"/>
		<id>http://technically.us/code/x/going-into-orbit</id>
		<updated>2008-10-10T11:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Did you find a cool &lt;a href=&quot;http://www.processing.org/&quot;&gt;Processing&lt;/a&gt; sketch on the internet today and post it to reddit? Why not!? Well on Monday someone linked up this awesome &lt;a href=&quot;http://complexification.net/gallery/machines/orbitals/&quot;&gt;Orbitals&lt;/a&gt; simulation from 2004.&lt;/p&gt;


&lt;!--[if !IE]&gt; --&gt;










&lt;!--&lt;![endif]--&gt;















&lt;p&gt;
&lt;strong&gt;
This browser does not have a Java Plug-in.
&lt;br /&gt;
&lt;a href=&quot;http://java.sun.com/products/plugin/downloads/index.html&quot; title=&quot;Download Java Plug-in&quot;&gt;
Get the latest Java Plug-in here.
&lt;/a&gt;
&lt;/strong&gt;
&lt;/p&gt;



&lt;!--[if !IE]&gt; --&gt;
&lt;!--&lt;![endif]--&gt;
&lt;p class=&quot;break&quot;&gt;Oops! Sorry for crashing everybody&amp;#8217;s Ubuntu again. (It works fine on &lt;a href=&quot;http://technically.us/code/x/new-toy-new-toy-new-toy/&quot;&gt;this one&lt;/a&gt;.) But you know, there is this wonderful virtual machine available in most web browsers (not the one named after a vegetable drink / large combustion engine) and we are going to use it, by gum.&lt;/p&gt;

&lt;p&gt;The sketch, created by Jared Tarbell, simulates orbital bodies using a bunch of trigonometric functions you learned in high school (or not&amp;#8230; they didn&amp;#8217;t seem to do anything like this). But math is hard, let&amp;#8217;s go looping:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (int x=0;x&amp;lt;b.width;x++){
  for (int y=0;y&amp;lt;b.height;y++) {
    color c = get(x,y);
    boolean exists = false;
    for (int n=0;n&amp;lt;numpal;n++) {
      if (c==goodcolor[n]) {
        exists = true;
        break;
      }
    }
    if (!exists) {
      // add color to pal
      if (numpal&amp;lt;maxpal) {
        goodcolor[numpal] = c;
        numpal++;
      } else {
        break;
      }
    }
    if (random(10000)&amp;lt;100) {
      if (numpal&amp;lt;maxpal) {
        // pump black or white into palette
        if (random(100)&amp;lt;50) {
          goodcolor[numpal] = #FFFFFF;
          print(&amp;quot;w&amp;quot;);
        } else {
          goodcolor[numpal] = #000000;
          print(&amp;quot;b&amp;quot;);
        }
        numpal++;
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These loops take unique colors from an image &lt;code&gt;b&lt;/code&gt; (which has been painted, so &lt;code&gt;get()&lt;/code&gt; works on it) and put them in a &lt;code&gt;goodcolor&lt;/code&gt; array. But! Every one out of a hundred iterations or so, it gets funky and adds an extra element that is either black or white. Each iteration adds either zero, one, or two array elements&amp;#8212;lock up your daughters!&lt;/p&gt;

&lt;p&gt;This is something funny that happens with this kind of open-ended programming. The way the sketch behaves is driven not just by imagination by also &lt;em&gt;the language and environment&lt;/em&gt;, adding an actual computer dimension to computer art; registers and jump instructions themselves become a part of the work the work.&lt;/p&gt;

&lt;p&gt;To do exactly the same thing this loop is doing in a functional language would be awkward and dissatisfying. So we improvise. Because, hey, if this were written in a functional language in the first place, it would be doing something different. The &lt;code&gt;goodcolor&lt;/code&gt; sequence is read randomly, later, so inserting the expected proportion of black and white elements as a block should have the same effect as scattering a similar amount by chance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def takecolor(img: PImage, len: Int) = (
    List.make(len / 200, 0xFFFFFFFF) ++
    List.make(len / 200, 0xFF000000) ++
    img.pixels.toList.removeDuplicates
  ).take(len)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is not exactly the right proportion, on second thought; for that we would need to know the proportion of unique colors to pixels in the source image. But it&amp;#8217;s close enough. If you don&amp;#8217;t like the amount of black and white in the image, adjust the denominator (or randomize it a little).&lt;/p&gt;

&lt;p&gt;In addition to that cheap trick, this function is profiting from P5 library calls that may not have been available to the original, &lt;em class=&quot;smcp&quot;&gt;and&lt;/em&gt; it&amp;#8217;s being kind of sloppy and reading in the entire image, then truncating, instead of stopping when the target number of colors is hit. &lt;a href=&quot;http://www.scala-lang.org/docu/files/api/scala/Stream$object.html&quot;&gt;Stream&lt;/a&gt; could do a better job, if anyone wants to figure that out, but as it is there is no noticeable delay in startup from loading in the colors, and the code is tight, so whatever.&lt;/p&gt;

&lt;p class=&quot;break&quot;&gt;Here&amp;#8217;s the procedure that returns a random array element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;color somecolor() {
  // pick some random good color
  return goodcolor[int(random(numpal))];
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This Java code is simple enough, but wouldn&amp;#8217;t it be cool to be able to select a random element from any sequence, since it seems like that happens a lot in Processing? It is simple do with implicit conversions. Let&amp;#8217;s add it to the &lt;abbr&gt;API&lt;/abbr&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait Randoms {
  private val rand = new Random
  implicit def seq2RichRandom[K](seq: Seq[K]) = new RichRandom(seq)
  
  protected class RichRandom[K](seq: Seq[K]) {
    def random: K = seq((rand.nextFloat * seq.length).toInt)
  }
  ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://technically.us/code/x/runaway-processing/&quot;&gt;Spde&lt;/a&gt; brings this into scope by default, so any sketch can call &lt;code&gt;random&lt;/code&gt; on a sequence directly. At that point you don&amp;#8217;t really need a &lt;code&gt;somecolor()&lt;/code&gt; function, just call &lt;code&gt;goodcolor.random&lt;/code&gt;. And it comes in handy here, when selecting a random, existing list element to orbit around while building the list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def make_orbitals(num:Int, around: List[Body]): List[Body] =
  if (around.length == num) around
  else make_orbitals(num, new Orbital(around.random) :: around)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ...
  class Bet[K](val weight: Int, val out: () =&amp;gt; K)
  class BetSum[K](val bet: Bet[K], val sum: Int)
  
  def play[K](odds: Bet[K]*) = {
    def adder(acc:Int, in: Seq[Bet[K]], out: List[BetSum[K]]): List[BetSum[K]] = in match  {
      case Nil =&amp;gt; out
      case Seq(cur, rest @ _*) =&amp;gt; adder(acc + cur.weight, rest, new BetSum(cur, acc) :: out)
    }
    val sl = adder(0, odds, Nil)
    val score = rand.nextDouble * (sl.head.sum + sl.head.bet.weight)
    sl.find(_.sum &amp;lt; score).get.bet.out()
  }
  
  implicit def int2RichBetter(weight: Int) = new RichBetter(weight)
  
  protected class RichBetter(weight: Int) {
    def %&amp;gt;[K](out: =&amp;gt; K) = new Bet(weight, () =&amp;gt; out)
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the rest of the &lt;code&gt;Randoms&lt;/code&gt; trait. It is a scary tool for making a program act unpredictably. The idea is that you pass control off to &lt;code&gt;play&lt;/code&gt; along with weighted outcomes, each defined as a &lt;code&gt;Bet&lt;/code&gt;. This allows an expression to be written in terms of whole-number odds like 100 to 1, 1 to 1 (50/50), or 1 to 2 to 10. The &lt;code&gt;adder&lt;/code&gt; function tail-recursively builds sum elements for the bet sequence, then we fetch a random, ranged score and return whichever bet won. The losing outcomes, passed in &amp;#8220;by name&amp;#8221;, are never evaluated.&lt;/p&gt;

&lt;p&gt;The low point of writing this was giving up on doing &lt;code&gt;adder&lt;/code&gt; with terse, immutable list processing functions. Are we missing something? The recursive solution is fine, but still. The high point was, as usual with Scala, exploiting the freedom to define just about whatever &lt;abbr&gt;API&lt;/abbr&gt; you can dream up. This one is inspired by the implicit &lt;code&gt;-&amp;gt;&lt;/code&gt; tuple builder for hashmaps, but uses an evocative percent sign:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;play(
  1       %&amp;gt; &amp;quot;You won the lottery!&amp;quot;, 
  1000000 %&amp;gt; &amp;quot;You are still poor!&amp;quot;, 
  10000   %&amp;gt; { global_thermonuclear_war(); &amp;quot;Frig.&amp;quot; }
)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although this interface was inspired by Orbitals, it doesn&amp;#8217;t get too much of a workout there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tv = random(0.0001,0.02/(d+1)) * play(1 %&amp;gt; 1, 1 %&amp;gt;  -1)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it&amp;#8217;s got potential!&lt;/p&gt;

&lt;p class=&quot;break&quot;&gt;&lt;em&gt;The &lt;a href=&quot;http://technically.us/git?p=spde.git;a=blob;f=examples/src/main/resources/examples/Topics/Simulate/Orbitals/Orbitals.pde&quot;&gt;translated Orbitals example&lt;/a&gt; is available in the Spde &lt;a href=&quot;http://technically.us/git?p=spde.git;a=summary&quot;&gt;head&lt;/a&gt; and latest &lt;a href=&quot;http://technically.us/torrents/&quot;&gt;snapshot releases&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content>
		<author>
			<name>Coderspiel</name>
			<uri>http://technically.us/code</uri>
		</author>
		<source>
			<title type="html">Coderspiel (all posts)</title>
			<subtitle type="html">Programming with creative license.</subtitle>
			<link rel="self" href="http://technically.us/resources/com.typeturner.Typeturner/code-rss?q=scala"/>
			<id>http://technically.us/resources/com.typeturner.Typeturner/code-rss?q=scala</id>
			<updated>2008-10-22T13:20:20+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Singletons are for Simpletons (Statics =&amp;gt; Fail)</title>
		<link href="http://suereth.blogspot.com/2008/10/singletons-are-for-simpletons-statics.html"/>
		<id>tag:blogger.com,1999:blog-1673113361032868171.post-8602452978566965094</id>
		<updated>2008-10-09T21:13:15+00:00</updated>
		<content type="html">&lt;span&gt;Clarification:  After having many IM chats about this post, I thought I'd write a minor clarification.  In this post I outline a very dogmatic approach to avoiding Singletons in the attempt to ease unit testing.  In real life, I'm far too practical to completely avoid singletons. As a rule of thumb, I think they are avoidable and you can simplify development by not having them.  Next time you're thinking of using singletons, think: &quot;If statics did not exist and I needed this functionality, would I pass this class into every class in my application?&quot;.  Hopefully it'll help you reach a common ground between over-use and never-use.  This post is an attempt to sway statics/singleton-heavy users over to a middle-ground of sorts.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Some of you may be wondering why I'm writing about fundamentals of mechanical engineering.  Actually, This posting is about statics in programming.  Other words sometimes used for statics are globals, singletons or pure evil.  The goal of this post is to show why you should avoid statics/globals/singletons in your own code, and what you can gain by doing so.&lt;br /&gt;&lt;br /&gt;Statics are pretty tempting when first learning Java.  Sometimes it's easier to just make something static then figure out how/who needs to receive functionality from a particular class.  Singletons are even more dangerous in that they grant the illusion of have a  real class while not really buying you an amazing amount of power. (I guess inheritance counts...)&lt;br /&gt;&lt;br /&gt;Let's see a typical Java Singleton in action:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;package com.blogspot.suereth.statics.suxorz&lt;br /&gt;&lt;br /&gt;public class SimpletonSingleton {&lt;br /&gt;&lt;br /&gt;   private static SimpletonSingleton instance = new SimpletonSingleton();&lt;br /&gt;   //This appears like a non-static variable huh?  Even looks testable I bet...&lt;br /&gt;   private ImportantInterface memberOne;&lt;br /&gt;&lt;br /&gt;   private SimpletonSingleton() {&lt;br /&gt;         memberOne = lookUpImportantInterface(memberOne);&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   //Helper methods, all synchronized of course&lt;br /&gt;   ...&lt;br /&gt;   public static SimpletonSingleton getInstance() {&lt;br /&gt;        return instance;&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Rather than diverge into the issues surrounding java singletons and classloaders etc., let's point out a few real issues with this code.  I see two major issues &lt;ol&gt;&lt;li&gt;It appears clever&lt;/li&gt;&lt;li&gt;It's not&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;In terms of 1, I've seen and done a lot of &quot;clever&quot; things with singletons.  It's amazing how &quot;easy&quot; you can make developing an application.  Sure, create a database abstraction that lets you pull in all sorts of things from your database into your application.  I remember my days of CORBA in C++ where I created an &quot;OrbAccess&quot; singleton.  That was my genius way of not having tons of references passed in the constructors of every class. In C++ the overhead of managing that much information became painful, even with multiple inheritance.  (I toyed with the idea of a &quot;ORBHelper&quot; virtual base class that just took in an ORB and gave you helper methods).  The problem here is that once you make something a static/global/singleton you lose control of access of the object, but more importantly you lose control of composition of your software.&lt;br /&gt;&lt;br /&gt;The second point revolves around this.  Object-Oriented software is much more about composition than inheritance.  More importantly re-usability and testing become FAR easier with composition.&lt;br /&gt;&lt;br /&gt;Look at the above code.  Now image how we go about testing it.  Here's a few scenarios:&lt;ul&gt;&lt;br /&gt;&lt;li&gt;&lt;b&gt;&quot;There's Only one of these per application so I'll make it a Singleton&quot; Singleton&lt;/b&gt; - If only I hadn't seen these in the wild... I wouldn't even mention them.  Just because you only want one instance of a class is *NO* reason to make it a formal singleton (like the above).  The main problem with this is you lose access to when the object is created, and therefore the *arguments* to the singleton.  It is now harder to compose your application.  Good Job!&lt;/li&gt;&lt;br /&gt;&lt;li&gt;&lt;b&gt;Data-Layer Access Singleton&lt;/b&gt; - We want a singleton that will manage all our access to the database.  This way all our JDBC and queries are in one place! great.  The &quot;lookUpImportantInterface&quot; method actually pulls in some .properties file and wires in some way of grabbing connections or hibernate sessions, or &lt;i&gt;:::insert framework here:::&lt;/i&gt;.  Slick huh?  Alright, so now let's say I want to test this singleton.  I now have to abstract out either the entire JDBC API or some other layer on top of it (ugh).  WORSE! If I want to test classes that *use* the singleton, I &lt;b&gt;STILL&lt;/b&gt; have to abstract out the entire JDBC API, or bootstrap a database, or some other nonesense.  Also, this singleton winds up getting changed any time I want to grab some new type of data out of the database.  Isn't this one of the code smells from Martin Fowler's &quot;Refactoring&quot;?&lt;/li&gt;&lt;br /&gt;&lt;li&gt;&lt;b&gt;Factory Singleton&lt;/b&gt; - Perhaps this is cheating (since the Data-Layer Access Singleton could be considered a Factory singleton).  The basic premise is I want a factory that will generate instances of classes.  This way I don't have to remember all the crazy sub-classes, I can just change implementations based on arguments and overloaded methods.  YAY!  The underlying problem here is how you go about testing *users* of the Factory singleton.  You need to be careful about how/when you go about creating and using the objects.  If you've designed your software such that a 3rd party does the composition (ala dependency injection), then you can get away with a Factory Singleton AND have testability.  If you make the factory calls yourself in a &quot;user&quot; class, you can no longer isolate your testing of that user class, and have to mock whatever framework the Factory Singleton uses when testing &lt;b&gt;its&lt;/b&gt; users.  This can be difficult, if not impossible if you are not the author of the Factory Singleton.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;&lt;b&gt;Resource Caching Singleton (or the Flyweight Singleton)&lt;/b&gt; - Suffers from all the same issues as the Factory Singleton PLUS you have to write massively ugly threading code with statics...&lt;/li&gt;&lt;br /&gt;&lt;li&gt;&lt;b&gt;Event Queue Singleton&lt;/b&gt; - As these are usually used in GUI applications where you can only have one thread interacting with widgets, I don't have much negative here.  It's already a GUI so testing is hard.  Go crazy and write bad code.  I'll go work on the server :)  As an aside, I think the days of single-threading GUI event loops are coming to an end.  Multi-core is going to force their hands.  Perhaps when the languages catch up, the core libraries will be next.  For other uses, I would rather see instantiations of event queues that get passed into objects than singletons personally.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;&lt;b&gt;X-Pool Singleton&lt;/b&gt; - Seems great right?  Need a socket, grab one from the pool.  Need an inflatable alligator? It's in the pool.  Anyone can access the pool, but it enforces fairness right? Oh... you mean it doesn't know who's using it?  Well, I'll just have my class call the &quot;get_low_priority&quot; method.  Wait, nevermind, *my* class is important.  *YOU* call the low priority method.  How does the pool get instantiated? OH, it needs to know how to start itself.  What about testing?  Well I'll need to have a mock-configuration for every test I run on users of the pool... Not so fun anymore...  MAYBE I'll just make  &quot;get_object&quot; interface and pass it in to the constructor of my object.  That way I can change how it works when I compose my application (for testing or production or otherwise).&lt;/li&gt;&lt;br /&gt;&lt;li&gt;&lt;b&gt;Utility Singleton&lt;/b&gt; - So this is perhaps the most useful of singletons.  What you're actually doing is creating a bunch of pure functions.  In C++ you wouldn't even need to place them in a class, just a namespace.  As long as the functions are pure (no mutating state), This singleton becomes easily testable.  &lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;As you can see, although there are some *ok* usages of singletons, the vast majority of usages detract from locality of code and testability.  I've worked on a lot of projects where automated unit testing is thrown out, not because there's no time, but because the design/architecture of the code makes automated unit testing hard/costly.  My argument is that (at least in modern languages), there's no reason to throw testability out for these static/singleton usage patterns.  I can use this newfangled &quot;Dependency Injection&quot; technique and *still* have slick code.&lt;br /&gt;&lt;br /&gt;Am I interfacing with a JmsQueue?  Make a simple abstraction:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;interface JmsQueue {&lt;br /&gt;   public void sendMessage(Serializable msg) throws CommunicationError, FatalError;&lt;br /&gt;   public void addMessageListener(MessageListener ml);&lt;br /&gt;   public void addErrorHandler(KeepAliveErrorHandler el);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Now I can pass a mock instance of this interface into all my classes that send JMS Messages.  I can even make sure the messages sent are correct using my mock.  I can even test communication errors using my mock, and make sure my business logic is designed to handle it.&lt;br /&gt;&lt;br /&gt;For JMS Receivers implementing the MessageListener interface I should be able to test that interface directly. &lt;br /&gt;&lt;br /&gt;&lt;i&gt;DON'T Fall into the trap of wiring &quot;Listener&quot; classes into the &quot;Listened&quot; objects during the &quot;Listener&quot; class's constructor.  Although it may seem clever, it means that you now need to abstract out the *entire* &quot;listened&quot; object, instead of just calling methods on the listener class.  It's better to give yourself the freedom of composition for later enhancements.  What if you wanted to load-balance your listeners?  What if you wanted to consolidate several listeners?&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;In conlusion... Avoid singletons if possible.  Save &quot;wiring&quot; your classes until later.  You can get something working quicker if you can test it out IMMEDIATELY vs. waiting for your infrastructure/architecture to fall in place.  Think of coding as two phases: &lt;ol&gt;&lt;li&gt;Single Class Design, Implementation and Testing&lt;/li&gt;&lt;li&gt;Composition/Architecture of classes and Integration Testing&lt;/li&gt;&lt;/ol&gt;  In practice don't separate these too much, as you'll design some really bad classes. However it's a good logical distinction.&lt;br /&gt;&lt;br /&gt;Also keep this in mind.  Dependency injection does not mean Spring or Guice or J2EE.  Dependency injection can be accomplished via &quot;Composer&quot; classes as I like to call them.  These are the &quot;Main&quot; classes of an application, that can just instantiate objects and pass them into constructors.  This is the guy who sets up an environment for the classes to run in.  Your JUnit tests are 'composer' classes.  They set up a much smaller execution environment, but they are setting one up.  Your main application could have multiple or one large composer class, or it could hide and use a &quot;generic&quot; one that reads &quot;xml&quot; or &quot;annotations&quot;.  In any case there *is* a composer class that creates your execution environment for you.  Break you application into &quot;users&quot; and &quot;composers&quot; and testing will be much easier on you.  Make sure your composer classes don't contain too much logic and you should be on your way to an easier-to-maintain code base.</content>
		<author>
			<name>J. Suereth</name>
			<email>noreply@blogger.com</email>
			<uri>http://suereth.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Rants, Raves and Ridicule</title>
			<subtitle type="html">My thoughts and/or rants on Software Development.</subtitle>
			<link rel="self" href="http://suereth.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1673113361032868171</id>
			<updated>2008-11-01T15:20:26+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">To Tail Recurse or Not</title>
		<link href="http://debasishg.blogspot.com/2008/10/to-tail-recurse-or-not.html"/>
		<id>tag:blogger.com,1999:blog-22587889.post-1207804244365342664</id>
		<updated>2008-10-09T12:32:05+00:00</updated>
		<content type="html">Today I am going to talk about maps, not the &lt;code&gt;java.util.Map&lt;/code&gt;, but, &lt;code&gt;map&lt;/code&gt; as in map-reduce or map as in &lt;code&gt;scala.List.map&lt;/code&gt;. Of course all of us know what &lt;code&gt;map&lt;/code&gt; is and &lt;code&gt;map&lt;/code&gt; does, and how this powerful concept has been used in all functional languages that we use on a regular basis. I will talk maps in the context of its implementation, as we find in all the languages, which brings out some of the important principles of using &lt;a href=&quot;http://en.wikipedia.org/wiki/Tail_recursion&quot;&gt;tail recursion&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;A couple of months back, there was a &lt;a href=&quot;http://www.erlang.org/pipermail/erlang-questions/2008-April/034409.html&quot;&gt;thread&lt;/a&gt; in the Erlang discussion list, where someone wondered why the implementation of map in Erlang stdlib Lists.erl is NOT tail recursive. Here it is, faithfully copied from Erlang stdlib ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;T&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)];&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[])&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;is_function&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Clearly not a tail recursive one ..&lt;br /&gt;&lt;br /&gt;The thread of discussion explains the rationale behind such implementation. And it has a lot to do with the compiler optimizations that have been done in R12B. Here is a &lt;a href=&quot;http://www.erlang.org/doc/efficiency_guide/myths.html#2.3&quot;&gt;quote&lt;/a&gt; from the Erlang efficiency guide, which explains the myth that tail-recursive functions are ALWAYS much faster than body-recursive ones ..&lt;br /&gt;&lt;br /&gt;&lt;cite&gt;&quot;In R12B, there is a new optimization that will in many cases reduces the number of words used on the stack in body-recursive calls, so that a body-recursive list function and tail-recursive function that calls lists:reverse/1 at the end will use exactly the same amount of memory. lists:map/2, lists:filter/2, list comprehensions, and many other recursive functions now use the same amount of space as their tail-recursive equivalents.&quot;&lt;/cite&gt;&lt;br /&gt;&lt;br /&gt;Since a tail recursive map needs to do a &lt;code&gt;reverse&lt;/code&gt; ..&lt;br /&gt;&lt;ul&gt;&lt;br /&gt;  &lt;li&gt;the incremental space that it needs to keep both the lists makes it equally space consuming with the body-recursive version&lt;/li&gt;&lt;br /&gt;  &lt;li&gt;it puts pressure on the garbage collector, since the space used by the temporary list cannot be reclaimed immediately&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;The general advice is that you need to measure the timings of your use case and then decide whether to tail recurse or not.&lt;br /&gt;&lt;br /&gt;I was curious enough to check what the Scala library does for &lt;code&gt;map&lt;/code&gt; implementation. Here is the snippet from &lt;code&gt;scala.List&lt;/code&gt; ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;&amp;nbsp;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;b&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ListBuffer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;these&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;these&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;f&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;these&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;these&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;these&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;tail&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;b&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;toList&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;It is not a functional implementation at all. In fact it adopts a clever use of localized mutation to achieve performance. Using mutation locally is a  perfectly valid technique and a definite area where hybrid non-pure languages score over the purer ones. The contract for map is purely functional, does not have any side-effect, yet it uses localized side-effects for performance. This would not have been possible in Erlang. Neat!&lt;br /&gt;&lt;br /&gt;Just for fun, I cooked up a tail recursive version of &lt;code&gt;map&lt;/code&gt; in Scala, as a standalone function ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;tr_map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;l&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;iter_map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;l&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;l&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;curr&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;reverse&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;_&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;iter_map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;curr&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;l&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;iter_map&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;l&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;It performed very slow compared to the native librray version.&lt;br /&gt;&lt;br /&gt;Scala also offers a &lt;code&gt;reverseMap&lt;/code&gt; function which does not need the additional &lt;code&gt;reverse&lt;/code&gt;, which the tail-recursive &lt;code&gt;map&lt;/code&gt; would require. And not surprisingly, the implementation is based on tail recursion and pattern matching ..&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;code&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;reverseMap&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;loop&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;res&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;l&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;res&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;head&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;tail&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;loop&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;f&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;res&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;loop&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;So, how does the story end ? Well, as usual, benchmark hard, and then decide ..</content>
		<author>
			<name>Debasish</name>
			<email>noreply@blogger.com</email>
			<uri>http://debasishg.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Ruminations of a Programmer</title>
			<subtitle type="html">A programmer's blog - will deal with everything that relates to a programmer. Occasionally, it will contain some humour, some politics and some sport news.</subtitle>
			<link rel="self" href="http://debasishg.blogspot.com/feeds/posts/default?alt=rss"/>
			<id>tag:blogger.com,1999:blog-22587889</id>
			<updated>2008-11-01T19:20:16+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Ruby Compiler Project</title>
		<link href="http://kevinoncode.blogspot.com/2008/08/new-project.html"/>
		<id>tag:blogger.com,1999:blog-1937539813134787961.post-279234678198918045</id>
		<updated>2008-10-08T23:19:14+00:00</updated>
		<content type="html">In my spare time (that is, apart from all the other hobbies I have), I have started work on a new programming project.  My goal is to write an interpreter/compiler for a new programming language.  I have no great ambitions, this project is purely for my own enjoyment and to hopefully teach myself something new.&lt;br /&gt;&lt;br /&gt;Goals/Plans:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Develop in Mac OS X&lt;/li&gt;&lt;li&gt;Implement the compiler in Ruby&lt;/li&gt;&lt;li&gt;Use test driven development and the agile process&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;</content>
		<author>
			<name>Kevin Albrecht</name>
			<email>noreply@blogger.com</email>
			<uri>http://kevinoncode.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Kevin on Code</title>
			<subtitle type="html">Object-oriented programmer by day.
Functional programmer by night.</subtitle>
			<link rel="self" href="http://kevinoncode.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1937539813134787961</id>
			<updated>2008-10-31T22:40:25+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">AOT and JVM</title>
		<link href="http://blog.juma.me.uk/2008/10/08/aot-for-java/"/>
		<id>http://ijuma.wordpress.com/?p=27</id>
		<updated>2008-10-08T16:21:07+00:00</updated>
		<content type="html">&lt;div class=&quot;snap_preview&quot;&gt;&lt;br /&gt;&lt;p&gt;There have been a few &lt;a href=&quot;http://en.wikipedia.org/wiki/AOT_compiler&quot;&gt;AOT&lt;/a&gt; compilers for Java for some time. Two of the better known examples are &lt;a href=&quot;http://gcc.gnu.org/java/&quot;&gt;GCJ&lt;/a&gt; and &lt;a href=&quot;http://www.excelsior-usa.com/jet.html&quot;&gt;Excelsior JET&lt;/a&gt;. Even though Excelsior JET also has a JIT, the main focus was on the AOT aspect.&lt;/p&gt;
&lt;p&gt;There have been many suggestions that HotSpot should cache the JIT-generated code to improve start-up performance, avoid the need for a warm-up phase on every invocation of the application and possibly share more data between applications. This is particularly relevant for desktop applications. HotSpot engineers claim that this is a complex task and that the benefits might not be as great as expected because AOT-generated code would be slower than JIT-generated one, so they implemented a simpler solution in JDK 5, &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/vm/class-data-sharing.html&quot;&gt;Class Data Sharing&lt;/a&gt;. It&amp;#8217;s pretty limited because it only works with the Client VM and the serial garbage collector and also because it only loads a set of classes from the system jar.&lt;/p&gt;
&lt;p&gt;Interestingly, IBM did some work in this area in the IBM JRE for Java 5 and improved it further in the one for Java 6. This is described in some detail in a &lt;a href=&quot;http://www.ibm.com/developerworks/library/j-sharedclasses/&quot;&gt;developerWorks article&lt;/a&gt;. It&amp;#8217;s worth reading if you&amp;#8217;re interested in this sort of thing, but I&amp;#8217;ll list some points that I found interesting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AOT code can be stored into a shared class cache allowing another JVM to use it to reduce startup time.&lt;/li&gt;
&lt;li&gt;Class compression is used to increase the amount of classes that are stored in the cache.&lt;/li&gt;
&lt;li&gt;AOT code is also subject to JIT compilation if it&amp;#8217;s invoked often in order to optimise it further.&lt;/li&gt;
&lt;li&gt;AOT code executed by a JVM is copied from the shared class cache so there is no direct footprint benefit but there are memory and CPU savings from being able to reuse this code rather than repeat the compilation.
&lt;li&gt;AOT compilation is based on heuristics that select methods that are likely to improve startup time.&lt;/li&gt;
&lt;li&gt;Eclipse without any additional plugins took 3.313 to start with AOT and shared classes versus 4.204 seconds without. Larger improvements could take place if there were more plugins installed.&lt;/li&gt;
&lt;li&gt;Tomcat startup time improved from 1138ms to 851ms. Using shared classes without AOT caused the time to be 950ms, which means that both AOT and shared classes contributed to the improvement.&lt;/li&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Downloading the IBM JRE/JDK requires registration and in case you need the Windows version, you must download a bundle that includes Eclipse. Links to the various downloads can be found in the developerWorks article.&lt;/p&gt;
&lt;p&gt;These are interesting results, and it would be interesting to find out if HotSpot would also benefit from similar enhancements.&lt;/p&gt;
Posted in jvm&amp;nbsp;&amp;nbsp;&amp;nbsp;Tagged: aot, ibm, java, jit, jvm, memory sharing, start-up performance&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/ijuma.wordpress.com/27/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ijuma.wordpress.com/27/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godelicious/ijuma.wordpress.com/27/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/ijuma.wordpress.com/27/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gostumble/ijuma.wordpress.com/27/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/ijuma.wordpress.com/27/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godigg/ijuma.wordpress.com/27/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/ijuma.wordpress.com/27/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/goreddit/ijuma.wordpress.com/27/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/ijuma.wordpress.com/27/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://stats.wordpress.com/b.gif?host=blog.juma.me.uk&amp;blog=4860094&amp;post=27&amp;subd=ijuma&amp;ref=&amp;feed=1&quot; /&gt;&lt;/div&gt;</content>
		<author>
			<name>Ismael Juma</name>
			<uri>http://blog.juma.me.uk</uri>
		</author>
		<source>
			<title type="html">Ismael Juma</title>
			<link rel="self" href="http://blog.juma.me.uk/feed"/>
			<id>http://blog.juma.me.uk/feed</id>
			<updated>2008-10-25T13:00:33+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Submit a Story to Scala-lang.org!</title>
		<link href="http://www.scala-lang.org/node/332"/>
		<id>http://www.scala-lang.org/332 at http://www.scala-lang.org</id>
		<updated>2008-10-07T12:34:13+00:00</updated>
		<content type="html">&lt;p&gt;After the recent website redesign, our front page is designed so that it displays updated news items related to the Scala language. However, the stream of stories has been more of a trickle, so far.&lt;/p&gt;
&lt;p&gt;In order to publish a steady flow of news that is relevant to the entire Scala community, we have therefore decided to open the website to news submissions coming from all Scala users. We are therefore glad to invite news &lt;a href=&quot;http://www.scala-lang.org/node/308&quot;&gt;story submissions&lt;/a&gt; from the Scala community at large.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.scala-lang.org/node/332&quot; target=&quot;_blank&quot;&gt;read more&lt;/a&gt;&lt;/p&gt;</content>
		<author>
			<name>scala-lang.org</name>
			<uri>http://www.scala-lang.org</uri>
		</author>
		<source>
			<title type="html">The Scala Programming Language</title>
			<link rel="self" href="http://www.scala-lang.org/rss.xml"/>
			<id>http://www.scala-lang.org/rss.xml</id>
			<updated>2008-11-01T20:20:46+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">johlrogge</title>
		<link href="http://johlrogge.wordpress.com/2008/10/06/scala-nugget-pattern-matching-and-lists/"/>
		<id>http://johlrogge.wordpress.com/?p=109</id>
		<updated>2008-10-06T22:27:19+00:00</updated>
		<content type="html">&lt;div class=&quot;snap_preview&quot;&gt;&lt;br /&gt;&lt;p&gt;I was whining recently about how my scala-code is java in poor disguise. I started reading the &lt;a href=&quot;http://www.scala-lang.org/sites/default/files/linuxsoft_archives/docu/files/ScalaByExample.pdf&quot;&gt;scala by example pdf&lt;/a&gt; that also comes with the scala installation. I just read some interesting things about lists and pattern-matching that gave me an idea how to &amp;#8220;scalafy&amp;#8221; the following &lt;em&gt;scjava&lt;/em&gt;-code:&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-109&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;  def importResource(name:String, resource:Resource):Unit = {
    log.debug(&quot;importing &quot; + name + &quot; into &quot; + root)
    val path = pathOf(name)
    createResource(path.toList)(resource)
  }

  private def createResource(nodes:List[String])(resource:Resource) =  {
    val directory = nodes.dropRight(1).foldLeft(root)((directory, name) =&amp;gt; {
      if(name.equals(&quot;&quot;)) {
        directory
      }
      else {
        val directoryOption:Option[AbstractDirectory] = directory.getDirectory(name)
        directoryOption.getOrElse({
          val subDir = directory.createDirectory(name) match {
                         case result:AbstractDirectory =&amp;gt; result
                       }
          directory.add(subDir)
          subDir
        })
      }
    })
    directory.createIfNewer(nodes.last, _:Resource)
  }&lt;/pre&gt;
&lt;p&gt;If it&amp;#8217;s not crystal clear to you what the code does. Here is an overview:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first method takes a name and a resource&lt;/li&gt;
&lt;li&gt;The name is split up into it&amp;#8217;s path-elements&lt;/li&gt;
&lt;li&gt;The path is passed to the createResource method that will create all directories that does not yet exist on the way to the resource and finally return a function that takes a resource as input and creates it in the already given directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A big issue I have with the code is the createResource-method. It simply is very hard to name it. createAllDirectoriesAndReturnResourceCreatingMethod would illustrate better how smelly that method really is. I have an idea on how to refactor this with scalas pattern matching. This is the new version (after some red/green bar cycles):&lt;/p&gt;
&lt;pre&gt;  def importResource(name:String, resource:Resource):Unit = {
    log.debug(&quot;importing &quot; + name + &quot; into &quot; + root)
    val path = pathOf(name)
    createResource(path.toList, root, resource)
  }

  private def createResource(nodes:List[String],
                             directory:AbstractDirectory,
                             resource:Resource) {
    nodes match {
      case head :: Nil =&amp;gt; directory.createIfNewer(head, resource)
      case &quot;&quot; :: tail =&amp;gt; createResource(tail, directory, resource)
      case head :: tail =&amp;gt; {
        val subDir = directory.getDirectory(head).getOrElse {
          val result = directory.createDirectory(head) match {
                                   case dir:AbstractDirectory =&amp;gt; dir
                                 }
          directory.add(result)
          result}
        createResource(tail, subDir, resource)
      }
      case nil =&amp;gt;
    }
  }&lt;/pre&gt;
&lt;p&gt;The first thing that strikes me about the second version is the unbalance between the different cases. The &lt;em&gt;head :: tail&lt;/em&gt; case is not exactly a one-liner&amp;#8230; but it should be. This smells like feature envy. We could ask the directory to getOrCreateDirectory and it would read much better. But that is another refactoring. First let&amp;#8217;s go through this one:&lt;br /&gt;
One thing I did not first get in scala is how you can iterate through lists using pattern-matching. In order to get how that works it is important to realise one thing about scalas lists:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;List(&amp;#8221;a&amp;#8221;, &amp;#8220;b&amp;#8221;, &amp;#8220;c&amp;#8221;, &amp;#8220;d&amp;#8221;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;is equivalent to&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;#8220;a&amp;#8221; ::(&amp;#8221;b&amp;#8221; ::(&amp;#8221;c&amp;#8221; ::(&amp;#8221;d&amp;#8221; ::(Nil))))&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;which due to the right associativityness  of :: is equivalent to:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;#8220;a&amp;#8221; :: &amp;#8220;b&amp;#8221; :: &amp;#8220;c&amp;#8221; :: &amp;#8220;d&amp;#8221; :: Nil&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Or plain english: Lists are not flat structures, lists are recursive structures. What that means in practical terms is that given any element in the list it is very easy to split the list at that element into &lt;em&gt;head&lt;/em&gt; (the current element) and &lt;em&gt;tail&lt;/em&gt; (the rest of the elements.&lt;/p&gt;
&lt;p&gt;For instance, given the element &lt;em&gt;&amp;#8220;b&amp;#8221;&lt;/em&gt; above, &lt;em&gt;head&lt;/em&gt; will be &lt;em&gt;&amp;#8220;b&amp;#8221;&lt;/em&gt; and &lt;em&gt;tail&lt;/em&gt; will be &lt;em&gt;&amp;#8220;c&amp;#8221; :: &amp;#8220;d&amp;#8221; :: Nil&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ok, not that hard. Now to the cool part: The :: &lt;em&gt;operator &lt;/em&gt;is a &lt;em&gt;case class&lt;/em&gt; which in short means that it can be used in pattern matching:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;#8220;a&amp;#8221; :: &amp;#8220;b&amp;#8221; :: &amp;#8220;c&amp;#8221; :: Nil match { case h :: t =&amp;gt; println(head +&amp;#8221; -&amp;gt; &amp;#8221; +tail); &amp;#8230;}&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;will assign &amp;#8220;a&amp;#8221; to the variable h and &lt;em&gt;&amp;#8220;b&amp;#8221; :: &amp;#8220;c&amp;#8221; :: nil&lt;/em&gt; to the variable &lt;em&gt;t&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We can now understand the cases above. In pseudocode:&lt;/p&gt;
&lt;pre&gt;  private def createResource(nodes:List[String],
                             directory:AbstractDirectory,
                             resource:Resource) {
    nodes match {
      case head :: Nil =&amp;gt;  &lt;em&gt;//the last element of the list, create the resource using head as a name&lt;/em&gt;
      case &quot;&quot;   :: tail =&amp;gt; &lt;em&gt;// special case, an empty directory name. Skip to the next name:
                           // createResource(tail, directory, resource)
      &lt;/em&gt;case head :: tail =&amp;gt; &lt;em&gt;//head will be a directory-name that we use to get or create the
                           //nextDirectory that is used with tail to call ourselves recursively:
                           // &lt;/em&gt;createResource&lt;em&gt;(tail, &lt;/em&gt;&lt;em&gt;&lt;em&gt;nextDirectory&lt;/em&gt;&lt;/em&gt;&lt;em&gt;, resource)
    &lt;/em&gt;  case nil =&amp;gt; &lt;em&gt;//no more elements to traverse
&lt;/em&gt;    }
  }&lt;em&gt;
&lt;/em&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;#8217;m far from done with the refactoring. I want to get rid of the special case of &amp;#8220;&amp;#8221; to begin with and as mentioned above remove some feature-envy but I think that the cases are more readable than the original code. At least in terms of where the problems lie in terms of special cases and bloated cases. Of course, it&amp;#8217;s just an opinion and I reserve the right to change my mind tomorrow &lt;img src=&quot;http://s.wordpress.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gocomments/johlrogge.wordpress.com/109/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/johlrogge.wordpress.com/109/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godelicious/johlrogge.wordpress.com/109/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/johlrogge.wordpress.com/109/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/gostumble/johlrogge.wordpress.com/109/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/johlrogge.wordpress.com/109/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/godigg/johlrogge.wordpress.com/109/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/johlrogge.wordpress.com/109/&quot; /&gt;&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;http://feeds.wordpress.com/1.0/goreddit/johlrogge.wordpress.com/109/&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/johlrogge.wordpress.com/109/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://stats.wordpress.com/b.gif?host=johlrogge.wordpress.com&amp;blog=708994&amp;post=109&amp;subd=johlrogge&amp;ref=&amp;feed=1&quot; /&gt;&lt;/div&gt;</content>
		<author>
			<name>Joakim Ohlrogge</name>
			<uri>http://johlrogge.wordpress.com</uri>
		</author>
		<source>
			<title type="html">The point is missed</title>
			<subtitle type="html">Museum of public mistakes and unfinished projects</subtitle>
			<link rel="self" href="http://johlrogge.wordpress.com/feed"/>
			<id>http://johlrogge.wordpress.com/feed</id>
			<updated>2008-10-10T10:15:59+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Real-World Scala: Dependency Injection (DI)</title>
		<link href="http://jonasboner.com/2008/10/06/real-world-scala-dependency-injection-di/"/>
		<id>http://jonasboner.com/2008/10/06/real-world-scala-dependency-injection-di/</id>
		<updated>2008-10-06T08:58:53+00:00</updated>
		<content type="html">&lt;p&gt;&lt;em&gt;Update: Corrected typo in the Cake Pattern version of the last example.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Update: Added a version of the last example using the Cake Pattern for easier&lt;br /&gt;
comparison (see end of post).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this second post in the &lt;a href=&quot;http://jonasboner.com/2008/10/01/real-world-scala-introduction/&quot;&gt;Real-World Scala series&lt;/a&gt; I am going to discuss how to implement/achieve &lt;a href=&quot;http://www.martinfowler.com/articles/injection.html&quot;&gt;Depenency Injection&lt;/a&gt; (DI) in Scala. Scala is a very rich and deep language that gives you several ways of doing DI solely based on language constructs, but nothing prevents you from using existing Java DI frameworks, if that is preferred. &lt;/p&gt;
&lt;p&gt;At &lt;a href=&quot;http://www.triental.com/&quot;&gt;Triental&lt;/a&gt; we tried out three different strategies before settling for the one we are using now. The plan for this article is as follows; first explain in detail how we are doing DI now, and then briefly cover the other alternative strategies we have tried out.   &lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;Using the Cake Pattern&lt;/h3&gt;
&lt;/p&gt;&lt;p&gt;The current strategy we are using is based on the so-called Cake Pattern. This pattern is first explained in Martin Oderskys&amp;#8217; paper &lt;a href=&quot;http://lamp.epfl.ch/~odersky/papers/ScalableComponent.pdf&quot;&gt;Scalable Component Abstractions&lt;/a&gt; (which is an excellent paper that is highly recommended) as the way he and his team structured the Scala compiler. But rather than trying to explain the pattern and how it can be used to implement DI in plain English let&amp;#8217;s take a look at some (naive) sample code (loosely based on our production code). &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Note:&lt;br /&gt;
I will try to explain things in steps which I refactor towards the final version (this is only to help with the understanding), so please wait with yelling: &lt;em&gt;&amp;#8220;This sucks!&amp;#8221;&lt;/em&gt;, until you have read and understood the final version (after which you are of course allowed come with any criticism/praise/suggestions/ideas you feel is necessary). Also, the sample code will, as in all these kind of examples, look like an insanely complicated way of doing almost nothing, but bare with me and try to envision real services in a large production system and how it applies there.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;First, let&amp;#8217;s create a &lt;code&gt;UserRepository&lt;/code&gt; (DAO) implementation. &lt;/p&gt;
&lt;pre&gt;
// a dummy service that is not persisting anything
// solely prints out info
class UserRepository {
  def authenticate(user: User): User = {
    println(&quot;authenticating user: &quot; + user)
    user
   }
  def create(user: User) = println(&quot;creating user: &quot; + user)
  def delete(user: User) = println(&quot;deleting user: &quot; + user)
}
&lt;/pre&gt;
&lt;p&gt;Here we could have split up the implementation in a trait interface and its implementation, but in order to keep things simple I didn&amp;#8217;t see the need.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s create a user service (also a dummy one, merely redirecting to our repository). &lt;/p&gt;
&lt;pre&gt;
class UserService {
  def authenticate(username: String, password: String): User =
    userRepository.authenticate(username, password)  

  def create(username: String, password: String) =
    userRepository.create(new User(username, password))

  def delete(user: User) = All is statically typed.
    userRepository.delete(user)
}
&lt;/pre&gt;
&lt;p&gt;Here you can see that we are referencing an instance of the &lt;code&gt;UserRepository&lt;/code&gt;. This is the dependency that we would like to have injected for us. &lt;/p&gt;
&lt;p&gt;Ok. Now the interesting stuff starts.  Let&amp;#8217;s first wrap the &lt;code&gt;UserRepository&lt;/code&gt; in an enclosing trait and instantiate the user repository there. &lt;/p&gt;
&lt;pre&gt;
trait UserRepositoryComponent {
  val userRepository = new UserRepository
  class UserRepository {
    def authenticate(user: User): User = {
      println(&quot;authenticating user: &quot; + user)
      user
    }
    def create(user: User) = println(&quot;creating user: &quot; + user)
    def delete(user: User) = println(&quot;deleting user: &quot; + user)
  }
}
&lt;/pre&gt;
&lt;p&gt;This simply creates a component namespace for our repository. Why? Stay with me and I&amp;#8217;ll show you how to make use of this namespace in a second.&lt;/p&gt;
&lt;p&gt;Now let&amp;#8217;s look at the &lt;code&gt;UserService&lt;/code&gt;, the user of the repository. In order to declare that we would like to have the &lt;code&gt;userRepository&lt;/code&gt; instance injected in the &lt;code&gt;UserService&lt;/code&gt; we will first do what we did with the repository above; wrap the it in an enclosing (namespace) trait and use a so-called &lt;a href=&quot;http://www.scala-lang.org/node/124&quot;&gt;self-type annotation&lt;/a&gt; to declare our need for the &lt;code&gt;UserRepository&lt;/code&gt; service. Sounds more complicated than it is. Let&amp;#8217;s look at the code.&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
// using self-type annotation declaring the dependencies this
// component requires, in our case the UserRepositoryComponent
trait UserServiceComponent { this: UserRepositoryComponent =&gt;
  val userService = new UserService
  class UserService {
    def authenticate(username: String, password: String): User =
      userRepository.authenticate(username, password)
    def create(username: String, password: String) =
      userRepository.create(new User(username, password))
    def delete(user: User) = userRepository.delete(user)
  }
}
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;The self-type annotation we are talking about is this code snippet: &lt;/p&gt;
&lt;pre&gt;
this: UserRepositoryComponent =&gt;
&lt;/pre&gt;
&lt;p&gt;If you need to declare more than one dependency then you can compose the annotations like this: &lt;/p&gt;
&lt;pre&gt;
this: Foo with Bar with Baz =&gt;
&lt;/pre&gt;
&lt;p&gt;Ok. Now we have declared the &lt;code&gt;UserRepository&lt;/code&gt; dependency. What is left is the actual wiring. &lt;/p&gt;
&lt;p&gt;In order to do that the only thing we need to do is to merge/join the different namespaces into one single application (or module) namespace. This is done by creating a &amp;#8220;module&amp;#8221; object composed of all our components. When we do that all wiring is happening automatically. &lt;/p&gt;
&lt;pre&gt;
object ComponentRegistry extends
  UserServiceComponent with
  UserRepositoryComponent
&lt;/pre&gt;
&lt;p&gt;One of the beauties here is that all wiring is statically typed. For example, if we have a dependency declaration missing, if it is misspelled or something else is screwed up then we get a compilation error. This also makes it very fast.   &lt;/p&gt;
&lt;p&gt;Another beauty is that everything is immutable (all dependencies are declared as &lt;code&gt;val&lt;/code&gt;). &lt;/p&gt;
&lt;p&gt;In order to use the application we only need to get the &amp;#8220;top-level&amp;#8221; component from the registry, and all other dependencies are wired for us (similar to how Guice/Spring works).&lt;/p&gt;
&lt;pre&gt;
val userService = ComponentRegistry.userService
...
val user = userService.authenticate(..)
&lt;/pre&gt;
&lt;p&gt;So far so good? &lt;/p&gt;
&lt;p&gt;Well, no. This sucks. &lt;/p&gt;
&lt;p&gt;We have strong coupling between the service implementation and its creation, the wiring configuration is scattered all over our code base; utterly inflexible.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s fix it.&lt;/p&gt;
&lt;p&gt;Instead of instantiating the services in their enclosing component trait, let&amp;#8217;s change it to an abstract member field. &lt;/p&gt;
&lt;pre&gt;
trait UserRepositoryComponent {
  val userRepository: UserRepository

  class UserRepository {
    ...
  }
}
&lt;/pre&gt;
&lt;pre&gt;
trait UserServiceComponent {
  this: UserRepositoryComponent =&gt; 

  val userService: UserService  

  class UserService {
    ...
  }
}
&lt;/pre&gt;
&lt;p&gt;Now, we can move the instantiation (and configuration) of the services to the &lt;code&gt;ComponentRegistry&lt;/code&gt; module.&lt;/p&gt;
&lt;pre&gt;
object ComponentRegistry extends
  UserServiceComponent with
  UserRepositoryComponent
{
  val userRepository = new UserRepository
  val userService = new UserService
}
&lt;/pre&gt;
&lt;p&gt;By doing this switch we have now abstracted away the actual component instantiation as well as the wiring into a single &amp;#8220;configuration&amp;#8221; object. &lt;/p&gt;
&lt;p&gt;The neat thing is that we can here switch between different implementations of the services (if we had defined an interface trait and multiple implementations). But even more interestingly, we can create multiple &amp;#8220;worlds&amp;#8221; or &amp;#8220;environments&amp;#8221; by simply composing the traits in different combinations.&lt;/p&gt;
&lt;p&gt;To show you what I mean, we&amp;#8217;ll now create a &amp;#8220;testing environment&amp;#8221; to be used during unit testing.&lt;/p&gt;
&lt;p&gt;Now, instead of instantiating the actual services we instead create mocks to each one of them. We also change the &amp;#8220;world&amp;#8221; to a trait (why, I will show you in a second).&lt;/p&gt;
&lt;pre&gt;
trait TestingEnvironment extends
  UserServiceComponent with
  UserRepositoryComponent with
  org.specs.mock.JMocker
{
  val userRepository = mock(classOf[UserRepository])
  val userService = mock(classOf[UserService])
}
&lt;/pre&gt;
&lt;p&gt;Here we are not merely creating mocks but the mocks we create are wired in as the declared dependencies wherever defined.&lt;/p&gt;
&lt;p&gt;Ok, now comes the fun part. Let&amp;#8217;s create a unit test in which we are mixing in the &lt;code&gt;TestEnvironment&lt;/code&gt; mixin, which is holding all our mocks.&lt;/p&gt;
&lt;pre&gt;
class UserServiceSuite extends TestNGSuite with TestEnvironment {

  @Test { val groups=Array(&quot;unit&quot;) }
  def authenticateUser = {

    // create a fresh and clean (non-mock) UserService
    // (who's userRepository is still a mock)
    val userService = new UserService

    // record the mock invocation
    expect {
      val user = new User(&quot;test&quot;, &quot;test&quot;)
      one(userRepository).authenticate(user) willReturn user
    }

    ... // test the authentication method
  }

  ...
}
&lt;/pre&gt;
&lt;p&gt;This pretty much sums it up and is just one example on how you can compose your components in the way you want.&lt;/p&gt;
&lt;h3&gt;Other alternatives&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s now take a look at some other ways of doing DI in Scala. This post is already pretty long and therefore I will only walk through the techniques very briefly, but it will hopefully be enough for you to understand how it is done. I have based all these remaining examples on the same little dummy program to make it easier to digest and to compare (taken from some discussion found on the Scala User mailing list). In all these examples you can just copy the code and run it in the Scala interpreter, in case you want to play with it.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using structural typing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This technique using &lt;a href=&quot;http://scala.sygneca.com/patterns/duck-typing-done-right&quot;&gt;structural typing&lt;/a&gt; was posted by Jamie Webb on the Scala User mailing list some time ago. I like this approach; elegant, immutable, type-safe.&lt;/p&gt;
&lt;pre&gt;
// =======================
// service interfaces
trait OnOffDevice {
  def on: Unit
  def off: Unit
}
trait SensorDevice {
  def isCoffeePresent: Boolean
}

// =======================
// service implementations
class Heater extends OnOffDevice {
  def on = println(&quot;heater.on&quot;)
  def off = println(&quot;heater.off&quot;)
}
class PotSensor extends SensorDevice {
  def isCoffeePresent = true
}

// =======================
// service declaring two dependencies that it wants injected,
// is using structural typing to declare its dependencies
class Warmer(env: {
  val potSensor: SensorDevice
  val heater: OnOffDevice
}) {
  def trigger = {
    if (env.potSensor.isCoffeePresent) env.heater.on
    else env.heater.off
  }
}

class Client(env : { val warmer: Warmer }) {
  env.warmer.trigger
}

// =======================
// instantiate the services in a configuration module
object Config {
  lazy val potSensor = new PotSensor
  lazy val heater = new Heater
  lazy val warmer = new Warmer(this) // this is where injection happens
}

new Client(Config)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Using implicit declarations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This approach is simple and straight-forward. But I don&amp;#8217;t really like that the actual wiring (importing the implicit declarations) is scattered and tangled with the application code.  &lt;/p&gt;
&lt;pre&gt;
// =======================
// service interfaces
trait OnOffDevice {
  def on: Unit
  def off: Unit
}
trait SensorDevice {
  def isCoffeePresent: Boolean
}

// =======================
// service implementations
class Heater extends OnOffDevice {
  def on = println(&quot;heater.on&quot;)
  def off = println(&quot;heater.off&quot;)
}
class PotSensor extends SensorDevice {
  def isCoffeePresent = true
}

// =======================
// service declaring two dependencies that it wants injected
class Warmer(
  implicit val sensor: SensorDevice,
  implicit val onOff: OnOffDevice) {

  def trigger = {
    if (sensor.isCoffeePresent) onOff.on
    else onOff.off
  }
}

// =======================
// instantiate the services in a module
object Services {
  implicit val potSensor = new PotSensor
  implicit val heater = new Heater
}

// =======================
// import the services into the current scope and the wiring
// is done automatically using the implicits
import Services._

val warmer = new Warmer
warmer.trigger
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Using Google Guice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Scala works nicely with separate DI frameworks and early on we were using &lt;a href=&quot;http://code.google.com/p/google-guice/&quot;&gt;Google Guice&lt;/a&gt;. You can use Guice in many different ways, but here we will discuss a slick technique based on a &lt;code&gt;ServiceInjector&lt;/code&gt; mixin that my Jan Kriesten showed me. &lt;/p&gt;
&lt;pre&gt;
// =======================
// service interfaces
trait OnOffDevice {
  def on: Unit
  def off: Unit
}
trait SensorDevice {
  def isCoffeePresent: Boolean
}
trait IWarmer {
  def trigger
}
trait Client

// =======================
// service implementations
class Heater extends OnOffDevice {
  def on = println(&quot;heater.on&quot;)
  def off = println(&quot;heater.off&quot;)
}
class PotSensor extends SensorDevice {
  def isCoffeePresent = true
}
class @Inject Warmer(
  val potSensor: SensorDevice,
  val heater: OnOffDevice)
  extends IWarmer {

  def trigger = {
    if (potSensor.isCoffeePresent) heater.on
    else heater.off
  }
}

// =======================
// client
class @Inject Client(val warmer: Warmer) extends Client {
  warmer.trigger
}

// =======================
// Guice's configuration class that is defining the
// interface-implementation bindings
class DependencyModule extends Module {
  def configure(binder: Binder) = {
    binder.bind(classOf[OnOffDevice]).to(classOf[Heater])
    binder.bind(classOf[SensorDevice]).to(classOf[PotSensor])
    binder.bind(classOf[IWarmer]).to(classOf[Warmer])
    binder.bind(classOf[Client]).to(classOf[MyClient])
  }
}

// =======================
// Usage: val bean = new Bean with ServiceInjector
trait ServiceInjector {
  ServiceInjector.inject(this)
}

// helper companion object
object ServiceInjector {
  private val injector = Guice.createInjector(
    Array[Module](new DependencyModule))
  def inject(obj: AnyRef) = injector.injectMembers(obj)
}

// =======================
// mix-in the ServiceInjector trait to perform injection
// upon instantiation
val client = new MyClient with ServiceInjector

println(client)
&lt;/pre&gt;
&lt;p&gt;That sums up what I had planned to go through in this article. I hope that you have gained some insight in how one can do DI in Scala, either using language abstractions or a separate DI framework. What works best for you is up to your use-case, requirements and taste. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Below I have added a Cake Pattern version of the last example for easier comparison between the different DI strategies. Just a note, if you compare the different strategies using this naive example then the Cake Pattern might look a bit overly complicated with its nested (namespace) traits, but it really starts to shine when you have a less then trivial example with many components with more or less complex dependencies to manage. &lt;/p&gt;
&lt;pre&gt;
// =======================
// service interfaces
trait OnOffDeviceComponent {
  val onOff: OnOffDevice
  trait OnOffDevice {
    def on: Unit
    def off: Unit
  }
}
trait SensorDeviceComponent {
  val sensor: SensorDevice
  trait SensorDevice {
    def isCoffeePresent: Boolean
  }
}

// =======================
// service implementations
trait OnOffDeviceComponentImpl extends OnOffDeviceComponent {
  class Heater extends OnOffDevice {
    def on = println(&quot;heater.on&quot;)
    def off = println(&quot;heater.off&quot;)
  }
}
trait SensorDeviceComponentImpl extends SensorDeviceComponent {
  class PotSensor extends SensorDevice {
    def isCoffeePresent = true
  }
}
// =======================
// service declaring two dependencies that it wants injected
trait WarmerComponentImpl {
  this: SensorDeviceComponent with OnOffDeviceComponent =&gt;
  class Warmer {
    def trigger = {
      if (sensor.isCoffeePresent) onOff.on
      else onOff.off
    }
  }
}

// =======================
// instantiate the services in a module
object ComponentRegistry extends
  OnOffDeviceComponentImpl with
  SensorDeviceComponentImpl with
  WarmerComponentImpl {

  val onOff = new Heater
  val sensor = new PotSensor
  val warmer = new Warmer
}

// =======================
val warmer = ComponentRegistry.warmer
warmer.trigger
&lt;/pre&gt;</content>
		<author>
			<name>Jonas Boner</name>
			<uri>http://jonasboner.com</uri>
		</author>
		<source>
			<title type="html">Jonas Bonér</title>
			<subtitle type="html">Down To The Bone</subtitle>
			<link rel="self" href="http://jonasboner.com/category/scala/feed"/>
			<id>http://jonasboner.com/category/scala/feed</id>
			<updated>2008-10-14T17:20:27+00:00</updated>
		</source>
	</entry>

	<entry xml:lang="en">
		<title type="html">Software Transactional Memory in Scala</title>
		<link href="http://www.codecommit.com/blog/scala/software-transactional-memory-in-scala"/>
		<id>http://www.codecommit.com/blog/scala/software-transactional-memory-in-scala</id>
		<updated>2008-10-06T07:00:00+00:00</updated>
		<content type="html">&lt;p&gt;The fact is that there are a lot of problems that are hard to solve in a purely-functional style.&amp;#160; That&amp;#8217;s not to say that no solution exists, but certain problems are very difficult to model without shared state.&amp;#160; In such situations, a slightly different approach to concurrency must be considered.&amp;#160; Actors are inapplicable, seeing as they are the embodiment of &amp;#8220;shared-nothing&amp;#8221; continuation passing, and &lt;a href=&quot;http://www.codecommit.com/blog/scala/higher-order-fork-join-operators&quot;&gt;fork/join&lt;/a&gt; doesn&amp;#8217;t really help us.&amp;#160; Usually, when faced with the need for shared mutable state, most developers will resort to the old-fashioned technique of locking everything and controlling access to that state one thread at a time.&amp;#160; The solution often goes something like this:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;java5&quot;&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Container &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; value;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ReadWriteLock lock = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ReentrantReadWriteLock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;;
&amp;nbsp;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        lock.&lt;span&gt;readLock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;;
        &lt;span&gt;try&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; value;
        &lt;span&gt;&amp;#125;&lt;/span&gt; &lt;span&gt;finally&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
            lock.&lt;span class=&quot;me1&quot;&gt;readLock&lt;/span&gt;.&lt;span&gt;unlock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;;
        &lt;span&gt;&amp;#125;&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; value&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        lock.&lt;span&gt;writeLock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;;
        &lt;span&gt;try&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;value&lt;/span&gt; = value;
        &lt;span&gt;&amp;#125;&lt;/span&gt; &lt;span&gt;finally&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
            lock.&lt;span class=&quot;me1&quot;&gt;writeLock&lt;/span&gt;.&lt;span&gt;unlock&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;;
        &lt;span&gt;&amp;#125;&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Obviously, most scenarios which call for such locking are a bit more complex, but you get the picture.&amp;#160; There are two very serious problems with locking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementation rules are &lt;em&gt;ad hoc&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Throughput is reduced &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first issue is obvious: there is nothing actually &lt;em&gt;preventing&lt;/em&gt; us from accessing &lt;code&gt;value&lt;/code&gt; without locking.&amp;#160; What&amp;#8217;s worse, it would be just as easy to lock, access &lt;code&gt;value&lt;/code&gt; and then forget to unlock when we were done.&amp;#160; There is no logical connection between &lt;code&gt;value&lt;/code&gt; and its lock, the implementation rules are solely enforced by convention.&amp;#160; Of course, we can avoid the problem of forgetting to unlock by using a locking strategy which is lexical in nature, but in that case our second issue (throughput) becomes even more pronounced:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;java5&quot;&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; value;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object lock = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;;
&amp;nbsp;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;lock&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; value;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setValue&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; value&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;lock&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;value&lt;/span&gt; = value;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The problem here is that everything blocks everything else.&amp;#160; If one thread wants to retrieve value, it literally stops the world while the other threads wait their turn.&amp;#160; Data integrity is guaranteed, but this was accomplished only by creating a serial bottleneck on read/write access to value.&amp;#160; On top of that, we still have no enforced correlation between the lock and its corresponding piece of data.&lt;/p&gt;
&lt;h3&gt;&amp;#8220;Glass is Half Full&amp;#8221; Concurrency&lt;/h3&gt;
&lt;p&gt;What we have been doing here is called &amp;#8220;pessimistic locking&amp;#8221;.&amp;#160; We have literally started with the assumption that we are going to run into data contention issues.&amp;#160; Our entire locking mechanism is designed with the worst case scenario in-mind: lots of threads trying to write to the same piece of data simultaneously.&amp;#160; However, not &lt;em&gt;every&lt;/em&gt; concurrent system is going to have constant interference between threads.&amp;#160; As it turns out, in practice data contention is the exception rather than the rule.&amp;#160; Given this, it would be very nice if we could design a system which gave threads the &amp;#8220;benefit of the doubt&amp;#8221;, assuming that they will &lt;em&gt;not&lt;/em&gt; conflict, while still somehow maintaining data integrity.&lt;/p&gt;
&lt;p&gt;The answer to this is &amp;#8220;optimistic locking&amp;#8221;.&amp;#160; We turn the problem completely on its head.&amp;#160; Instead of assuming that there will be problems and so locking everything preemptively, we assume that everything will be fine and just allow everyone free, non-blocking access.&amp;#160; Of course, an &amp;#8220;open-door policy&amp;#8221; with regards to shared mutable state isn&amp;#8217;t enough in and of itself, we have to have some rule for dealing with contention issues, and some way of detecting those conflicts when they happen.&amp;#160; Enter transactions&amp;#8230;&lt;/p&gt;
&lt;p&gt;The idea behind a purely-optimistic transactional memory model is that all write operations must occur within a transaction.&amp;#160; Data can be read any time, but the memory model will ensure that the data is never in an &amp;#8220;intermediate state&amp;#8221; - or between writes.&amp;#160; Let&amp;#8217;s consider the more complicated scenario of the transfer of funds from one bank account to another.&amp;#160; The steps are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Withdraw $500 from account &lt;strong&gt;A&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Deposit $500 into account &lt;strong&gt;B&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, this isn&amp;#8217;t really an algorithm, it&amp;#8217;s a high-level overview.&amp;#160; We&amp;#8217;re really looking at something a bit more complicated than it would seem:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;amount: &lt;span&gt;Int&lt;/span&gt;, a: Account, b: Account&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  a.&lt;span class=&quot;me1&quot;&gt;balance&lt;/span&gt; = a.&lt;span class=&quot;me1&quot;&gt;balance&lt;/span&gt; - amount
  b.&lt;span class=&quot;me1&quot;&gt;balance&lt;/span&gt; = b.&lt;span class=&quot;me1&quot;&gt;balance&lt;/span&gt; + amount
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;I avoided using the &lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;-=&lt;/code&gt; operators so as to illustrate the problem more explicitly.&amp;#160; This operation has four separate operations on shared mutable state (the account balance).&amp;#160; It&amp;#8217;s not too difficult to see how this could go terribly wrong in the case where two separate transfers are taking place simultaneously.&amp;#160; For example, we could transfer $500 from account &lt;strong&gt;A&lt;/strong&gt; into account &lt;strong&gt;B&lt;/strong&gt;, while &lt;em&gt;at the same time&lt;/em&gt; we transfer $200 from account &lt;strong&gt;B&lt;/strong&gt; into account &lt;strong&gt;C&lt;/strong&gt;.&amp;#160; Remember, we&amp;#8217;re not locking anything, so we run the danger that our concurrent execution order will be interleaved in the following fashion:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[Thread1]&lt;/code&gt; Get balance of account &lt;strong&gt;A&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Thread1]&lt;/code&gt; Set balance of account &lt;strong&gt;A&lt;/strong&gt; to its former amount less 500 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Thread1]&lt;/code&gt; Get balance of account &lt;strong&gt;B&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Thread2]&lt;/code&gt; Get balance of account &lt;strong&gt;B&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Thread1]&lt;/code&gt; Set balance of account &lt;strong&gt;B&lt;/strong&gt; to its former amount plus 500 &lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;#ff0000&quot;&gt;&lt;code&gt;[Thread2]&lt;/code&gt; Set balance of account &lt;strong&gt;B&lt;/strong&gt; to its former amount less 200&lt;/font&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Thread2]&lt;/code&gt; Get balance of account &lt;strong&gt;C&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Thread2]&lt;/code&gt; Set balance of account &lt;strong&gt;C&lt;/strong&gt; to its former amount plus 200 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The operation in red is the one we need to be concerned about.&amp;#160; &lt;code&gt;Thread2&lt;/code&gt; retrieved the balance of account &lt;strong&gt;B&lt;/strong&gt; just prior to when it was modified by &lt;code&gt;Thread1&lt;/code&gt;.&amp;#160; This means that when &lt;code&gt;Thread2&lt;/code&gt; calculates the new balance (less 200), it will be basing its result on a now-obsolete balance.&amp;#160; When it sets the balance, the $500 that was transferred from account &lt;strong&gt;A&lt;/strong&gt; will mysteriously vanish, the unfortunate victim of a common race condition.&lt;/p&gt;
&lt;p&gt;In a transactional system, both transfers would be separately handled in their own transaction.&amp;#160; Neither of them would modify the other&amp;#8217;s data until all operations are completed, at which point the transaction would commit and the data would become &amp;#8220;live&amp;#8221;.&amp;#160; Thus, when the &lt;code&gt;Thread1&lt;/code&gt; adds $500 to account &lt;strong&gt;B&lt;/strong&gt;, the actual balance of account &lt;strong&gt;B&lt;/strong&gt; will remain constant at its original value (prior to the transaction).&amp;#160; Once the transaction commits, both the balance of &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; will be updated essentially simultaneously.&amp;#160; There will never be a point where $500 is discovered missing &amp;#8220;in transit&amp;#8221; between two accounts.&lt;/p&gt;
&lt;p&gt;This is only half the equation though.&amp;#160; The real genius of the transactional model is just prior to committing, a transaction &lt;em&gt;validates&lt;/em&gt; itself, ensuring that all of the data it worked with is still in the same state it was at the beginning of the transaction.&amp;#160; If something has changed, then the transaction is invalidated and must be re-run automatically.&amp;#160; Our issue from above can never happen because the &lt;code&gt;Thread2&lt;/code&gt; transaction will attempt to validate itself, only to discover that the balance of account &lt;strong&gt;B&lt;/strong&gt; has been changed in the meantime.&amp;#160; Rather than yield to the race condition, the &lt;code&gt;Thread2&lt;/code&gt; transaction will throw away its work and start from scratch.&amp;#160; Assuming that nothing else is running, the second validation will be successful (since nothing will have changed concurrently) and the transaction will commit.&lt;/p&gt;
&lt;p&gt;It all sounds much more complicated than it actually is.&amp;#160; People familiar with modern databases like Oracle should already be comfortable working with optimistic transactional models.&amp;#160; The technique is a little less common in software, but it can still be applied.&lt;/p&gt;
&lt;p&gt;In order to make this work in a conventional application setting, we need to introduce a few more abstractions.&amp;#160; There are several ways to go about this, but I have chosen to follow the model laid down by Rich Hickey in his implementation of Clojure&amp;#8217;s STM.&amp;#160; In turn, Clojure seems to take a fair bit of inspiration from Haskell&amp;#8217;s STM monad, although it does not port over concepts like transaction composition and what Simon Payton Jones calls &amp;#8220;choice&amp;#8221;.&amp;#160; Basically, the design can be distilled as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each item of shared state must be stored in a &lt;em&gt;reference&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;References can be read at any point, but they can only be modified within a transaction &lt;/li&gt;
&lt;li&gt;The data contained within a reference must itself be immutable, the reference simply allows you to switch the data it contains &lt;/li&gt;
&lt;li&gt;Within a transaction, reading a reference does not return its current value, but rather the value it had precisely when the transaction began.&amp;#160; This allows data to change outside the transaction without disrupting its internal processing. &lt;/li&gt;
&lt;li&gt;Changes made to a reference inside a transaction are not world-visible until the transaction completes and is committed.&amp;#160; Validation ensures that no data is lost during the commit. &lt;/li&gt;
&lt;li&gt;Transactions must &lt;em&gt;never &lt;/em&gt;contain side-effects as they may be executed multiple times &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all that in mind, let&amp;#8217;s get to work on an implementation!&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;Since these are the primitive building blocks of our STM, it seems logical that we should start here.&amp;#160; At an extremely basic level, we will need a structure which looks something like the following:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;class&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; value: T&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; get = value
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; :=&lt;span&gt;&amp;#40;&lt;/span&gt;value: T&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;value&lt;/span&gt; = value
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This is the basic idea anyway.&amp;#160; We want to be able to retrieve a value from a reference using &lt;code&gt;get&lt;/code&gt;, and we want to be able to store a value in the reference using the &lt;code&gt;:=&lt;/code&gt; operator (hat tip to all of you rabid Pascal fan-boys).&amp;#160; Unfortunately, we haven&amp;#8217;t really accomplished anything here.&amp;#160; Yes, we have a reference to wrap around a mutable piece of data, but there are no associated concurrency semantics.&amp;#160; Remember the definition of a reference?&amp;#160; We must &lt;em&gt;only&lt;/em&gt; be able to write to it within a transaction.&amp;#160; Furthermore, the value returned from a reference within a transaction is not necessarily its current, world-visible state, but rather the data it had the moment the transaction began.&lt;/p&gt;
&lt;p&gt;In order to accommodate these requirements, we will introduce the concept of a &lt;em&gt;context&lt;/em&gt;.&amp;#160; Both read and write access to a reference will require a context to be present.&amp;#160; We will have one context for the entirety of world-visible state.&amp;#160; Additionally, each transaction will have its own context.&amp;#160; In that way, we can ensure that transaction modifications are kept local to itself prior to commit while at the same time preventing changes from other transactions from becoming visible after the transaction has started (potentially leading to data integrity problems).&amp;#160; Our API has now evolved to something more like the following:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;class&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; value: T&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;// ???&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;c: Context&lt;span&gt;&amp;#41;&lt;/span&gt; = c.&lt;span&gt;retrieve&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; :=&lt;span&gt;&amp;#40;&lt;/span&gt;value: T&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;c: Context&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    c.&lt;span&gt;store&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;value&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;I left the constructor undefined because of the fairly obvious problem in this implementation: how does the &lt;code&gt;Context&lt;/code&gt; get the values in the first place?&amp;#160; For the moment, let&amp;#8217;s put that problem aside and deal with a more interesting one: limiting write access to within transactions.&amp;#160; Recall that we&amp;#8217;re going to have two different kinds of contexts: a live context which is global, as well as a context which is local to the transaction.&amp;#160; The requirement alone implies a way to &lt;em&gt;statically&lt;/em&gt; restrict reference mutability to within transactions: require a type of context &lt;em&gt;other&lt;/em&gt; than the live one.&amp;#160; To this end, we will derive the following closed hierarchy.&amp;#160; It is closed because there will be no other &lt;code&gt;Context&lt;/code&gt; implementations, preventing over-zealous API extensions from fouling up our semantics.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img title=&quot;image&quot; height=&quot;126&quot; alt=&quot;image&quot; src=&quot;http://www.codecommit.com/blog/wp-content/uploads/2008/10/image.png&quot; width=&quot;386&quot; border=&quot;0&quot; /&gt; &lt;/p&gt;
&lt;p&gt;We will define &lt;code&gt;Context&lt;/code&gt; to be an abstract class and &lt;code&gt;LiveContext&lt;/code&gt; to be a singleton object.&amp;#160; Each transaction will have its own &lt;code&gt;Transaction&lt;/code&gt; context which it will use in both read &lt;em&gt;and&lt;/em&gt; write operations.&amp;#160; &lt;code&gt;LiveContext&lt;/code&gt; will only be used outside of a transaction, when there is no other context available.&amp;#160; To enforce this, we will restrict the type of the &lt;code&gt;Context&lt;/code&gt; taken by the reference assignment operator to only accept &lt;code&gt;Transaction&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;def&lt;/span&gt; :=&lt;span&gt;&amp;#40;&lt;/span&gt;value: T&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;c: Transaction&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  c.&lt;span&gt;store&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;value&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;With this in mind, we can start to envision what the syntax for reference operations will look like:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;amount: &lt;span&gt;Int&lt;/span&gt;, a: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;, b: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;c: Transaction&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  a.:=&lt;span&gt;&amp;#40;&lt;/span&gt;a.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;c&lt;span&gt;&amp;#41;&lt;/span&gt; - amount&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;c&lt;span&gt;&amp;#41;&lt;/span&gt;
  b.:=&lt;span&gt;&amp;#40;&lt;/span&gt;b.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;c&lt;span&gt;&amp;#41;&lt;/span&gt; + amount&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;c&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;// ...&lt;/span&gt;
&lt;span&gt;val&lt;/span&gt; accountA = &lt;span&gt;new&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1500&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;val&lt;/span&gt; accountB = &lt;span&gt;new&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;// somehow call `transfer` as a transaction&lt;/span&gt;
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Account A: &amp;quot;&lt;/span&gt; + accountA.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;LiveContext&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Account B: &amp;quot;&lt;/span&gt; + accountB.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;LiveContext&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;And just when our design was looking so nice too.&amp;#160; We&amp;#8217;ve succeeded in preventing &lt;em&gt;at compile time&lt;/em&gt; the modification of references outside of transactions, but we did it at the cost of a tyrannical syntax.&amp;#160; Fortunately, Scala has a handy mechanism for cleaning up syntax such as this, one which should reduce the volume of annoying bulk by several orders of magnitude: implicits.&lt;/p&gt;
&lt;p&gt;IScala makes it possible to mark parameters as accepting implicit values.&amp;#160; These parameters in turn become implicit values themselves.&amp;#160; When a method which accepts an implicit parameter of a specific type is called with an implicit value of the same type in scope, the parameter can be omitted entirely.&amp;#160; Thus, by marking &lt;code&gt;LiveContext&lt;/code&gt; as an implicit object and appropriately annotating the last parameter of &lt;code&gt;transfer&lt;/code&gt; as well as the &lt;code&gt;Context&lt;/code&gt; parameters of &lt;code&gt;Ref&lt;/code&gt;&amp;#8217;s accessor and mutator, we can eliminate almost all of the annoying bulk in the above example:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;implicit&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; LiveContext &lt;span&gt;extends&lt;/span&gt; Context &lt;span&gt;&amp;#123;&lt;/span&gt;
  ...
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;class&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;value: T&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;// ???&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; c: Context&lt;span&gt;&amp;#41;&lt;/span&gt; = c.&lt;span&gt;retrieve&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; :=&lt;span&gt;&amp;#40;&lt;/span&gt;value: T&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; c: Transfer&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    c.&lt;span&gt;store&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;value&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;With these extra modifiers in place, we can redo our transfer snippet to see how things look.&amp;#160; To cut down on line length, we will also assume that &lt;code&gt;accountA&lt;/code&gt; and &lt;code&gt;accountB&lt;/code&gt; are references in some sort of global scope:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;val&lt;/span&gt; accountA = &lt;span&gt;new&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1500&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;val&lt;/span&gt; accountB = &lt;span&gt;new&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; &lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;amount: &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; t: Transaction&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  accountA := accountA.&lt;span class=&quot;me1&quot;&gt;get&lt;/span&gt; - amount
  accountB := accountB.&lt;span class=&quot;me1&quot;&gt;get&lt;/span&gt; + amount
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;// somehow call `transfer` as a transaction&lt;/span&gt;
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Account A: &amp;quot;&lt;/span&gt; + accountA.&lt;span class=&quot;me1&quot;&gt;get&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Account B: &amp;quot;&lt;/span&gt; + accountB.&lt;span class=&quot;me1&quot;&gt;get&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Pretty slick, and we aren&amp;#8217;t even finished yet!&amp;#160; We can add an implicit conversion from &lt;code&gt;Ref[T]&lt;/code&gt; to &lt;code&gt;T&lt;/code&gt;, eliminating the need to call &lt;code&gt;get&lt;/code&gt; anywhere in the code:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;implicit&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; refToValue&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; c: Context&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
  ref.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;c&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&amp;#8230;and the final example syntax:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;val&lt;/span&gt; accountA = &lt;span&gt;new&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1500&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;val&lt;/span&gt; accountB = &lt;span&gt;new&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; &lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;amount: &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; t: Transaction&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  accountA := accountA - amount
  accountB := accountB + amount
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;// somehow call `transfer` as a transaction&lt;/span&gt;
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Account A: &amp;quot;&lt;/span&gt; + accountA&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Account B: &amp;quot;&lt;/span&gt; + accountB&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;With the exception of the &lt;code&gt;:=&lt;/code&gt; syntax (which is unfortunately unavoidable), you would never be able to tell that references are being used rather than conventional vars.&amp;#160; Even better, we have managed to preserve our static assurance that no reference may be modified outside of a transaction.&amp;#160; If we were to attempt to call the &lt;code&gt;:=&lt;/code&gt; method without an instance of &lt;code&gt;Transaction&lt;/code&gt; on-hand, the Scala type checker would complain and our code would not compile.&amp;#160; The we need to do to close the loop is to make sure that the only place a &lt;code&gt;Transaction&lt;/code&gt; instance can be obtained is inside a transaction (seems logical).&lt;/p&gt;
&lt;h3&gt;Atomic&lt;/h3&gt;
&lt;p&gt;For the moment, let&amp;#8217;s shelve all of the implementation requirements for the STM and instead focus on the API.&amp;#160; We already have an almost elegant syntax for references, but we&amp;#8217;re still missing one final piece: initiating the transaction.&amp;#160; Being incredibly imaginative and innately creative, I decided the best way to devise an API for this would be to hit Wikipedia.&amp;#160; After all, why come up with something original when someone smarter has already solved the problem?&lt;/p&gt;
&lt;pre&gt; // Insert a node into a doubly-linked list atomically
 atomic {
     newNode-&amp;gt;prev = node;
     newNode-&amp;gt;next = node-&amp;gt;next;
     node-&amp;gt;next-&amp;gt;prev = newNode;
     node-&amp;gt;next = newNode;
 }

 atomic (queueSize &amp;gt; 0) {
     remove item from queue and use it
 }&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; &lt;a title=&quot;http://en.wikipedia.org/wiki/Software_transactional_memory#Proposed_language_support&quot; href=&quot;http://en.wikipedia.org/wiki/Software_transactional_memory#Proposed_language_support&quot;&gt;Software transactional memory # Proposed language support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a fairly straightforward API, one which could be expressed in Scala as it stands if we really wanted to.&amp;#160; Obviously the body of the first transaction is a little closer to C than Scala, but we can just take that as example pseudo-code and move on.&amp;#160; The real core of the API is a single method, &lt;code&gt;atomic&lt;/code&gt;, which takes a function value and executes that function as a transaction.&amp;#160; If a conditional is provided, it acts as a guard.&amp;#160; If the guard ever returns &lt;code&gt;false&lt;/code&gt;, the transaction aborts and is not retried.&lt;/p&gt;
&lt;p&gt;The only problem here is we haven&amp;#8217;t accounted for our implicit &lt;code&gt;Transaction&lt;/code&gt; parameter.&amp;#160; Intuitively, we could just add a parameter of type &lt;code&gt;Transaction&lt;/code&gt; to the function value, but unfortunately Scala doesn&amp;#8217;t allow anonymous functions with implicit parameters.&amp;#160; That leaves one of two options: either take the &lt;code&gt;Transaction&lt;/code&gt; as a parameter to the anonymous function and then store it in an implicit value &lt;em&gt;within&lt;/em&gt; the function; or pass an actual method which takes an implicit parameter.&amp;#160; In truth, either approach will work, but for the remainder of the article I will use the method-passing approach, rather than the separate assignment within the anonymous method.&lt;/p&gt;
&lt;p&gt;Altogether, our API in action looks something like this:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;val&lt;/span&gt; accountA = &lt;span&gt;new&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1500&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;val&lt;/span&gt; accountB = &lt;span&gt;new&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; &lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;amount: &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; t: Transaction&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  accountA := accountA - amount
  accountB := accountB + amount
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;atomic&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;_&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;    &lt;span&gt;// run transaction&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Account A: &amp;quot;&lt;/span&gt; + accountA&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Account B: &amp;quot;&lt;/span&gt; + accountB&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Notice the extra &lt;code&gt;(_)&lt;/code&gt; syntax in the call to atomic.&amp;#160; (thanks, &lt;a href=&quot;http://jnordenberg.blogspot.com/&quot;&gt;Jesper&lt;/a&gt;!)&amp;#160; This is required because transfer accepts an implicit parameter.&amp;#160; Without it, Scala doesn&amp;#8217;t know whether we mean to call the method using some implicit value in scope or if we want the function value itself.&lt;/p&gt;
&lt;p&gt;Remember this API.&amp;#160; We&amp;#8217;ll come back to the implementation of this method after we have completed the rest of the framework.&amp;#160; For now, let&amp;#8217;s move onto context&amp;#8230;&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;Returning to the dark and mysterious internals of the implementation, we now come to the deep morass of &lt;code&gt;Context&lt;/code&gt;.&amp;#160; As it turns out, everything in the STM will revolve around this class and its two separate implementations.&amp;#160; Recall that it is responsible for retrieving reference values, controlling what data is visible from within a transaction and what data is live.&amp;#160; Generally speaking, we are going to have the following design with respect to where reference data is handled:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If in &lt;code&gt;LiveContext&lt;/code&gt;, access the One True copy of the data. &lt;/li&gt;
&lt;li&gt;If in &lt;code&gt;Transaction&lt;/code&gt;, access the One True copy &lt;em&gt;if and only if&lt;/em&gt; there is no transaction-local version.&amp;#160; Once the reference has been read, cache the data and return that value from all future reads within the transaction.&amp;#160; We&amp;#8217;re cheating a bit here since we aren&amp;#8217;t taking a snapshot of the world on transaction start, we&amp;#8217;re waiting for the first reference read.&amp;#160; As long as we get our validation right, this should be ok. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logically, this is a simple default operation clouded by a fairly substantive special case (within a transaction after the reference has been read or written once).&amp;#160; To handle the special case, it only makes sense that we use a map from reference to the data to which it corresponds in that transaction.&amp;#160; Remember that the data within a transaction may be a bit behind the live copy.&lt;/p&gt;
&lt;p&gt;We could use another map for the general case, but we can make things even simpler than that.&amp;#160; Rather than having a global map from reference to value, we can just store the live values within the &lt;code&gt;Ref&lt;/code&gt; objects themselves.&amp;#160; They will still need to delegate to their context to retrieve and store that value, but the actual live version can be kept locally.&amp;#160; This simplifies &lt;code&gt;LiveContext&lt;/code&gt; tremendously:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;class&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;private&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;stm&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; value: T&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; c: Context&lt;span&gt;&amp;#41;&lt;/span&gt; = c.&lt;span&gt;retrieve&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; :=&lt;span&gt;&amp;#40;&lt;/span&gt;value: T&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; t: Transaction&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    t.&lt;span&gt;store&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;value&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;// ...&lt;/span&gt;
&lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Context &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; retrieve&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;: T
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;implicit&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; LiveContext &lt;span&gt;extends&lt;/span&gt; Context &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; retrieve&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = ref.&lt;span class=&quot;me1&quot;&gt;value&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In this iteration, we have simplified &lt;code&gt;Context&lt;/code&gt; a little bit, seeing as it is never actually used for storage.&amp;#160; Notice that all we need to do in &lt;code&gt;LiveContext&lt;/code&gt; is delegate right back to the reference.&amp;#160; This may seem like a bit of superfluous indirection but it becomes absolutely essential once we start considering &lt;code&gt;Transaction&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;import&lt;/span&gt; collection._
&amp;nbsp;
&lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Transaction private&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;stm&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; Context &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; world = mutable.&lt;span class=&quot;me1&quot;&gt;Map&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Ref&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; retrieve&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; castRef = ref.&lt;span class=&quot;me1&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Ref&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;!world.&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;castRef&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;world&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;castRef&lt;span&gt;&amp;#41;&lt;/span&gt; = ref.&lt;span class=&quot;me1&quot;&gt;value&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&amp;nbsp;
&amp;nbsp;
&amp;nbsp;
    &lt;span&gt;world&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;castRef&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; store&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;value: T&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; castRef = ref.&lt;span class=&quot;me1&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Ref&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;
    &lt;span&gt;world&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;castRef&lt;span&gt;&amp;#41;&lt;/span&gt; = value
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This is the reason we needed to redirect through retrieve rather than just grabbing the value directly in &lt;code&gt;Ref&lt;/code&gt;.&amp;#160; Within a transaction, any dereferencing will polymorphically come to an instance of this class.&amp;#160; The mutable map, world, handles the transaction-local cache of all values once they have been accessed.&amp;#160; Thus, the reference can change after we have looked at it (when another transaction commits) and it doesn&amp;#8217;t affect the values local to our transaction.&amp;#160; This technique is exceedingly powerful and in no small part responsible for the higher throughput made possible by the transactional model.&lt;/p&gt;
&lt;p&gt;Incidentally, it is worth noting that within a transaction, references are not thread safe.&amp;#160; Thus, if you start a transaction and then start manipulating references concurrently within that same transaction, bad things will happen.&amp;#160; This isn&amp;#8217;t really a problem though because transactions are always designed to be single-threaded from start to finish.&amp;#160; They are &lt;em&gt;used&lt;/em&gt; in multi-threaded situations, they do not &lt;em&gt;use&lt;/em&gt; multiple threads.&lt;/p&gt;
&lt;h3&gt;Commitment&lt;/h3&gt;
&lt;p&gt;Now that we have the basic nuts and bolts of our STM framework, we need to start considering how we are going to commit transactions.&amp;#160; The process is two fold: first, we validate all references either read or written to by the transaction, checking for anything which may have changed in the interim; and second, we copy all new data from our transaction-local cache into the live references.&amp;#160; For the sake of simplicity, we will only allow one transaction to commit at a time.&amp;#160; We could do a little better, but this should work just fine for the experimental stuff.&lt;/p&gt;
&lt;p&gt;Validation is a toughy, but the second commit step is fairly easy to satisfy: just loop through a set of all writes and copy the changes into the corresponding &lt;code&gt;Ref&lt;/code&gt;.&amp;#160; The necessary changes are as follows:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Transaction private&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;stm&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; Context &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; world = mutable.&lt;span class=&quot;me1&quot;&gt;Map&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Ref&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; writes = mutable.&lt;span class=&quot;me1&quot;&gt;Set&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Ref&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
  ...
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; store&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;v: T&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; castRef = ref.&lt;span class=&quot;me1&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Ref&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;world&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;castRef&lt;span&gt;&amp;#41;&lt;/span&gt; = v
    writes += castRef
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;commit&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
    CommitLock.&lt;span class=&quot;me1&quot;&gt;synchronized&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;// TODO  validate&lt;/span&gt;
&amp;nbsp;
      &lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;ref &amp;lt;- writes&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        ref.&lt;span class=&quot;me1&quot;&gt;value&lt;/span&gt; = &lt;span&gt;world&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref&lt;span&gt;&amp;#41;&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;true&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
private&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;stm&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; CommitLock&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;commit&lt;/code&gt; method returns a &lt;code&gt;Boolean&lt;/code&gt; value indicating whether or not the commit was successful.&amp;#160; If a conflict was detected the method returns &lt;code&gt;false&lt;/code&gt; and (presumably) the transaction will be tried again.&amp;#160; Since we aren&amp;#8217;t doing any validation just yet, we will always return &lt;code&gt;true&lt;/code&gt;.&amp;#160; Note that we don&amp;#8217;t really have to lock anything related to the &lt;code&gt;Ref&lt;/code&gt; instances in order to write their data.&amp;#160; It is possible for another thread to be reading data from these same references at precisely the same time as we are writing to them.&amp;#160; However, primitive memory operations are atomic by definition, meaning that we don&amp;#8217;t need to worry about data integrity on the level of a reference value.&lt;/p&gt;
&lt;p&gt;Validation is actually the most important part of the transaction commit process and quite possibly the most important facet of the entire STM concept.&amp;#160; Without it, there is nothing to prevent data integrity from breaking down and causing problems.&amp;#160; (remember that $500 we lost?)&amp;#160; Unfortunately, our system doesn&amp;#8217;t quite have the chops yet to support any sort of transaction validation.&lt;/p&gt;
&lt;p&gt;In order to validate a &lt;code&gt;Ref&lt;/code&gt;, we need to compare its state to the state it was in at the moment we read from it or wrote to it (meaning into the transaction-local cache).&amp;#160; We can&amp;#8217;t just compare values, partially because equals isn&amp;#8217;t fast enough, but also because it doesn&amp;#8217;t provide a strong enough guarantee about whether or not data has changed.&amp;#160; What we need is some value which we control which indicates deterministically the current state of a &lt;code&gt;Ref&lt;/code&gt; and which can be used later to determine if that state has changed.&amp;#160; In short, we need a revision number:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;class&lt;/span&gt; Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;value: T&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  private&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;stm&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; contents = &lt;span&gt;&amp;#40;&lt;/span&gt;value, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;    &lt;span&gt;// init revision to 0&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The revision numbers have to be controlled statically with thread-safety, so the best place for them should be in the &lt;code&gt;Transaction&lt;/code&gt; singleton.&amp;#160; &lt;code&gt;Transaction&lt;/code&gt; (the companion object for &lt;code&gt;Transaction&lt;/code&gt; the &lt;code&gt;Context&lt;/code&gt;) also contains our implicit conversion as well as that enigmatic &lt;code&gt;atomic&lt;/code&gt; method that we still have yet to implement.&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;object&lt;/span&gt; Transaction &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; rev_ = &lt;span&gt;1&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; revLock = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;AnyRef&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; rev = revLock.&lt;span class=&quot;me1&quot;&gt;synchronized&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; back = rev_
    rev_ += &lt;span&gt;1&lt;/span&gt;
    back
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  ...
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Empowered by a revision increment system which is guaranteed to produce unique values for each invocation, we can expand upon our concept just a little bit.&amp;#160; Each &lt;code&gt;Transaction&lt;/code&gt; will have a unique revision number associated with it (maintained within the &lt;code&gt;rev&lt;/code&gt; field).&amp;#160; Assuming a transaction successfully commits, it will not only modify the value of the references in question but also their revision, which it will set to its own number.&lt;/p&gt;
&lt;p&gt;This revision system can be used in validation of transaction commit.&amp;#160; Whenever we read or write to a Ref for the first time, we will store its current revision number within the transaction.&amp;#160; When it comes time to commit the transaction, we can loop over our revision map and compare with the actual revision of the reference in question.&amp;#160; If all of the expected revisions match up with reality, the transaction checks out and we can go ahead and commit.&amp;#160; Otherwise, we have to assume that a transaction operating concurrently modified a reference we used and committed after we started our own transaction.&amp;#160; Once this is known, we can&amp;#8217;t simply commit over the other transaction&amp;#8217;s changes, throwing away all of that money.&amp;#160; Our transaction &lt;em&gt;must&lt;/em&gt; be retried from scratch.&lt;/p&gt;
&lt;p&gt;Now that we know how to validate, we can finally look at a completed version of commit (and supporting cast):&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Transaction private&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;stm&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;val&lt;/span&gt; rev: &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; Context &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; world = mutable.&lt;span class=&quot;me1&quot;&gt;Map&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Ref&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; writes = mutable.&lt;span class=&quot;me1&quot;&gt;Set&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Ref&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; version = mutable.&lt;span class=&quot;me1&quot;&gt;Map&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Ref&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Any&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;Int&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; retrieve&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
    ...
&amp;nbsp;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;!world.&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;castRef&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      ...
&amp;nbsp;
      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;!version.&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;castRef&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        &lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;castRef&lt;span&gt;&amp;#41;&lt;/span&gt; = castRef.&lt;span class=&quot;me1&quot;&gt;contents&lt;/span&gt;._2
      &lt;span&gt;&amp;#125;&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    ...
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; store&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;T&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;v: T&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    ...
&amp;nbsp;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;!version.&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;castRef&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;castRef&lt;span&gt;&amp;#41;&lt;/span&gt; = ref.&lt;span class=&quot;me1&quot;&gt;contents&lt;/span&gt;._2
    &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
    ...
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;commit&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
    CommitLock.&lt;span class=&quot;me1&quot;&gt;synchronized&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;val&lt;/span&gt; back = world.&lt;span&gt;foldLeft&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;success, tuple&lt;span&gt;&amp;#41;&lt;/span&gt; =&amp;gt;
        &lt;span&gt;val&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;ref, _&lt;span&gt;&amp;#41;&lt;/span&gt; = tuple
        success &amp;amp;&amp;amp; ref.&lt;span class=&quot;me1&quot;&gt;contents&lt;/span&gt;._2 == &lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref&lt;span&gt;&amp;#41;&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;back&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;ref &amp;lt;- writes&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
          ref.&lt;span class=&quot;me1&quot;&gt;contents&lt;/span&gt; = &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;world&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ref&lt;span&gt;&amp;#41;&lt;/span&gt;, rev&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;&amp;#125;&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
      back
    &lt;span&gt;&amp;#125;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s a lot of code, but all fairly straightforward.&amp;#160; The validation simply bears out our intuition: checking the revisions initially retrieved from the references with their current values.&amp;#160; Here again we are making use of the fact that memory access is atomic.&amp;#160; We don&amp;#8217;t need to worry about a revision changing out of sync with a value because both of them are encapsulated by a 2-tuple within the &lt;code&gt;Ref&lt;/code&gt; itself.&amp;#160; Meanwhile, the validation can be trusted because of the &lt;code&gt;CommitLock&lt;/code&gt;: we don&amp;#8217;t need to worry about another transaction committing between our validation and when we actually get around to saving our values.&lt;/p&gt;
&lt;h3&gt;Atomic 2.0&lt;/h3&gt;
&lt;p&gt;I said we would come back to this, and here we are!&amp;#160; We never did implement the &lt;code&gt;atomic&lt;/code&gt; method, which is a bit of a shame seeing as it is what is responsible for kicking off the entire transactional process.&amp;#160; Not only that, but it creates the &lt;code&gt;Transaction&lt;/code&gt; instance, ensures that the transaction gets committed once it has finished and it retries if that commit fails.&amp;#160; Set in code, it looks something like this:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;def&lt;/span&gt; atomic&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;A&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;f: &lt;span&gt;&amp;#40;&lt;/span&gt;Transaction&lt;span&gt;&amp;#41;&lt;/span&gt;=&amp;gt;A&lt;span&gt;&amp;#41;&lt;/span&gt;: A = &lt;span&gt;atomic&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;f&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; atomic&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;A&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;cond: =&amp;gt;Boolean&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;f: &lt;span&gt;&amp;#40;&lt;/span&gt;Transaction&lt;span&gt;&amp;#41;&lt;/span&gt;=&amp;gt;A&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;attemptTransact&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;: A = &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;cond&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
      &lt;span&gt;val&lt;/span&gt; trans = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Transaction&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;rev&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
      &lt;span&gt;try&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        &lt;span&gt;val&lt;/span&gt; result = &lt;span&gt;f&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;trans&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;trans.&lt;span&gt;commit&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; result &lt;span&gt;else&lt;/span&gt; &lt;span&gt;attemptTransact&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; _ =&amp;gt; &lt;span&gt;attemptTransact&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;    &lt;span&gt;// if exception, assume conflict and retry&lt;/span&gt;
      &lt;span&gt;&amp;#125;&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;.&lt;span class=&quot;me1&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;A&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;attemptTransact&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The only weird thing here is the use of an internal function to control the transaction dispatch process.&amp;#160; This is necessary because we need to emulate the pattern of a &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt; loop without losing the ability to capture a return value.&amp;#160; This is the one minor feature of the transaction API that we have designed which I haven&amp;#8217;t already discussed: the ability to return a value from a transaction.&amp;#160; Practically speaking, this isn&amp;#8217;t needed &lt;em&gt;too&lt;/em&gt; often since the very purpose of a transaction is to modify references, but it is still a pattern worth keeping in hand.&lt;/p&gt;
&lt;p&gt;You will notice that we have some generic catch-all exception handling going on here.&amp;#160; Whenever a transaction throws an exception, we assume that it has failed and we try again.&amp;#160; To be honest, I wrestled back and forth with this decision.&amp;#160; After all, if a transaction comes across a &lt;code&gt;NullPointerException&lt;/code&gt; on its first try, it&amp;#8217;s not likely to do any better the second time around, or the third, or the fourth, or the&amp;#8230;&amp;#160; On the other hand, there is a remote but very real possibility that data can briefly get into an inconsistent state within a transaction.&amp;#160; To understand how, consider the following abstract scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Transaction &lt;strong&gt;A&lt;/strong&gt; writes data to reference &lt;strong&gt;A&lt;/strong&gt; and reference &lt;strong&gt;B&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Transaction &lt;strong&gt;B&lt;/strong&gt; starts after transaction &lt;strong&gt;A&lt;/strong&gt; but &lt;em&gt;before&lt;/em&gt; it has committed &lt;/li&gt;
&lt;li&gt;Transaction &lt;strong&gt;B&lt;/strong&gt; reads from reference &lt;strong&gt;A&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Transaction &lt;strong&gt;A&lt;/strong&gt; commits &lt;/li&gt;
&lt;li&gt;Transaction &lt;strong&gt;B&lt;/strong&gt; reads from reference &lt;strong&gt;B&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Transaction &lt;strong&gt;B&lt;/strong&gt; does the funky chicken and tries to commit &lt;/li&gt;
&lt;li&gt;Transaction &lt;strong&gt;B&lt;/strong&gt; fails validation and has to try again &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Everything works fine on the second time around&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Everything gets straightened out in the end due to the validation, but there is still this hairy moment within transaction &lt;strong&gt;B&lt;/strong&gt; that we have to worry about.&amp;#160; Within the transaction, we have some data from before transaction &lt;strong&gt;A&lt;/strong&gt; committed, and some from afterward.&amp;#160; Validation is never going to let this slip by, but while the transaction is still executing we can run into some fairly serious issues.&lt;/p&gt;
&lt;p&gt;Imagine for example that reference &lt;strong&gt;B&lt;/strong&gt; is changed in such a way that it throws an exception in transaction &lt;strong&gt;B&lt;/strong&gt; unless it is paired with just the right value of reference &lt;strong&gt;A&lt;/strong&gt;.&amp;#160; Since we have an inconsistent pairing between references &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; within transaction &lt;strong&gt;B&lt;/strong&gt;, we will get an exception caused directly by a breakdown in data integrity.&amp;#160; Because this is a data integrity issue, we want this exception to trigger a redo in the transaction.&amp;#160; However, we can&amp;#8217;t really predict such exceptions, so there&amp;#8217;s no way we can distinguish between a legitimate exception (which should be propagated outside the transaction) and a data integrity fault.&amp;#160; In short, we&amp;#8217;re in trouble.&lt;/p&gt;
&lt;p&gt;Given the way we designed the STM framework, I don&amp;#8217;t really see a nice, efficient way to avoid this problem.&amp;#160; There are other approaches we could take which don&amp;#8217;t have this issue, but that would either require an entirely different implementation or a much smarter developer taking the lead.&amp;#160; I would be interested to see how Clojure handles this case&amp;#8230;&lt;/p&gt;
&lt;h3&gt;A Less-Trivial Example&lt;/h3&gt;
&lt;p&gt;Now that we have this full STM framework, it might be interesting to put it to work.&amp;#160; To that end, let&amp;#8217;s create a simple market simulation with three businesses and a hundred potential customers, each with their own accounts and separate balances.&amp;#160; All of these entities will have their own thread operating on their behalf, making purchases, excepting refunds and keeping the Mafia off their back.&amp;#160; Bear in mind that this is a &lt;em&gt;truly concurrent &lt;/em&gt;simulation with full thread semantics.&amp;#160; We&amp;#8217;re not going to use actors or anything like that to reduce the number of threads involved, everything will operate in true parallel.&lt;/p&gt;
&lt;p&gt;To make things a little more interesting, we will also associate a 7.5 % fee with each transfer, paid to a separate account.&amp;#160; Also, each transfer will be logged presumably for later review.&amp;#160; To make everything fun, we will have one final thread which monitors the entire market, summing up &lt;em&gt;every &lt;/em&gt;account and checking the total.&amp;#160; The obvious concern is that some collision in access of the shared data will lead to the unexpected loss (or gain) of wealth.&amp;#160; So long as the total market value remains constant, we can assume that shared state is being handled appropriately.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s start out by defining our accounts and basic structure.&amp;#160; Bear in mind that &lt;code&gt;Account&lt;/code&gt; is a type alias (similar to a C-style typedef) for &lt;code&gt;Ref[Long]&lt;/code&gt;, it is not a separate class.&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;object&lt;/span&gt; BankFrenzy &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;import&lt;/span&gt; Transaction._
&amp;nbsp;
  &lt;span&gt;type&lt;/span&gt; Account = Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;Long&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; fees = &lt;span&gt;new&lt;/span&gt; Account
  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; log: Ref&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;Vector&lt;span&gt;&amp;#91;&lt;/span&gt;Transfer&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Ref&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;EmptyVector&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;args: Array&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; business1 = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Account&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;15000&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; business2 = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Account&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;20000&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; business3 = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Account&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;50000&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;val&lt;/span&gt; people = &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; until &lt;span&gt;100&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;foldLeft&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;Vector&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;Account&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;vec, i&lt;span&gt;&amp;#41;&lt;/span&gt; =&amp;gt;
      vec + &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Account&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;&amp;#125;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Remember that all data contained within a reference must be completely immutable, otherwise the STM framework cannot help you.&amp;#160; If you can just change the underlying data within a reference at will, then transaction semantics are useless (since revision tracking breaks down).&amp;#160; To that end, we will use my &lt;a href=&quot;http://www.codecommit.com/blog/misc/implementing-persistent-vectors-in-scala/final/Vector.scala&quot;&gt;port of Clojure&amp;#8217;s persistent vector&lt;/a&gt; to handle the transfer log; and just because it&amp;#8217;s fun, we will also use it to manage personal accounts.&lt;/p&gt;

&lt;p&gt;Moving on, we should probably define some functions to operate on these accounts.&amp;#160; Remember, they must take an implicit parameter of type Transaction, otherwise they will be prevented from modifying references.&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;amount: &lt;span&gt;Long&lt;/span&gt;, from: Account, to: Account&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; t: Transaction&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  log := log + &lt;span&gt;Transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;amount, from, to&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
  &lt;span&gt;val&lt;/span&gt; less = Math.&lt;span&gt;round&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;amount * &lt;span&gt;0.075&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
  from := from - amount
  to := to + &lt;span&gt;&amp;#40;&lt;/span&gt;amount - less&lt;span&gt;&amp;#41;&lt;/span&gt;
  fees := fees + less
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;portfolio: Vector&lt;span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;Account&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; t: Transaction&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;&amp;#123;&lt;/span&gt;
  portfolio.&lt;span&gt;foldRight&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;:&lt;span&gt;Long&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt; _ + _ &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;One thing worthy of attention here is the &lt;code&gt;sum&lt;/code&gt; method: we aren&amp;#8217;t actually modifying any references in this method, so why bother putting it within a transaction?&amp;#160; The answer is to enforce data integrity.&amp;#160; We want to make sure that we see a truly consistent picture of the entire market, and the only way to be absolutely sure of that is to use the conceptual &amp;#8220;snapshot of the world&amp;#8221; maintained by a transactional log.&lt;/p&gt;
&lt;p&gt;Also notice that the &lt;code&gt;sum&lt;/code&gt; method does not store its result within a reference, it actually returns a value.&amp;#160; This is one of the neat features of our STM implementation: it allows transactions to return values just like functions.&amp;#160; This dramatically reduces the boilerplate which would normally be required to get the result of a calculation from within a transaction.&lt;/p&gt;
&lt;p&gt;With this infrastructure in place, we can go ahead and create all of the threads we&amp;#8217;re going to need for the simulation:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;val&lt;/span&gt; market = people + business1 + business2 + business3 + fees
&lt;span&gt;var&lt;/span&gt; running = &lt;span&gt;true&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;val&lt;/span&gt; secActor = thread &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;while&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;running&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;val&lt;/span&gt; total = &lt;span&gt;atomic&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;sum&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;market&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;_&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Market value: $&amp;quot;&lt;/span&gt; + total&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;val&lt;/span&gt; businessActor = thread &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;while&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;running&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    &lt;span&gt;atomic&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;250&lt;/span&gt;, business1, business2&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;_&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;    &lt;span&gt;// transfer rent&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;val&lt;/span&gt; peopleActors = &lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
  i &amp;lt;- &lt;span&gt;0&lt;/span&gt; until people.&lt;span class=&quot;me1&quot;&gt;length&lt;/span&gt;
  &lt;span&gt;val&lt;/span&gt; p = &lt;span&gt;people&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;i&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt; &lt;span&gt;yield&lt;/span&gt; thread &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;atomic&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;, p, business3&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;_&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;       &lt;span&gt;// payoff the mob&lt;/span&gt;
  &lt;span&gt;atomic&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;i * &lt;span&gt;10&lt;/span&gt;, p, business1&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;_&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;   &lt;span&gt;// purchase from business1&lt;/span&gt;
  &lt;span&gt;atomic&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;transfer&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;i * &lt;span&gt;3&lt;/span&gt;, business2, p&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;_&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;    &lt;span&gt;// refund from business2&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This is assuming that we have already defined a utility method, &lt;code&gt;thread&lt;/code&gt;, in the following fashion:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;thread&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;f: =&amp;gt;Unit&lt;span&gt;&amp;#41;&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; Thread &lt;span&gt;&amp;#123;&lt;/span&gt;
  &lt;span&gt;override&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;
    f
  &lt;span&gt;&amp;#125;&lt;/span&gt;
&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Just one of the many little tricks made possible by the staggering power of Scala&amp;#8217;s syntax.&lt;/p&gt;
&lt;p&gt;There isn&amp;#8217;t much worthy of attention within our simulation threads, it&amp;#8217;s just a lot of concurrent operations running against some shared state.&amp;#160; If we wanted to really have some fun, we could add &lt;code&gt;println&lt;/code&gt; status messages to each thread, allowing us to try the simulation multiple times and watch the thread interleaving change from run to run.&amp;#160; However, all we&amp;#8217;re really interested in with this simulation is the assurance that data integrity is maintained at all times.&amp;#160; To see that, all we really need is to check the starting market value, the ending value and some period market auditing while the simulation is in progress:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;line_numbers&quot;&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;scala&quot;&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Starting market value: $&amp;quot;&lt;/span&gt; + &lt;span&gt;atomic&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;sum&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;market&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;_&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
businessActor.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
secActor.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;pa &amp;lt;- peopleActors&lt;span&gt;&amp;#41;&lt;/span&gt; pa.&lt;span&gt;start&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;pa &amp;lt;- peopleActors&lt;span&gt;&amp;#41;&lt;/span&gt; pa.&lt;span&gt;join&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
running = &lt;span&gt;false&lt;/span&gt;
&amp;nbsp;
businessActor.&lt;span&gt;join&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
secActor.&lt;span&gt;join&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Total fees: $&amp;quot;&lt;/span&gt; + fees&lt;span&gt;&amp;#41;&lt;/span&gt;
&lt;span&gt;println&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Final market value: $&amp;quot;&lt;/span&gt; + &lt;span&gt;atomic&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;sum&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;market&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;_&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If we compile and run the simulation, the output will look something like this (on a dual-core, 2 Ghz processor):&lt;/p&gt;
&lt;pre&gt;  Starting market value: $185000
  Market value: $185000
  Market value: $185000
  Market value: $185000
  Total fees: $5258
  Final market value: $185000&lt;/pre&gt;
&lt;p&gt;We could try the simulation a hundred times with different CPU loads and even on separate machines, the results will always be the same.&amp;#160; While there may be a greater or lesser number of concurrent market audits during the simulation, the values retrieved each time will be the same.&amp;#160; From this we can conclude one important fact: we have succeeded in designing an STM framework which preserves data integrity.&lt;/p&gt;
&lt;p&gt;In simulations like this one with a high degree of contested data, STM may actually be &lt;em&gt;slower &lt;/em&gt;than a traditional, fine-grained locking strategy.&amp;#160; However, just think for a moment about trying to write this simulation using Java&amp;#8217;s &lt;code&gt;ReentrantReadWriteLock&lt;/code&gt; class.&amp;#160; It would be nearly impossible to design such a system, let alone maintain it.&amp;#160; There would always be the danger that we would accidentally get the locking in the wrong order, or forget to lock something before we access it.&amp;#160; In short, such an effort would be extremely hazard prone, and far more verbose.&amp;#160; Using our STM framework, the resulting code was clean and simple to understand.&amp;#160; It&amp;#8217;s easy to see why techniques like this are really starting to catch on.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codecommit.com/blog/misc/software-transactional-memory-in-scala/BankFrenzy.scala&quot;&gt;Download BankFrenzy.scala&lt;/a&gt;&amp;#160; (just in time for the economic crisis, too!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Hopefully this has been an informative and enjoyable foray into the world of transactional memory systems.&amp;#160; I will retroactively apologize for any areas where my facts are in err; I&amp;#8217;m certainly quite new to all of these concepts.&amp;#160; As per usual, the library described in this article is available for download.&amp;#160; I was a little lax on the testing side of life, so you may want to vet the library a little bit before you trust it unsupervised in your data center.&lt;/p&gt;
&lt;p&gt;There are a number of interesting aspects to STM that I didn&amp;#8217;t cover in this article, such as &lt;code&gt;retry&lt;/code&gt; and the related function, &lt;code&gt;check&lt;/code&gt; (implemented in the framework).&amp;#160; Also left completely untouched is the monadic operation &lt;code&gt;orElse&lt;/code&gt; which can be used to compose transactions in a &amp;#8220;first try this, then try that on failure&amp;#8221; sort of way.&lt;/p&gt;
&lt;p&gt;STM is a very active research topic today with a lot of the brightest minds in the industry pondering ways to make it better.&amp;#160; While it certainly doesn&amp;#8217;t solve all of the problems associated with concurrency, it does have the potential to simplify locking and produce better performance under some conditions.&amp;#160; Definately a technology to watch as it develops!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codecommit.com/blog/misc/software-transactional-memory-in-scala/scala_stm.zip&quot;&gt;Download scala_stm full sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
		<author>
			<name>Code Commit</name>
			<uri>http://www.codecommit.com/blog</uri>
		</author>
		<source>
			<title type="html">Code Commit » Scala</title>
			<subtitle type="html">(permanently in beta)</subtitle>
			<link rel="self" href="http://www.codecommit.com/blog/category/scala/feed"/>
			<id>http://www.codecommit.com/blog/category/scala/feed</id>
			<updated>2008-10-20T20:20:23+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Massochism</title>
		<link href="http://suereth.blogspot.com/2008/09/massochism.html"/>
		<id>tag:blogger.com,1999:blog-1673113361032868171.post-4606446051939777947</id>
		<updated>2008-10-05T22:55:16+00:00</updated>
		<content type="html">&lt;span&gt;Note: Due to excessive comments about my grasp of the english languages, I've done a second round of editing for this post.  It may show up on the RSS feed again, but there isn't any new content.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;I've recently had to jump into a bit of (very minor) C++ development at work.  This started bringing back memories of all the ?fun? it was to play around in the C++ type system.  Mostly you use the C++ type system in an attempt to prevent yourself from doing bad things. Sometimes though, it was a way of doing conditional compilation in a type-safe manner.&lt;br /&gt;&lt;br /&gt;I recently decided to outline how I tend to over-engineer my C++ code.  I'll give a few ground rules/goals first:&lt;br /&gt;&lt;ul&gt;&lt;li&gt; I won't use boost.  In real life, I do use boost whenever I can.  For the purposes of illustration I'm doing a lot by hand.  If you're a C++ developer and you don't use boost, go learn it. Now.  Really, I mean right now go to &lt;a href=&quot;http://www.boot.org&quot;&gt;www.boost.org&lt;/a&gt; and enter the 21st century of coding.  No really, GO&lt;/li&gt;&lt;br /&gt;&lt;li&gt; I'm not doing detailed explanations (although I do some explanations) of the C++ language or its compiler workings.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;This could be an attempt to ramp myself to attack learning scala's (and maybe haskell's) type sytem.  C++ is the closest typed language I know that could prepare me&lt;/li&gt;&lt;br /&gt;&lt;li&gt;C++/Java feels more like massochism the more new languages I learn.  I'm hoping this &quot;simple&quot; post about using the C++ type system in a &quot;simple&quot; way will prove this to you.  At some point I hope to post a Scala/Haskell equivalent to this post (or perhaps someone else would like to?) just so you can see the amount of work C++ really requires (and the level of understanding required to write even a simple line).&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;Alright! so first off, the premise:  &lt;b&gt;We're trying to create a class (DynamicLibrary) that will let us dynamic load a shared library and access symbols.&lt;/b&gt;  I'm only including code for linux (although porting to windows or &quot;cross-platforming&quot; isn't too bad. look into the LoadLibrary function in windows and dlopen in linux).&lt;br /&gt;&lt;br /&gt;Before we begin, I'm going to construct something (available in boost) that should be in the utility kit of every C++ developer... a base class that removes the copy-constructor and operator= from visibility (effectively making it non-copyable)&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;#ifndef NONCOPYABLE_H_&lt;br /&gt;#define NONCOPYABLE_H_&lt;br /&gt;//============================================================================&lt;br /&gt;// This class prevents copying on subclasses&lt;br /&gt;//============================================================================&lt;br /&gt;template&lt;br /&gt;class NonCopyable&lt;br /&gt;{&lt;br /&gt;public:&lt;br /&gt; inline NonCopyable() {}&lt;br /&gt; inline ~NonCopyable() {}&lt;br /&gt;private:&lt;br /&gt; NonCopyable(NonCopyable&amp;amp; other) {}&lt;br /&gt; NonCopyable&amp;amp; operator=(NonCopyable&amp;amp; other) {}&lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;#endif&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;It's a very simple class.  Most of its functions are purposefully inlined.  It should get compiled out during optimization phases, AND it can reduce typing for me later when I don't want a class copied around on the stack.&lt;br /&gt;(Note: I could have saved one line of typing by changing to a struct and getting rid of the public: line. or putting all private functions first.  Sue me, but I prefer this look).&lt;br /&gt;&lt;br /&gt;Ok, next we're going to create a very small Meta-Programming Library.  This library will be used to tell us all sorts of information about the types in C++.  For now, please assume all these examples are surrounded in a namespace mpl {} block.&lt;br /&gt;&lt;br /&gt;Here's our first bout of magic:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;struct true_;&lt;br /&gt;struct false_;  //Not really needed, but easier to understand if we have it&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;WTF? Why make two completely silly classes?  This is so I can represent the notion of a boolean in the type system. From now on, I want you to think of true_ as &quot;true in the meta-programming library&quot; and similarly for false_. &lt;i&gt;Note: In actuality I could probably use bool as a template parameter and get away with it, but this is more fun&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Ok, now let's make a simple method just so we can print the boolean value of a type.  &lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;template&amp;lt;typename T&amp;gt;&lt;br /&gt;struct is_true&lt;br /&gt;{&lt;br /&gt; enum { value = 0 };&lt;br /&gt;};&lt;br /&gt;template&amp;lt;:&amp;gt;&lt;br /&gt;struct is_true&amp;lt;true_&amp;gt;&lt;br /&gt;{&lt;br /&gt; enum { value = 1 };&lt;br /&gt;};&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;So..... what is that?   That, my friends, is a C++ meta-programming function.  The first template applies to every type and &quot;returns&quot; a value of 0 (or false).  The second is a specialization for the true_ type that will return 1.  This means if we ever use the is_true structure with true_ as the argument, the &quot;member&quot; value will be 1.  Its a little convoluted (or convolved?), but it works!  How do you call it?  Simply like this:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;is_true&amp;lt;some type&amp;gt;::value.&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;That will return an actually value we can assign, test in an if statement or display on the console.  We're going for displaying on the console here (console = stdout).&lt;br /&gt;&lt;br /&gt;Ok, so let's get more interesting meta-functions.  The most important for what I'd like to do later is the &quot;is_ptr&quot; function.  Here's a look at it:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;template&amp;lt;typename T&amp;gt;&lt;br /&gt;struct is_ptr&lt;br /&gt;{&lt;br /&gt; typedef false_ value;&lt;br /&gt;};&lt;br /&gt;template&amp;lt;typename T&amp;gt;&lt;br /&gt;struct is_ptr&amp;lt;T*&amp;gt;&lt;br /&gt;{&lt;br /&gt; typedef true_ value;&lt;br /&gt;};&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;So before we saw &quot;template specialization&quot;.  That is, template&lt;br /&gt; with all types completely specified in an alternative implementation of the function.  This time, we see &quot;partial template specialization&quot; (YAY!!?).  This is where we have an alternative implementation that still has some wildcards (i.e. partially specialized).  When used, the compiler will select the function from most specialized to most general based on our types, so we can get away with this.  &lt;br /&gt;&lt;br /&gt;Now, what's that funny type-def doing and why isn't &quot;value&quot; part of an enum?  Well this meta-function takes a type as argument and returns a type (not a value).  You can string together meta-functions of this kind to make even stranger (and horrendous to look at) meta-functions.&lt;br /&gt;&lt;br /&gt;As a simple example, let's make an &quot;if&quot; meta-function:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;template&amp;lt;typename COND, typename T, typename F&amp;gt;&lt;br /&gt;struct if_&lt;br /&gt;{&lt;br /&gt; typedef F value;&lt;br /&gt;};&lt;br /&gt;template&amp;lt;typename T, typename F&amp;gt;&lt;br /&gt;struct if_&amp;lt;true_, T, F&amp;gt;&lt;br /&gt;{&lt;br /&gt; typedef T value;&lt;br /&gt;};&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;The above is a structure that will select either type T or F based on the valiue of COND (much like an if statement).&lt;br /&gt;&lt;br /&gt;For now, let's test our first two meta-functions on a few combinations of the various incarnations of ints in C++.&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt; cout &amp;lt;&amp;lt; &quot;mpl::is_ptr&amp;lt;int*&amp;gt;::value = &quot; &amp;lt;&amp;lt; mpl::is_true&amp;lt;mpl::is_ptr&amp;lt;int*&amp;gt;::value&amp;gt;::value &amp;lt;&amp;lt; endl;&lt;br /&gt; cout &amp;lt;&amp;lt; &quot;mpl::is_ptr&amp;lt;int&amp;gt;::value = &quot; &amp;lt;&amp;lt; mpl::is_true&amp;lt;mpl::is_ptr&amp;lt;int&amp;gt;::value&amp;gt;::value &amp;lt;&amp;lt; endl;&lt;br /&gt; cout &amp;lt;&amp;lt; &quot;mpl::is_ptr&amp;lt;const int&amp;gt;::value = &quot; &amp;lt;&amp;lt; mpl::is_true&amp;lt;mpl::is_ptr&amp;lt;const int&amp;gt;::value&amp;gt;::value &amp;lt;&amp;lt; endl;&lt;br /&gt; cout &amp;lt;&amp;lt; &quot;mpl::is_ptr&amp;lt;const int*&amp;gt;::value = &quot; &amp;lt;&amp;lt; mpl::is_true&amp;lt;mpl::is_ptr&amp;lt;const int*&amp;gt;::value&amp;gt;::value &amp;lt;&amp;lt; endl;&lt;br /&gt; cout &amp;lt;&amp;lt; &quot;mpl::is_ptr&amp;lt;volatile int&amp;gt;::value = &quot; &amp;lt;&amp;lt; mpl::is_true&amp;lt;mpl::is_ptr&amp;lt;volatile int&amp;gt;::value&amp;gt;::value &amp;lt;&amp;lt; endl;&lt;br /&gt; cout &amp;lt;&amp;lt; &quot;mpl::is_ptr&amp;lt;const volatile int&amp;gt;::value = &quot; &amp;lt;&amp;lt; mpl::is_true&amp;lt;mpl::is_ptr&amp;lt;const volatile int&amp;gt;::value&amp;gt;::value &amp;lt;&amp;lt; endl;&lt;br /&gt; cout &amp;lt;&amp;lt; &quot;mpl::is_ptr&amp;lt;volatile int*&amp;gt;::value = &quot; &amp;lt;&amp;lt; mpl::is_true&amp;lt;mpl::is_ptr&amp;lt;volatile int*&amp;gt;::value&amp;gt;::value &amp;lt;&amp;lt; endl;&lt;br /&gt; cout &amp;lt;&amp;lt; &quot;mpl::is_ptr&amp;lt;const volatile int*&amp;gt;::value = &quot; &amp;lt;&amp;lt; mpl::is_true&amp;lt;mpl::is_ptr&amp;lt;const volatile int*&amp;gt;::value&amp;gt;::value &amp;lt;&amp;lt; endl;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;And the output is: &lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;mpl::is_ptr&amp;lt;int*&amp;gt;::value = 1&lt;br /&gt;mpl::is_ptr&amp;lt;int&amp;gt;::value = 0&lt;br /&gt;mpl::is_ptr&amp;lt;const int&amp;gt;::value = 0&lt;br /&gt;mpl::is_ptr&amp;lt;const int*&amp;gt;::value = 1&lt;br /&gt;mpl::is_ptr&amp;lt;volatile int&amp;gt;::value = 0&lt;br /&gt;mpl::is_ptr&amp;lt;const volatile int&amp;gt;::value = 0&lt;br /&gt;mpl::is_ptr&amp;lt;volatile int*&amp;gt;::value = 1&lt;br /&gt;mpl::is_ptr&amp;lt;const volatile int*&amp;gt;::value = 1&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Neat-o huh?  Yeah I probably could change the output to really represent things, ie mpl::is_true&amp;lt;mpl::is_ptr&amp;lt;....&amp;gt;::value&amp;gt;::value ? &quot;true_&quot; : &quot;false_&quot;.  However it was already way to much typing.&lt;br /&gt;&lt;br /&gt;Ok, now onto why we were making meta-functions to begin with.  I want a somewhat type-safe way of importing symbols from a dynamicly loaded library and casting them to their appropriate types. This idea came from an old colleague at APL.  I hope this solution is different enough, as I don't recall his solution.  &lt;br /&gt;&lt;br /&gt;Let's start off with our basic class structure for DynamicLib:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;//ASSUME LIBRARY_HANDLE_TYPE and SYMBOL_POINTER_TYPE are defined somewhere above (os-specific)&lt;br /&gt;class DynamicLib : public NonCopyable&amp;lt;DynamicLib&amp;gt; {&lt;br /&gt;public:&lt;br /&gt; DynamicLib(const char*const name); //implementation is OS-specific&lt;br /&gt; ~DynamicLib();                     //implementation is os-specific&lt;br /&gt; static SYMBOL_POINTER_TYPE get_symbol_internal(const char*const name, LIBRARY_HANDLE_TYPE handle); //implementation is OS-specific.  Didn't feel like figuring out to privatize this.&lt;br /&gt;private:&lt;br /&gt; LIBRARY_HANDLE_TYPE handle; //handle to library (os-specific)&lt;br /&gt;};&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;First off, notice the use of NonCopyable.  This ensures the class cannot be copied (i.e. you have to use pointers to share it).  This helps us ensure that the library is loaded once and destroyed once.  You could still construct it twice for the same library, but if you do that... well a maniacal penguin dressed in a business suit will come steal your fish.&lt;br /&gt;&lt;br /&gt;Next, the get_symbol_internal method is static.  This is because the public (local) method has yet to be written and needs to use the MPL library (YAY!!!?).  What we'd like to do is find a way to return primitives by value, and everything else by pointer.  I'm going to call anything a &quot;primitive&quot; if it has a valid copy constructor (boy would this be wrong in a large app).  Instead of pulling in &lt;a href=&quot;http://stlsoft.com&quot;&gt;Matthew Wilson&lt;/a&gt;'s &lt;a href=&quot;http://www.synesis.com.au/software/stlsoft/doc-1.9/unionstlsoft_1_1must__be__pod.html&quot;&gt;&quot;must_be_pod&quot;&lt;/a&gt; meta-function-constraint, I think I'll just assume proper usage (like a fool).  &lt;span&gt;Note: A maniacal penguin did show up at my door, but I was able to dissuade it with a tennis racket and tuna fish.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Ok, so onto the symbol loading...  Here's what our public symbol loading function looks like:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;//function for external use&lt;br /&gt; template&amp;lt;typename T&amp;gt;&lt;br /&gt; inline T get_symbol(const char*const name) {&lt;br /&gt;  //Call appropriate function based on whether type is pointer or not.&lt;br /&gt;  typedef get_symbol_&amp;lt;T, typename mpl::is_ptr&amp;lt;T&amp;gt;::value&amp;gt; get_symbol_functor;&lt;br /&gt;  get_symbol_functor functor; //need an instance to use operator()...&lt;br /&gt;  return functor(name, handle);&lt;br /&gt; }&lt;br /&gt;private:&lt;br /&gt; template&amp;lt;typename T, typename isptr&amp;gt;&lt;br /&gt; struct get_symbol_;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Well, that's simple.  Too bad it won't compile when someone actually tries to use it.  What's going on here?  Well the get symbol function is templatized on some type.  Then we try to call the get_symbol_ &lt;b&gt;functor struct&lt;/b&gt;.  What is a functor struct (besides a lame excuse for a closure/real functor)?  It's a structure that (sort of) looks like a function in code (as shown above).   We declare (but not define) the structure.  The structure is where we will specialize our implementation for pointer types vs. non-ptr types.  Since we're using the &quot;is_ptr&quot; meta function above, all we need are two partial specialization for the get_symbol_ functor.  The first specialization will take &quot;true_&quot; as its second type parameter. The second specialization will take &quot;false_&quot; as its second type parameter.  The false variant should perform a copy of the value pointed at by the symbol.  The true variant can just cast and return the symbol pointer.  Here's the code:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt; //Repeated for clarity&lt;br /&gt; template&amp;lt;typename T, typename isptr&amp;gt;&lt;br /&gt; struct get_symbol_;&lt;br /&gt;&lt;br /&gt; template&amp;lt;typename T&amp;gt;&lt;br /&gt; struct get_symbol_&amp;lt;T, typename mpl::true_&amp;gt; {&lt;br /&gt;  T operator()(const char*const name, void* handle) {&lt;br /&gt;   //This should fail to compile for types that don't have copy-constructors&lt;br /&gt;   return reinterpret_cast&amp;lt;T&amp;gt;(DynamicLib::get_symbol_internal(name, handle));&lt;br /&gt;  }&lt;br /&gt; };&lt;br /&gt; //Get symbol for non-ptr types&lt;br /&gt; template&amp;lt;typename T&amp;gt;&lt;br /&gt;    struct get_symbol_&amp;lt;T, typename mpl::false_&amp;gt; {&lt;br /&gt;     T operator()(const char*const name, void* handle) {&lt;br /&gt;   //TODO - Fix const...&lt;br /&gt;   return *static_cast&amp;lt;T*&amp;gt;(DynamicLib::get_symbol_internal(name, handle));&lt;br /&gt;     }&lt;br /&gt;    };&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;So now you can see how a struct-functor is created.  Basically you just define an operator() overload inside the structure, and it will start acting like a function (or at least looking like one...).&lt;br /&gt;&lt;br /&gt;You can see how on the one hand we're de-referencing the pointer, and on the other we're just casting.  I'm also going to assume here (wrongly) that the get_symbol_internal will throw an exception on error, thereby ensuring that I will never dereference an invalid pointer (feel free to laugh, or send the penguin again).&lt;br /&gt;&lt;br /&gt;Ok, and now for the main method that uses this mess of code (note I'm using getopt.h):&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;int main(int argc, char*argv[]) {&lt;br /&gt; int c;&lt;br /&gt; extern char* optarg;&lt;br /&gt; extern int optind, optopt;&lt;br /&gt; string library = &quot;&quot;;&lt;br /&gt; string symbol = &quot;&quot;;&lt;br /&gt; string type = &quot;&quot;;&lt;br /&gt; bool usage = false;&lt;br /&gt; while ((c = getopt(argc, argv, &quot;l:s:t:h&quot;)) != -1) {&lt;br /&gt;  switch (c) {&lt;br /&gt;  case 'l':&lt;br /&gt;   library = optarg;&lt;br /&gt;   break;&lt;br /&gt;  case 's':&lt;br /&gt;   symbol = optarg;&lt;br /&gt;   break;&lt;br /&gt;  case 't':&lt;br /&gt;   type = optarg;&lt;br /&gt;   break;&lt;br /&gt;  case '?':&lt;br /&gt;   cerr &amp;lt;&amp;lt; &quot;Unrecognized option: -&quot; &amp;lt;&amp;lt; static_cast&amp;lt;char&amp;gt; (optopt)&lt;br /&gt;     &amp;lt;&amp;lt; endl;&lt;br /&gt;  case 'h':&lt;br /&gt;   usage = true;&lt;br /&gt;   break;&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; if (usage) {&lt;br /&gt;  //TODO&lt;br /&gt;  return 2;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; DynamicLib lib(library.c_str());&lt;br /&gt;&lt;br /&gt; if(type == &quot;int&quot;) {&lt;br /&gt;  cerr &amp;lt;&amp;lt; &quot;Symbol value (as int) is: &quot; &amp;lt;&amp;lt; lib.get_symbol&amp;lt;int&amp;gt; (symbol.c_str()) &amp;lt;&amp;lt; endl;&lt;br /&gt; }&lt;br /&gt; if(type == &quot;function&quot;) {&lt;br /&gt;  cerr &amp;lt;&amp;lt; &quot;Symbol value (as return of function [int ()] ) is: &quot; &amp;lt;&amp;lt; lib.get_symbol&amp;lt;int (*)()&amp;gt; (symbol.c_str())() &amp;lt;&amp;lt; endl;&lt;br /&gt; }&lt;br /&gt; return 0;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;The hardest one to understand here is possibly the function pointer.  Basically I'm asking for a pointer to a no-argument function that returns an integer [int (*)()].  I then immediately call this function for a value to place in cerr.&lt;br /&gt;&lt;br /&gt;Ok, now we need a shared-library to test out.  Here's my dummy .cpp that I compiled into a .so (I leave that as an excersie to the user).&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;extern &quot;C&quot; {&lt;br /&gt; int MY_VAL = 5;&lt;br /&gt; int MY_FUNC() { return MY_VAL; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Onto our outputs:&lt;br /&gt;&lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;br /&gt;&gt;  Debug/cpp-types -l ../dummy-shared-lib/Debug/libdummy-shared-lib.so -s MY_VAL -t int&lt;br /&gt;Symbol value (as int) is: 5&lt;br /&gt;&gt;  Debug/cpp-types -l ../dummy-shared-lib/Debug/libdummy-shared-lib.so -s MY_FUNC -t function&lt;br /&gt;Symbol value (as return of function [int ()] ) is: 5&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Ok, so this is a little bit limited, but we have it working! YAY!!!?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;In conclusion, I really want to get back into Scala again.  The type system seems a little bit less verbose, and the language itself is less clunky.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Note: I later updated this to pull string-literals out of libraries.  The fun part there was realizing that a symbol pointer to  a string literal is *really* a [char**] that needs to be dereferenced (carefully).  Basically I wrote a specialized std::string specialization of get_symbol that would perform the checks/casts and return a string.  The key to testing this was ensuring that the char* literal would wind up in the symbol table of the output .so.  This means you should make a dummy function that returns it, otherwise it may be optimized away.  Enjoy!&lt;/span&gt;</content>
		<author>
			<name>J. Suereth</name>
			<email>noreply@blogger.com</email>
			<uri>http://suereth.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Rants, Raves and Ridicule</title>
			<subtitle type="html">My thoughts and/or rants on Software Development.</subtitle>
			<link rel="self" href="http://suereth.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-1673113361032868171</id>
			<updated>2008-11-01T15:20:26+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">No More Statics!</title>
		<link href="http://bytecrafter.blogspot.com/2008/09/no-more-statics.html"/>
		<id>tag:blogger.com,1999:blog-32241238.post-8718528319070715892</id>
		<updated>2008-10-04T12:28:44+00:00</updated>
		<content type="html">&lt;p&gt;As I read more about Scala, I'm running across a lot of things that I like. In Scala, there are no static members: no static methods; no static fields. Instead, Scala has so-called &quot;singleton&quot; objects. These singleton objects are globally accessible, though their instance methods and fields are still subject to access restriction. This is great because it exposes what we all knew all along: that static fields and methods in Java are really just global variables and functions. Granted, they are access-controlled, namespaced globals, but they're still globals.&lt;/p&gt;&lt;p&gt;Since each class' singleton object is in fact an object, it can subclass another object or mix in traits, just like objects that are spawned by a class. The singleton object has the same rights as any other object in the system.&lt;/p&gt;&lt;p&gt;In addition, a singleton object can share a name with a class; if it does so, they can access each other's private data. I'm not sure yet, but I assume that this is how Scala accesses static members of Java classes - it creates a singleton object that doesn't derive or mix in anything, but turns all the static methods and fields of the Java class into instance members of the singleton object.&lt;/p&gt;</content>
		<author>
			<name>Daniel Yankowsky</name>
			<email>noreply@blogger.com</email>
			<uri>http://bytecrafter.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Why not?</title>
			<link rel="self" href="http://bytecrafter.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-32241238</id>
			<updated>2008-10-31T01:20:02+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Terseness for Terseness' Sake</title>
		<link href="http://bytecrafter.blogspot.com/2008/08/terseness-for-terseness-sake.html"/>
		<id>tag:blogger.com,1999:blog-32241238.post-1588880529579517538</id>
		<updated>2008-10-04T12:28:41+00:00</updated>
		<content type="html">&lt;p&gt;I've been reading up on Scala, since it seems like it may be a better Java than Java itself. As I was reading through the pre-release PDF of &lt;a href=&quot;http://www.artima.com/shop/programming_in_scala&quot; class=&quot;book-title&quot;&gt;Programming in Scala&lt;/a&gt;, I came across something goofy.&lt;/p&gt;&lt;p&gt;Scala, like (as I understand it) F#, tries to nestle itself comfortably between the functional and imperative camps. It has a syntax that supports both schools of though. So, as you might expect, some functions in Scala will behave nicely and will return a value without any side effects. Other functions will be executed solely for the side effects, and will return nothing (the Unit type in Scala). To further the Functional mindset, Scala does not require an explicit return statement at the end of a function. Instead, the last value in the function is used as the value of the function. &lt;span class=&quot;book-title&quot;&gt;Programming in Scala&lt;/span&gt; is quick to point out that, if you want, you can just as easily use explicit return statements (if that floats your boat).&lt;/p&gt;&lt;p&gt;The functional and imperative worlds collide in a shower of fireworks. From &lt;span class=&quot;book-title&quot;&gt;Programming in Scala&lt;/span&gt;:&lt;blockquote&gt;One puzzler to watch out for is that whenever you leave off the equals sign before the body of a function, its result type will definitely be Unit. This is true no matter what the body contains, because the Scala compiler can convert any type to Unit. For example, if the last result of a method is a String, but the method’s result type is declared to be Unit, the String will be converted to Unit and its value lost.&lt;/blockquote&gt;The book then goes on to provide an example where a function's value is accidentally lost.&lt;/p&gt;&lt;p&gt;Now, I'm all for shortening my programs. The less I have to type, the better. This is, in fact, one of the big advantages Scala has over Java. But wait just a minute! I thought that our compilers were supposed to help us, not trip us up! Here's a situation where 2 different things (a function's return value and the function's return statement) are optional. If they are not specified, they are inferred. In that case, the only difference between retaining and losing your return value is a single character - a '='.&lt;/p&gt;&lt;p&gt;To get all concrete, here are a pair of Scala programs that do different things. &lt;pre class=&quot;code&quot;&gt;package org.balefrost.demo&lt;br /&gt;&lt;br /&gt;object Sample {&lt;br /&gt;  def foo {&lt;br /&gt;    &quot;bar&quot;&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;  def main(args : Array[String]) : Unit = {&lt;br /&gt;    val baz = foo&lt;br /&gt;    println(baz)&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;result&quot;&gt;=&gt; ()&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;hr /&gt;&lt;pre class=&quot;code&quot;&gt;package org.balefrost.demo&lt;br /&gt;&lt;br /&gt;object Sample {&lt;br /&gt;  def foo &lt;span class=&quot;changed&quot;&gt;= &lt;/span&gt;{&lt;br /&gt;    &quot;bar&quot;&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;  def main(args : Array[String]) : Unit = {&lt;br /&gt;    val baz = foo&lt;br /&gt;    println(baz)&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;result&quot;&gt;=&gt; &quot;bar&quot;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;I don't know. To me, that's goofy. Other people might find it completely reasonable. Of course, you can protect yourself with explicit types.&lt;pre class=&quot;code&quot;&gt;package org.balefrost.demo&lt;br /&gt;&lt;br /&gt;object Sample {&lt;br /&gt;  def foo {&lt;br /&gt;    &quot;bar&quot;&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;  def main(args : Array[String]) : Unit = {&lt;br /&gt;    val baz&lt;span class=&quot;changed&quot;&gt;:String&lt;/span&gt; = foo  //compiler error: can't assign Unit to String&lt;br /&gt;    println(baz)&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Anyway, kudos to &lt;span class=&quot;book-title&quot;&gt;Programming in Scala&lt;/span&gt; for pointing out the potential cause of a hair-yankingly-frustrating bug. Now that I understand what's going on, I will probably be better able to handle it when it comes up in a real program.&lt;/p&gt;</content>
		<author>
			<name>Daniel Yankowsky</name>
			<email>noreply@blogger.com</email>
			<uri>http://bytecrafter.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Why not?</title>
			<link rel="self" href="http://bytecrafter.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-32241238</id>
			<updated>2008-10-31T01:20:02+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">The Machine</title>
		<link href="http://bytecrafter.blogspot.com/2008/10/machine.html"/>
		<id>tag:blogger.com,1999:blog-32241238.post-4053702744368396102</id>
		<updated>2008-10-04T12:25:06+00:00</updated>
		<content type="html">&lt;p&gt;Two weeks ago, I had the opportunity to see &lt;a href=&quot;http://www.themachinelive.com/&quot;&gt;The Machine&lt;/a&gt; with my family. The Machine is a Pink Floyd tribute band. That is to say, at their shows, they play nothing but Pink Floyd music. All of the musicians are clearly extreme Floyd fans. I mean, why else would you spend 20 years of your life playing somebody else's music? Now, some people don't like tribute bands. I had a hard time getting people to see &lt;a href=&quot;http://www.aussiefloyd.com/&quot;&gt;The Australian Pink Floyd Show&lt;/a&gt; when they came to New York (playing literally a few blocks from where we were staying). Who cares that these aren't the original musicians? Would you also refuse to go to a performance of Beethoven's 5th because it wasn't being conducted by the man himself? Of course not! The music is just as good, and the musicians are going to make it special and awesome anyway. But I digress...&lt;/p&gt;&lt;p&gt; It was interesting to see the variety in people in the theater. Obviously, many of the patrons were my parents' age, but there were also some college kids and folks whose heads were completely gray. What was perhaps more interesting to me is that the 50 year olds were more animated and crazy than the college kids. They had some smoke machines up on stage, but I don't think that was the source of all the smoke in the hall. It's fun to watch adults relive their youth.&lt;/p&gt;&lt;p&gt;The set was Dark Side of the Moon (with the Wizard of Oz projected onto their own version of &lt;a href=&quot;http://en.wikipedia.org/wiki/Pink_Floyd_live_performances#The_light_show&quot;&gt;Mr. Screen&lt;/a&gt;), followed by an intermission, followed by The Wall. Not a bad setlist at all. As they launched into the beginning songs from Dark Side, I was carefully listening for any variation from the album tracks that I know so well. I couldn't help it. These guys were playing well-known and well-loved music, so it's only natural to compare their performance to the original. By The Great Gig in the Sky, though, I was totally sold. The woman that belted out those notes was simply amazing. She absolutely hit every note. It was surreal. The keyboardist was younger than the rest and totally crazy, with a maniacal grin that was somehow larger than his actual face. The drummer hid behind the drums for most of the show, but did a very good job. The bassist seemed detached, standing apart from the others. I suspect that was &lt;a href=&quot;http://en.wikipedia.org/wiki/Roger_Waters#Pink_Floyd_years_.281965.E2.80.931985.29&quot;&gt;completely intentional&lt;/a&gt;. The saxophone player was decent, but wasn't very memorable (after all, he only played on a few songs). Rounding out the group is the lead guitarist / lead singer. His ability to mimic both David Gilmour &lt;em&gt;and&lt;/em&gt; Roger Waters was spooky. The man knew his guitar well, and made it sound just like the original.&lt;/p&gt;&lt;p&gt;By the time they were playing The Wall, people in the crowd were singing along. Performing Dark Side first was a good idea. People were more mellow when the entered the theater than when they left, and Dark Side is best appreciated without whoops and cheers. The Wall, on the other hand, is great with audience participation. In the end, they ended up getting 4 standing ovations (after Dark Side, after (I think) Comfortably Numb, after The Wall, and after their encore of Run Like Hell). They deserved each and every one of them. They probably played for 2.5 hours all told.&lt;/p&gt;&lt;p&gt;I never got a chance to see Pink Floyd live. As one of the people sitting next to us pointed it, this is the closest you can get at this point. While I agree with him, it is wrong to think of these guys as a facsimile of that famous band. These are all very talented musicians who love this music so much that they have dedicated a big chunk of their lives to it. As a fan, I'm grateful to them for doing that.&lt;/p&gt;</content>
		<author>
			<name>Daniel Yankowsky</name>
			<email>noreply@blogger.com</email>
			<uri>http://bytecrafter.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Why not?</title>
			<link rel="self" href="http://bytecrafter.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-32241238</id>
			<updated>2008-10-31T01:20:02+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Functional Purity in Scala</title>
		<link href="http://jnordenberg.blogspot.com/2008/10/functional-purity-in-scala.html"/>
		<id>tag:blogger.com,1999:blog-3083788237966827171.post-5881089427904716339</id>
		<updated>2008-10-04T07:11:11+00:00</updated>
		<content type="html">An important concept in functional programming is &lt;a href=&quot;http://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure functions&lt;/a&gt;. The properties of pure functions means that they are easily verifiable and allows concurrent execution (an important advantage on today's multi-core machines). You can write pure functions in pretty much all programming languages, but AFAIK there are only two popular programming languages that verifies the purity at compile time: &lt;a href=&quot;http://haskell.org/&quot;&gt;Haskell&lt;/a&gt; and &lt;a href=&quot;http://www.digitalmars.com/d&quot;&gt;D&lt;/a&gt;. In Haskell you can't use side effects or externally visible variables if you don't explicitly indicate so using monads in your function signature. D takes a different approach where the default is that you are allowed to use side effects and variables in your functions, and you must explicitly mark them as pure, see &lt;a href=&quot;http://www.digitalmars.com/d/2.0/accu-functional.pdf&quot;&gt;this presentation&lt;/a&gt; for more information. The difference in the implementations are surely because Haskell was designed from the start to be pure, but in D pure functions was added in version 2.0 of the language.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Pure Functions in Scala&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;I've been thinking about the best approach to implement pure function verification in the Scala compiler. An approach similar to the one in D would fit a lot better than the one used in Haskell (which would break all existing code and cause some problems due to strict evaluation). A solution using annotations would be quite simple to implement:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;class Pure extends Annotation&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;In practice you want to define this as a runtime annotation in Java, but let's stick to Scala here. Now you can mark a function/method as pure:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;@Pure def pureFunc(x : Int, y : Int) = x + y&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;There are some rules that the compiler must verify for a pure method/function:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Only calls to pure functions are allowed. This requires that a large number of functions in the Scala library must be marked using the pure annotation otherwise it will be impossible to write new pure functions.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Non-local vars can't be read or written. Local vars can be used in a pure function (as an accumulator for example), but you can't access static variables or variables reachable from the arguments.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;A pure method can only be overridden by a pure method, and an interface method defined as pure can only be implemented as a pure method.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;So far things are simple, but the restrictions imposed are quite severe, for example we can't create an array inside a pure function and use locally as this would result in calls to the non-pure array apply/update methods. Clearly this has to be allowed, which leads to the concept of &quot;semi-pure&quot; functions.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Semi-Pure Functions&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Let's define the concept of a semi-pure function/method:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;class SemiPure extends Annotation&lt;br /&gt;class Pure extends SemiPure&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;As you can see a Pure function is a subtype of SemiPure, so anywhere a SemiPure function is required a Pure function can be used, for example a method marked as SemiPure can be overridden by a Pure method (but not the other way around). Here's an example of a semi-pure method:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;  case class Var(var value : Int) {&lt;br /&gt;    @SemiPure def inc = {&lt;br /&gt;      value += 1  // Ok, we can modify fields in this object&lt;br /&gt;      value&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The following compilation rules applies to a semi-pure function:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;It can call pure and semi-pure functions.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;It can use local variables.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;It can read and write variables reachable from its arguments. This includes the implicit this argument passed for class methods, so a class method can read/write fields of a class instance.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;It can only be overridden by/implemented as a semi-pure or pure method.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;So what use do we have for semi-pure functions? Well, they allow us to loosen the restrictions placed on pure functions somewhat: a pure function may call a semi-pure function if, and only if, all the argument values passed are created locally or are &quot;invariant&quot;. &quot;Invariant&quot; is a term I borrowed from D, it's basically a deeply immutable value, i.e. it's an immutable value that only contain invariant values :). For example, List[Int] is invariant, but List[Array[Int]] is not invariant even though List[Array[Int]] is an immutable type.&lt;br /&gt;&lt;br /&gt;So with this loosened restriction you can for example define a function that creates an array and updates it in a loop, and it can still be a pure function. A quite powerful concept that blends the imperative and purely functional programming styles.&lt;br /&gt;&lt;br /&gt;Here's an example of a legal pure function that calls a semi-pure function (let's assume the method List[T].head is defined as pure):&lt;br /&gt;&lt;pre&gt;&lt;br /&gt; case class Var(var value : Int) {&lt;br /&gt;    @SemiPure def inc = {&lt;br /&gt;      value += 1&lt;br /&gt;      value&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  @Pure def pureFunc(l : List[Var]) = {&lt;br /&gt;    val x = l.head       // Ok, pure method called&lt;br /&gt;    val v2 = Var(10)     // Object created locally&lt;br /&gt;    v2.inc               // Ok, call of semi-pure function with locally created object&lt;br /&gt;  }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;However, this is not allowed:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;  @Pure def pureFunc2(l : List[Var]) = {&lt;br /&gt;    val x = l.head  // Ok, pure method called&lt;br /&gt;    x.inc           // Error: semi-pure method called on variant external object&lt;br /&gt;  }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;as it would result in an externally visible modification.&lt;br /&gt;&lt;br /&gt;How to verify that a type is invariant is a problem that needs to be explored further. It should be doable with an addition of an immutable/invariant annotation, but there are some complications with subtyping and type parameters.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Function Objects&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;One more thing needs to be solved: how to declare a pure function parameter for a &lt;a href=&quot;http://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;higher-order function&lt;/a&gt;. A quite simple solution is to create traits for pure and semi-pure functions and mix them with the function types. For example if you want to define a pure map function:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;  trait TSemiPure&lt;br /&gt;  trait TPure extends TSemiPure&lt;br /&gt;  &lt;br /&gt;  @Pure def map[T, U](l : List[T], fn : (T =&gt; U) with TPure) : List[U] = &lt;br /&gt;    if (l.isEmpty) Nil else fn(l.head) :: map(l.tail, fn)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The TPure type would simply mean that the function objects apply method is considered pure by the compiler. There would be some restrictions on how the (semi-)pure traits would be allowed to be mixed in by the programmer. Another, maybe simpler, option is to create a new set of (Semi)PureFunction0-22 traits that extends the existing Function0-22 traits.&lt;br /&gt;&lt;br /&gt;For lambda expressions the compiler could automatically infer if the function is pure, semi-pure or impure, and use the correct trait. During eta expansion the correct trait can be used depending on the annotation of the method/function expanded.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Final Words&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Using the constructs I've presented in this post I think it would be feasible to implement checking of functional purity in the Scala compiler without too much effort. Hopefully this will result in a SIP in the near future, so that Scala hackers can utilize the powerful tool of statically checked pure functions.&lt;br /&gt;&lt;br /&gt;I'm sure I've made some error or missed something along the way, so I'm grateful for any comments/corrections you might have.</content>
		<author>
			<name>Jesper Nordenberg</name>
			<email>noreply@blogger.com</email>
			<uri>http://jnordenberg.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Jesper's Blog</title>
			<subtitle type="html">randomThoughts filter (_.category in (Scala :: programming :: Nil)) foreach blogger.post</subtitle>
			<link rel="self" href="http://jnordenberg.blogspot.com/feeds/posts/default"/>
			<id>tag:blogger.com,1999:blog-3083788237966827171</id>
			<updated>2008-10-27T09:00:33+00:00</updated>
		</source>
	</entry>

	<entry>
		<title type="html">Erlang VM : now hosting multiple languages</title>
		<link href="http://debasishg.blogspot.com/2008/10/erlang-vm-now-hosting-multiple.html"/>
		<id>tag:blogger.com,1999:blog-22587889.post-3267378877829982419</id>
		<updated>2008-10-03T13:59:41+00:00</updated>
		<content type="html">In an earlier &lt;a href=&quot;http://debasishg.blogspot.com/2008/06/targeting-beam-for-extreme-reliability.html&quot;&gt;post&lt;/a&gt;, I had wondered why the Erlang virtual machine does not host a more diversified set of languages ..&lt;br /&gt;&lt;br /&gt;&lt;cite&gt;&quot;BEAM provides an ecosystem that offers phenomenal scalability with concurrent processes and distributed programming, which is really difficult (if not impossible) to replicate in any other virtual machine being worked upon today. After all, it is much easier to dress up Erlang with a nicer syntax than implementing the guarantees of reliability and extreme concurrency in any of your favorite languages' runtime.&quot;&lt;/cite&gt;&lt;br /&gt;&lt;br /&gt;Then I had &lt;a href=&quot;http://debasishg.blogspot.com/2008/09/infinite-possibilities-classes-and.html&quot;&gt;blogged&lt;/a&gt; about Reia, the Python/Ruby like scripting language on BEAM.&lt;br /&gt;&lt;br /&gt;A few days back, Robert Virding &lt;a href=&quot;http://forum.trapexit.org/viewtopic.php?p=43887&quot;&gt;released&lt;/a&gt; a stable version of LFE - Lisp Flavored Erlang, a concurrent Lisp based on the features and limitations of the Erlang VM. Unlike Lisp it doesn't have global data or mutating operations. Instead it has the goodness of Lisp macros, sexprs, code-as-data together with  the Erlang power of pattern matching and binary comprehensions. And the best part is that LFE hosts seamlessly with vanilla Erlang/OTP.&lt;br /&gt;&lt;br /&gt;Along with Erlang being used to develop &lt;a href=&quot;http://debasishg.blogspot.com/2008/08/erlang-as-middleware.html&quot;&gt;middleware&lt;/a&gt; applications, we are seeing increased use of Erlang VM, hosting more and more language variants. This is a clear indication that the Erlang ecosystem is growing. As Ted Leung has rightly observed in his post on &lt;a href=&quot;http://www.sauria.com/blog/2008/06/05/thoughts-on-maglev-vms-for-everybody/&quot;&gt;VMs for everybody&lt;/a&gt;, we are going to see not only flourishing new virtual machines, but also lots of languages atop existing virtual machines. &lt;br /&gt;&lt;br /&gt;Real good time to be a hacker .. a pity though only a few lucky ones get paid for hacking ..</content>
		<author>
			<name>Debasish</name>
			<email>noreply@blogger.com</email>
			<uri>http://debasishg.blogspot.com/</uri>
		</author>
		<source>
			<title type="html">Ruminations of a Programmer</title>
			<subtitle type="html">A programmer's blog - will deal with everything that relates to a programmer. Occasionally, it will contain some humour, some politics and some sport news.</subtitle>
			<link rel="self" href="http://debasishg.blogspot.com/feeds/posts/default?alt=rss"/>
			<id>tag:blogger.com,1999:blog-22587889</id>
			<updated>2008-11-01T19:20:16+00:00</updated>
		</source>
	</entry>

</feed>
